{"meta":{"title":"LITTLEMEEMOON","subtitle":"Every day with dreams is wonderful.","description":"This is my place where I can share my things about life, academic or just for fun, enjoy. :)","author":"Kayleen","url":"https://littlemeemoon.cn"},"pages":[{"title":"about","date":"2019-12-12T14:14:36.000Z","updated":"2020-04-08T13:08:47.938Z","comments":false,"path":"about/index.html","permalink":"https://littlemeemoon.cn/about/index.html","excerpt":"","text":"[Bear Cave - Kayleen]] 与&nbsp; Kayleen&nbsp; （ 真（ま）白（しろ） ） 对话中... bot_ui_ini()","keywords":"关于"},{"title":"bangumi","date":"2019-02-10T13:32:48.000Z","updated":"2020-04-06T16:05:44.917Z","comments":false,"path":"bangumi/index.html","permalink":"https://littlemeemoon.cn/bangumi/index.html","excerpt":"","text":"","keywords":null},{"title":"categories","date":"2019-12-20T15:13:48.000Z","updated":"2020-04-12T13:55:28.953Z","comments":true,"path":"categories/index.html","permalink":"https://littlemeemoon.cn/categories/index.html","excerpt":"","text":"In maintenance Hi, 此页面还在维护中哦，谢谢你的期待，可以留言给我哦~ [ Bear Cave ] Kayleen","keywords":"文章分类"},{"title":"comment","date":"2019-12-20T15:13:48.000Z","updated":"2020-04-07T11:26:02.901Z","comments":true,"path":"comment/index.html","permalink":"https://littlemeemoon.cn/comment/index.html","excerpt":"","text":"念两句诗 人闲桂花落，夜静春山空。 月出惊山鸟，时鸣春涧中。 王维 ·《鸟鸣涧》","keywords":"留言板"},{"title":"client","date":"2018-12-20T15:13:35.000Z","updated":"2020-04-06T16:22:30.837Z","comments":false,"path":"client/index.html","permalink":"https://littlemeemoon.cn/client/index.html","excerpt":"","text":"直接下载 or 扫码下载：","keywords":"Android客户端"},{"title":"donate","date":"2019-12-20T15:13:05.000Z","updated":"2020-04-07T11:26:06.240Z","comments":false,"path":"donate/index.html","permalink":"https://littlemeemoon.cn/donate/index.html","excerpt":"","text":"","keywords":"谢谢饲主了喵~"},{"title":"lab","date":"2019-01-05T13:47:59.000Z","updated":"2020-04-12T13:55:36.478Z","comments":false,"path":"lab/index.html","permalink":"https://littlemeemoon.cn/lab/index.html","excerpt":"","text":"In maintenance Hi, 此页面还在维护中哦，谢谢你的期待，可以留言给我哦~ [ Bear Cave ] Kayleen","keywords":"Lab实验室"},{"title":"rss","date":"2018-12-20T15:09:03.000Z","updated":"2020-04-06T16:05:44.919Z","comments":true,"path":"rss/index.html","permalink":"https://littlemeemoon.cn/rss/index.html","excerpt":"","text":""},{"title":"music","date":"2018-12-20T15:14:28.000Z","updated":"2020-04-09T08:55:04.838Z","comments":false,"path":"music/index.html","permalink":"https://littlemeemoon.cn/music/index.html","excerpt":"","text":"","keywords":"小悦邀你停下来听会歌😊"},{"title":"tags","date":"2018-12-12T14:14:16.000Z","updated":"2020-04-12T13:56:00.798Z","comments":true,"path":"tags/index.html","permalink":"https://littlemeemoon.cn/tags/index.html","excerpt":"","text":"In maintenance Hi, 此页面还在维护中哦，谢谢你的期待，可以留言给我哦~ [ Bear Cave ] Kayleen","keywords":"标签"},{"title":"theme-sakura","date":"2019-01-04T14:53:25.000Z","updated":"2020-04-06T16:05:44.919Z","comments":false,"path":"theme-sakura/index.html","permalink":"https://littlemeemoon.cn/theme-sakura/index.html","excerpt":"","text":"Hexo主题Sakura修改自WordPress主题Sakura，感谢原作者Mashiro","keywords":"Hexo 主题 Sakura 🌸"},{"title":"video","date":"2018-12-20T15:14:38.000Z","updated":"2020-04-06T16:05:44.919Z","comments":false,"path":"video/index.html","permalink":"https://littlemeemoon.cn/video/index.html","excerpt":"","text":"var videos = [ { img: 'https://lain.bgm.tv/pic/cover/l/0e/1e/218971_2y351.jpg', title: '朝花夕誓——于离别之朝束起约定之花', status: '已追完', progress: 100, jp: 'さよならの朝に約束の花をかざろう', time: '放送时间: 2018-02-24 SUN.', desc: ' 住在远离尘嚣的土地，一边将每天的事情编织成名为希比欧的布，一边静静生活的伊欧夫人民。在15岁左右外表就停止成长，拥有数百年寿命的他们，被称为“离别的一族”，并被视为活着的传说。没有双亲的伊欧夫少女玛奇亚，过着被伙伴包围的平稳日子，却总感觉“孤身一人”。他们的这种日常，一瞬间就崩溃消失。追求伊欧夫的长寿之血，梅萨蒂军乘坐着名为雷纳特的古代兽发动了进攻。在绝望与混乱之中，伊欧夫的第一美女蕾莉亚被梅萨蒂带走，而玛奇亚暗恋的少年克里姆也失踪了。玛奇亚虽然总算逃脱了，却失去了伙伴和归去之地……。' }, { img : 'https://lain.bgm.tv/pic/cover/l/0e/1e/218971_2y351.jpg', title: '朝花夕誓——于离别之朝束起约定之花', status: '已追完', progress: 100, jp: 'さよならの朝に約束の花をかざろう', time: '2018-02-24 SUN.', desc: ' 住在远离尘嚣的土地，一边将每天的事情编织成名为希比欧的布，一边静静生活的伊欧夫人民。在15岁左右外表就停止成长，拥有数百年寿命的他们，被称为“离别的一族”，并被视为活着的传说。没有双亲的伊欧夫少女玛奇亚，过着被伙伴包围的平稳日子，却总感觉“孤身一人”。他们的这种日常，一瞬间就崩溃消失。追求伊欧夫的长寿之血，梅萨蒂军乘坐着名为雷纳特的古代兽发动了进攻。在绝望与混乱之中，伊欧夫的第一美女蕾莉亚被梅萨蒂带走，而玛奇亚暗恋的少年克里姆也失踪了。玛奇亚虽然总算逃脱了，却失去了伙伴和归去之地……。' } ] .should-ellipsis{overflow:hidden;text-overflow:ellipsis;white-space:nowrap;width:95%;}.should-ellipsis-full{overflow:hidden;text-overflow:ellipsis;white-space:nowrap;width:100%;}.should-ellipsis i{position:absolute;right:24px;}.grey-text{color:#9e9e9e !important}.grey-text.text-darken-4{color:#212121 !important}html{line-height:1.15;-ms-text-size-adjust:100%;-webkit-text-size-adjust:100%}body{margin:0}img{border-style:none}progress{display:inline-block;vertical-align:baseline}::-webkit-file-upload-button{-webkit-appearance:button;font:inherit}html{-webkit-box-sizing:border-box;box-sizing:border-box}*,*:before,*:after{-webkit-box-sizing:inherit;box-sizing:inherit}ul:not(.browser-default){padding-left:0;list-style-type:none}ul:not(.browser-default)>li{list-style-type:none}.card{-webkit-box-shadow:0 2px 2px 0 rgba(0,0,0,0.14),0 3px 1px -2px rgba(0,0,0,0.12),0 1px 5px 0 rgba(0,0,0,0.2);box-shadow:0 2px 2px 0 rgba(0,0,0,0.14),0 3px 1px -2px rgba(0,0,0,0.12),0 1px 5px 0 rgba(0,0,0,0.2)}.hoverable{-webkit-transition:-webkit-box-shadow .25s;transition:-webkit-box-shadow .25s;transition:box-shadow .25s;transition:box-shadow .25s,-webkit-box-shadow .25s}.hoverable:hover{-webkit-box-shadow:0 8px 17px 0 rgba(0,0,0,0.2),0 6px 20px 0 rgba(0,0,0,0.19);box-shadow:0 8px 17px 0 rgba(0,0,0,0.2),0 6px 20px 0 rgba(0,0,0,0.19)}i{line-height:inherit}i.right{float:right;margin-left:15px}.bangumi .right{float:right !important}.material-icons{text-rendering:optimizeLegibility;-webkit-font-feature-settings:'liga';-moz-font-feature-settings:'liga';font-feature-settings:'liga'}.row{margin-left:auto;margin-right:auto;margin-bottom:20px}.row:after{content:\"\";display:table;clear:both}.row .col{float:left;-webkit-box-sizing:border-box;box-sizing:border-box;padding:0 .75rem;min-height:1px}.row .col.s12{width:100%;margin-left:auto;left:auto;right:auto}@media only screen and (min-width:601px){.row .col.m6{width:50%;margin-left:auto;left:auto;right:auto}}html{line-height:1.5;font-family:-apple-system,BlinkMacSystemFont,\"Segoe UI\",Roboto,Oxygen-Sans,Ubuntu,Cantarell,\"Helvetica Neue\",sans-serif;font-weight:normal;color:rgba(0,0,0,0.87)}@media only screen and (min-width:0){html{font-size:14px}}@media only screen and (min-width:992px){html{font-size:14.5px}}@media only screen and (min-width:1200px){html{font-size:15px}}.card{position:relative;margin:.5rem 0 1rem 0;background-color:#fff;-webkit-transition:-webkit-box-shadow .25s;transition:-webkit-box-shadow .25s;transition:box-shadow .25s;transition:box-shadow .25s,-webkit-box-shadow .25s;border-radius:2px}.card .card-title{font-size:24px;font-weight:300}.card .card-title.activator{cursor:pointer}.card .card-image{position:relative}.card .card-image img{display:block;border-radius:2px 2px 0 0;position:relative;left:0;right:0;top:0;bottom:0;width:100%}.card .card-content{padding:24px;border-radius:0 0 2px 2px}.card .card-content p{margin:0}.card .card-content .card-title{display:block;line-height:32px;margin-bottom:8px}.card .card-content .card-title i{line-height:32px}.card .card-reveal{padding:24px;position:absolute;background-color:#fff;width:100%;overflow-y:auto;left:0;top:100%;height:100%;z-index:3;display:none}.card .card-reveal .card-title{cursor:pointer;display:block}.waves-effect{position:relative;cursor:pointer;display:inline-block;overflow:hidden;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;-webkit-tap-highlight-color:transparent;vertical-align:middle;z-index:1;-webkit-transition:.3s ease-out;transition:.3s ease-out}.waves-effect img{position:relative;z-index:-1}.waves-block{display:block}::-webkit-input-placeholder{color:#d1d1d1}::-moz-placeholder{color:#d1d1d1}:-ms-input-placeholder{color:#d1d1d1}::-ms-input-placeholder{color:#d1d1d1}[type=\"radio\"]:not(:checked){position:absolute;opacity:0;pointer-events:none}[type=\"radio\"]:not(:checked)+span{position:relative;padding-left:35px;cursor:pointer;display:inline-block;height:25px;line-height:25px;font-size:1rem;-webkit-transition:.28s ease;transition:.28s ease;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none}[type=\"radio\"]:not(:checked)+span:before,[type=\"radio\"]:not(:checked)+span:after{border-radius:50%}[type=\"radio\"]:not(:checked)+span:before,[type=\"radio\"]:not(:checked)+span:after{border:2px solid #5a5a5a}[type=\"radio\"]:not(:checked)+span:after{-webkit-transform:scale(0);transform:scale(0)}[type=\"checkbox\"]:not(:checked){position:absolute;opacity:0;pointer-events:none}[type=\"checkbox\"]:not(:checked):disabled+span:not(.lever):before{border:none;background-color:rgba(0,0,0,0.42)}[type=\"checkbox\"].filled-in:not(:checked)+span:not(.lever):before{width:0;height:0;border:3px solid transparent;left:6px;top:10px;-webkit-transform:rotateZ(37deg);transform:rotateZ(37deg);-webkit-transform-origin:100% 100%;transform-origin:100% 100%}[type=\"checkbox\"].filled-in:not(:checked)+span:not(.lever):after{height:20px;width:20px;background-color:transparent;border:2px solid #5a5a5a;top:0px;z-index:0}input[type=checkbox]:not(:disabled) ~ .lever:active:before,input[type=checkbox]:not(:disabled).tabbed:focus ~ .lever::before{-webkit-transform:scale(2.4);transform:scale(2.4);background-color:rgba(0,0,0,0.08)}input[type=range].focused:focus:not(.active)::-webkit-slider-thumb{-webkit-box-shadow:0 0 0 10px rgba(38,166,154,0.26);box-shadow:0 0 0 10px rgba(38,166,154,0.26)}input[type=range].focused:focus:not(.active)::-moz-range-thumb{box-shadow:0 0 0 10px rgba(38,166,154,0.26)}input[type=range].focused:focus:not(.active)::-ms-thumb{box-shadow:0 0 0 10px rgba(38,166,154,0.26)} 番组计划 这里将是永远的回忆 window.onload = function(){ videos.forEach(function(video, i){ $('#rootRow').append(` ${video.title} ${video.jp} ${video.status} ${video.title} ${video.jp} 放送时间: ${video.time} ${video.desc} ${video.status} `) }) }","keywords":"B站"},{"title":"links","date":"2018-12-19T15:11:06.000Z","updated":"2020-04-12T14:21:27.604Z","comments":true,"path":"links/index.html","permalink":"https://littlemeemoon.cn/links/index.html","excerpt":"","text":"","keywords":"友人帐"},{"title":"Life","date":"2020-04-12T12:50:45.000Z","updated":"2020-04-12T14:06:41.057Z","comments":true,"path":"categories/Life/index.html","permalink":"https://littlemeemoon.cn/categories/Life/index.html","excerpt":"","text":"In maintenance Hi, 此页面还在维护中哦，谢谢你的期待，可以留言给我哦~ [ Bear Cave ] Kayleen","keywords":null},{"title":"Repost","date":"2020-04-12T12:51:48.000Z","updated":"2020-04-12T14:06:35.642Z","comments":true,"path":"categories/Repost/index.html","permalink":"https://littlemeemoon.cn/categories/Repost/index.html","excerpt":"","text":"In maintenance Hi, 此页面还在维护中哦，谢谢你的期待，可以留言给我哦~ [ Bear Cave ] Kayleen","keywords":null},{"title":"Thoughts","date":"2020-04-12T12:51:27.000Z","updated":"2020-04-12T13:55:23.553Z","comments":true,"path":"categories/Thoughts/index.html","permalink":"https://littlemeemoon.cn/categories/Thoughts/index.html","excerpt":"","text":"In maintenance Hi, 此页面还在维护中哦，谢谢你的期待，可以留言给我哦~ [ Bear Cave ] Kayleen","keywords":null},{"title":"initial page","date":"2020-04-12T12:53:20.000Z","updated":"2020-04-12T13:55:45.127Z","comments":true,"path":"tags/Cave/index.html","permalink":"https://littlemeemoon.cn/tags/Cave/index.html","excerpt":"","text":"In maintenance Hi, 此页面还在维护中哦，谢谢你的期待，可以留言给我哦~ [ Bear Cave ] Kayleen","keywords":null},{"title":"initial page","date":"2020-04-12T12:53:20.000Z","updated":"2020-04-16T08:36:05.588Z","comments":true,"path":"tags/Reading/index.html","permalink":"https://littlemeemoon.cn/tags/Reading/index.html","excerpt":"","text":"In maintenance Hi, 此页面还在维护中哦，谢谢你的期待，可以留言给我哦~ [ Bear Cave ] Kayleen","keywords":null},{"title":"initial page","date":"2020-04-12T12:53:20.000Z","updated":"2020-04-12T14:05:59.298Z","comments":true,"path":"tags/Pictures/index.html","permalink":"https://littlemeemoon.cn/tags/Pictures/index.html","excerpt":"","text":"In maintenance Hi, 此页面还在维护中哦，谢谢你的期待，可以留言给我哦~ [ Bear Cave ] Kayleen","keywords":null},{"title":"Updating...","date":"2020-04-12T12:53:20.000Z","updated":"2020-04-16T08:33:49.463Z","comments":false,"path":"tags/Updating/index.html","permalink":"https://littlemeemoon.cn/tags/Updating/index.html","excerpt":"","text":"暂时没有正在更新的内容哦~","keywords":null},{"title":"","date":"2020-06-06T07:17:49.831Z","updated":"2020-06-06T06:23:49.769Z","comments":true,"path":"google203f7a9b7f2d74c5.html","permalink":"https://littlemeemoon.cn/google203f7a9b7f2d74c5.html","excerpt":"","text":"google-site-verification: google203f7a9b7f2d74c5.html"}],"posts":[{"title":"Leetcode Note in June 2020 | day 5 | Random Pick with Weight","slug":"Technology/Coding/Leetcode/Leetcode-Note-in-June-2020-day-5-Random-Pick-with-Weight","date":"2020-06-06T06:08:16.000Z","updated":"2020-06-06T06:09:20.594Z","comments":true,"path":"2020/06/06/Technology/Coding/Leetcode/Leetcode-Note-in-June-2020-day-5-Random-Pick-with-Weight/","link":"","permalink":"https://littlemeemoon.cn/2020/06/06/Technology/Coding/Leetcode/Leetcode-Note-in-June-2020-day-5-Random-Pick-with-Weight/","excerpt":"","text":"&#x5199;&#x5728;&#x524D;&#x9762;&#x7684;&#x8BDD; &#x53C8;&#x662F;&#x4E00;&#x9053;&#x770B;&#x4E0D;&#x61C2;&#x9898;&#x76EE;&#x7684;&#x9898;o(&#x2565;&#xFE4F;&#x2565;)o Random Pick with Weight Given an array w of positive integers, where w[i] describes the weight of index i, write a function pickIndex which randomly picks an index in proportion to its weight. Note: 1 &lt;= w.length &lt;= 10000 1 &lt;= w[i] &lt;= 10^5 pickIndex will be called at most 10000 times. Example 1: Input: [&#x201C;Solution&#x201D;,&#x201C;pickIndex&#x201D;] [[[1]],[]] Output: [null,0] Example 2: Input: [&#x201C;Solution&#x201D;,&#x201C;pickIndex&#x201D;,&#x201C;pickIndex&#x201D;,&#x201C;pickIndex&#x201D;,&#x201C;pickIndex&#x201D;,&#x201C;pickIndex&#x201D;] [[[1,3]],[],[],[],[],[]] Output: [null,0,1,1,1,0] Solution &#x6709;&#x670B;&#x53CB;&#x4E00;&#x773C;&#x5C31;&#x770B;&#x61C2;&#x9898;&#x76EE;&#x7684;&#x4E48;&#xFF1F;&#x1F43B; &#x6211;&#x662F;&#x5728;&#x8BA8;&#x8BBA;&#x533A;&#x770B;&#x4E86;@logan138&#x7684;&#x89E3;&#x8BF4;&#x624D;&#x770B;&#x660E;&#x767D;&#x7684;&#xFF0C;&#x54C8;&#x54C8;&#x54C8;(&#x53EF;&#x80FD;&#x662F;&#x6211;&#x82F1;&#x8BED;&#x592A;&#x83DC;&#x4E86;)&#x3002; &#x9898;&#x76EE;&#x5927;&#x610F;&#x662F;&#xFF1A;&#x7ED9;&#x5B9A;&#x4E00;&#x4E2A;&#x6743;&#x91CD;&#x6570;&#x7EC4; w&#xFF0C;w[i] &#x4EE3;&#x8868;&#x7D22;&#x5F15; i &#x7684;&#x6743;&#x91CD;&#x3002;&#x6743;&#x91CD;&#x8D8A;&#x5927;&#xFF0C;&#x968F;&#x673A;&#x83B7;&#x5F97;&#x8BE5;&#x7D22;&#x5F15;&#x7684;&#x6982;&#x7387;&#x5C31;&#x8D8A;&#x5927;&#x3002;&#x5047;&#x8BBE; w = [1, 3] &#x3002;&#x6211;&#x4EEC;&#x53EF;&#x4EE5;&#x77E5;&#x9053;&#x9009;&#x62E9;&#x6BCF;&#x4E2A;&#x7D22;&#x5F15;&#x7684;&#x6982;&#x7387;&#x3002;P(i) = w[i] / &#x603B;&#x6743;&#x91CD;&#xFF08;1 + 3 = 4&#xFF09;&#x56E0;&#x6B64;&#xFF0C;&#x5BF9;&#x4E8E;&#x7D22;&#x5F15; 0: P&#xFF08;0&#xFF09;= 1/4 &#x5BF9;&#x4E8E;&#x7D22;&#x5F15;1: P&#xFF08;1&#xFF09;= 3/4 &#x56E0;&#x6B64;&#xFF0C;&#x6709;1/4&#x7684;&#x673A;&#x4F1A;&#x83B7;&#x5F97;&#x7D22;&#x5F15;0&#x548C;3/4&#x7684;&#x673A;&#x4F1A;&#x83B7;&#x5F97;&#x7D22;&#x5F15;1&#x3002; &#x73B0;&#x5728;&#x5E94;&#x8BE5;&#x90FD;&#x61C2;&#x4E86;&#x5427;&#xFF0C;&#x641E;&#x61C2;&#x9898;&#x610F;&#x4E4B;&#x540E;&#xFF0C;&#x7ED3;&#x9898;&#x601D;&#x8DEF;&#x5176;&#x5B9E;&#x662F;&#x7B80;&#x5355;&#x7684;&#x3002;&#x6211;&#x7684;&#x601D;&#x8DEF;&#x662F;&#xFF1A;&#x6211;&#x4EEC;&#x6B63;&#x5E38;&#x751F;&#x6210;&#x968F;&#x673A;&#x6570;&#xFF0C;&#x4F46;&#x662F;&#x7531;&#x4E8E;w[i] &gt;= 1&#xFF0C;&#x6240;&#x4EE5;&#x53EF;&#x4EE5;&#x628A;&#x968F;&#x673A;&#x6570;&#x7684;&#x8303;&#x56F4;&#x63A7;&#x5236;&#x5728;[1, &#x603B;&#x6743;&#x91CD;]&#x8303;&#x56F4;&#x5185;&#x3002;&#x7136;&#x540E;&#x6839;&#x636E;&#x751F;&#x6210;&#x7684;&#x968F;&#x673A;&#x6570;&#x5927;&#x5C0F;&#x6765;&#x8FD4;&#x56DE;&#x5E94;&#x8BE5;&#x8FD4;&#x56DE;&#x7684;index&#x3002;&#x4E3E;&#x4E2A;&#x1F330;&#xFF1A; w = [1, 3] =&gt; total_w = 1 + 3 = 4 &#x751F;&#x6210;&#x968F;&#x673A;&#x6570;&#xFF1A;num = random(1, 4) =&gt; random num &#x843D;&#x5728; [1] &#x5219;&#x8FD4;&#x56DE;index 0&#xFF0C;&#x843D;&#x5728; [2, 4] &#x8FD4;&#x56DE; index 1 &#x5047;&#x8BBE; num = 3 =&gt; &#x843D;&#x5728;2-4&#x8303;&#x56F4; =&gt; &#x8FD4;&#x56DE; index = 1 &#x5047;&#x8BBE; num = 1 =&gt; &#x843D;&#x5728;1&#x8303;&#x56F4; =&gt; &#x8FD4;&#x56DE; index = 0 Code class Solution: def __init__(self, w: List[int]): self.w = w self.w_len = len(w) for i in range(1, self.w_len): self.w[i] += self.w[i-1] def pickIndex(self) -&gt; int: num = random.randint(1, self.w[-1]) left = 0 right = self.w_len - 1 while left &lt; right: mid = (right - left) // 2 + left if num &gt; self.w[mid]: left = mid + 1 else: right = mid return left # Your Solution object will be instantiated and called as such: # obj = Solution(w) # param_1 = obj.pickIndex() Reference Question explained","categories":[{"name":"Technology","slug":"Technology","permalink":"https://littlemeemoon.cn/categories/Technology/"},{"name":"Coding","slug":"Technology/Coding","permalink":"https://littlemeemoon.cn/categories/Technology/Coding/"},{"name":"Leetcode","slug":"Technology/Coding/Leetcode","permalink":"https://littlemeemoon.cn/categories/Technology/Coding/Leetcode/"}],"tags":[{"name":"Leetcode","slug":"Leetcode","permalink":"https://littlemeemoon.cn/tags/Leetcode/"},{"name":"Python","slug":"Python","permalink":"https://littlemeemoon.cn/tags/Python/"},{"name":"Algorithm","slug":"Algorithm","permalink":"https://littlemeemoon.cn/tags/Algorithm/"}],"keywords":[{"name":"Technology","slug":"Technology","permalink":"https://littlemeemoon.cn/categories/Technology/"},{"name":"Coding","slug":"Technology/Coding","permalink":"https://littlemeemoon.cn/categories/Technology/Coding/"},{"name":"Leetcode","slug":"Technology/Coding/Leetcode","permalink":"https://littlemeemoon.cn/categories/Technology/Coding/Leetcode/"}]},{"title":"CV | Facial Recognition | Fisherfaces vs Eigenfaces Principle","slug":"Technology/CV-Algorithm/Facial-Recognition/Facial Recognition - Fisherfaces vs Eigenfaces - principle","date":"2020-06-04T13:54:06.000Z","updated":"2020-06-05T05:19:51.471Z","comments":true,"path":"2020/06/04/Technology/CV-Algorithm/Facial-Recognition/Facial Recognition - Fisherfaces vs Eigenfaces - principle/","link":"","permalink":"https://littlemeemoon.cn/2020/06/04/Technology/CV-Algorithm/Facial-Recognition/Facial%20Recognition%20-%20Fisherfaces%20vs%20Eigenfaces%20-%20principle/","excerpt":"","text":"&#x524D;&#x8A00; &#x5199;&#x8FD9;&#x7BC7;&#x6587;&#x7AE0;&#x662F;&#x56E0;&#x4E3A;&#x524D;&#x51E0;&#x5929;&#x4E00;&#x4E2A;&#x540C;&#x5B66;&#x95EE;&#x6709;&#x6CA1;&#x6709;&#x4EBA;&#x8138;&#x8BC6;&#x522B;&#x76F8;&#x5173;&#x7684;&#x9879;&#x76EE;&#x7ED9;&#x4ED6;&#x7EC3;&#x7EC3;&#x624B;&#xFF0C;&#x6211;&#x5F53;&#x65F6;&#x7A81;&#x7136;&#x60F3;&#x8D77;&#x6211;&#x672C;&#x79D1;&#x671F;&#x95F4;&#x53BB;&#x65B0;&#x52A0;&#x5761;&#x56FD;&#x7ACB;&#x5927;&#x5B66;&#x505A;&#x7684;&#x4E00;&#x4E2A;&#x4EBA;&#x8138;&#x8BC6;&#x522B;&#x9879;&#x76EE;&#x3002;&#x8BE5;&#x9879;&#x76EE;&#x662F;&#x57FA;&#x4E8E;Fisherfaces&#x548C;Eigenfaces&#x65B9;&#x6CD5;&#x5BF9;&#x4EBA;&#x8138;&#x8FDB;&#x884C;&#x8BC6;&#x522B;&#x3002;&#x7136;&#x540E;&#x6211;&#x5C31;&#x627E;&#x4E86;&#x4E00;&#x4E0B;&#x6211;&#x4E4B;&#x524D;&#x7684;&#x4EE3;&#x7801;&#xFF0C;&#x8BF4;&#x5B9E;&#x8BDD;&#x90A3;&#x4EE3;&#x7801;&#x867D;&#x7136;&#x80FD;&#x6B63;&#x5E38;&#x5DE5;&#x4F5C;&#x4F46;&#x662F;&#x771F;&#x7684;&#x5199;&#x5F97;&#x6709;&#x70B9;&#x70C2;&#xFF0C;&#x800C;&#x4E14;&#x5F88;&#x4E0D;&#x4E25;&#x8C28;&#x1F923;&#x3002;&#x3002; &#x5F53;&#x65F6;&#x505A;&#x8FD9;&#x4E2A;&#x9879;&#x76EE;&#x7684;&#x8BFE;&#x7A0B;&#x662F;&#x751F;&#x7269;&#x8BC6;&#x522B;&#x6280;&#x672F;&#xFF0C;&#x8001;&#x5E08;&#x4E0A;&#x8BFE;&#x7684;&#x65F6;&#x95F4;&#x662F;&#x4E24;&#x5468;&#xFF0C;&#x771F;&#x7684;&#x662F;&#x9B54;&#x9B3C;&#x8BAD;&#x7EC3;&#x554A;&#xFF0C;&#x4ECE;&#x9AD8;&#x7B49;&#x6570;&#x5B66;&#xFF0C;&#x7EBF;&#x6027;&#x4EE3;&#x6570;&#xFF0C;&#x6982;&#x7387;&#x8BBA;&#xFF0C;python(&#x6211;&#x8BB0;&#x5F97;&#x6211;&#x5F53;&#x65F6;&#x662F;&#x7B2C;&#x4E00;&#x6B21;&#x63A5;&#x89E6;python&#xFF0C;&#x56E0;&#x4E3A;&#x5728;&#x5B66;&#x6821;&#x5B66;&#x5F97;&#x8BED;&#x8A00;&#x90FD;&#x662F;c&#xFF0C;c++&#xFF0C;java&#x8FD9;&#x4E9B;)&#xFF0C;&#x5230;&#x6A21;&#x5F0F;&#x8BC6;&#x522B;&#xFF0C;&#x4EBA;&#x8138;&#x8BC6;&#x522B;&#x7B49;&#x7B49;&#x3002;&#x6211;&#x8BB0;&#x5F97;&#x505A;&#x8FD9;&#x4E2A;&#x9879;&#x76EE;&#x7684;&#x65F6;&#x5019;&#x6211;&#x662F;&#x5927;&#x4E09;&#xFF0C;&#x5F53;&#x65F6;&#x53BB;&#x7684;&#x65F6;&#x5019;&#x6211;&#x597D;&#x50CF;&#x5F88;&#x4E0D;&#x9002;&#x5E94;&#xFF0C;&#x56E0;&#x4E3A;&#x8001;&#x5E08;&#x4EEC;&#x90FD;&#x662F;&#x5168;&#x82F1;&#x6587;&#x4E0A;&#x8BFE;&#xFF0C;&#x4F5C;&#x4E3A;&#x4E00;&#x4E2A;&#x82F1;&#x8BED;&#x6E23;&#x6E23;&#x6211;&#x771F;&#x7684;&#x5F88;&#x75DB;&#x82E6;&#xFF0C;&#x4E0A;&#x8BFE;&#x542C;&#x4E0D;&#x61C2;&#x3002;&#x8001;&#x5E08;&#x7ED9;&#x7684;&#x8D44;&#x6599;&#x4E5F;&#x662F;&#x5168;&#x82F1;&#x6587;&#xFF0C;&#x4E0B;&#x8BFE;&#x770B;&#x4E0D;&#x61C2;&#x3002;&#x73B0;&#x5728;&#x60F3;&#x60F3;&#x6211;&#x90FD;&#x4E0D;&#x77E5;&#x9053;&#x6211;&#x90A3;&#x4E2A;&#x65F6;&#x5019;&#x600E;&#x4E48;&#x5B8C;&#x6210;&#x8FD9;&#x4E2A;&#x8BFE;&#x9898;&#x7684;(&#x56E0;&#x4E3A;&#x662F;&#x7B2C;&#x4E00;&#x6B21;&#x63A5;&#x89E6;&#x8FD9;&#x4E9B;&#x4E1C;&#x897F;&#xFF0C;&#x4E4B;&#x524D;&#x5C31;&#x53EA;&#x505A;&#x8FC7;&#x4E00;&#x4E9B;&#x7CFB;&#x7EDF;&#xFF0C;&#x6E38;&#x620F;&#x554A;&#x4EC0;&#x4E48;&#x7684;&#x3002;&#x5F53;&#x65F6;&#x8C8C;&#x4F3C;&#x7ECF;&#x5E38;&#x901A;&#x5BB5;&#x3002;&#x611F;&#x8C22;&#x66FE;&#x7ECF;&#x90A3;&#x4E48;&#x52AA;&#x529B;&#x7684;&#x81EA;&#x5DF1;&#xB67;(&#xE51;&#x2022;&#x300;&#x25E1;&#x2022;&#x301;&#xE51;)&#xAED;)&#xFF0C;&#x73B0;&#x5728;&#x7684;&#x81EA;&#x5DF1;&#x8BE5;&#x53CD;&#x7701;&#x4E86;&#xFF01;&#xFF01;&#xFF09;&#x3002;&#x4E5F;&#x662F;&#x56E0;&#x4E3A;&#x8FD9;&#x6B21;&#x7ECF;&#x5386;&#xFF0C;&#x6211;&#x56DE;&#x6765;&#x4E4B;&#x540E;&#x5C31;&#x60F3;&#x8981;&#x8003;&#x7814;&#xFF0C;&#x60F3;&#x8981;&#x7EE7;&#x7EED;&#x5728;&#x8FD9;&#x4E2A;&#x9886;&#x57DF;&#x6DF1;&#x9020;&#x3002;&#x5982;&#x4ECA;&#x4E5F;&#x7B97;&#x662F;&#x5982;&#x613F;&#x4EE5;&#x507F;&#x4E86;&#x5427;&#xFF0C;&#x521D;&#x5FC3;&#x4E5F;&#x6CA1;&#x53D8;&#xFF0C;&#x7EE7;&#x7EED;&#x641E;&#x7740;&#x6211;&#x611F;&#x5174;&#x8DA3;&#x7684;&#x8BA1;&#x7B97;&#x673A;&#x89C6;&#x89C9;&#x3002;&#x867D;&#x7136;&#x56F0;&#x96BE;&#x91CD;&#x91CD;&#xFF0C;&#x4E5F;&#x548C;&#x66FE;&#x7ECF;&#x60F3;&#x8C61;&#x7684;&#x7814;&#x7A76;&#x751F;&#x751F;&#x6D3B;&#x4E0D;&#x592A;&#x4E00;&#x6837;&#xFF0C;&#x4F46;&#x662F;&#x5FC3;&#x6001;&#x8981;&#x597D;&#x5427;&#xFF0C;&#x4E8B;&#x5728;&#x4EBA;&#x4E3A;&#x3002;&#x9898;&#x5916;&#x8BDD;&#x6709;&#x70B9;&#x591A;&#x554A;&#xFF0C;&#x4E3B;&#x8981;&#x662F;&#x7A81;&#x7136;&#x60F3;&#x8D77;&#x4E86;&#x8FD9;&#x6BB5;&#x7ECF;&#x5386;&#xFF0C;&#x770B;&#x770B;&#x73B0;&#x5728;&#x7684;&#x81EA;&#x5DF1;&#xFF0C;&#x4E5F;&#x7B97;&#x662F;&#x5B9E;&#x73B0;&#x4E86;&#x5F53;&#x521D;&#x7684;&#x60F3;&#x6CD5;&#x5427;&#x3002; &#x8FD9;&#x7BC7;&#x6587;&#x7AE0;&#x4E3B;&#x8981;&#x662F;&#x60F3;&#x56DE;&#x987E;&#x548C;&#x68B3;&#x7406;&#x8FD9;&#x4E2A;&#x9879;&#x76EE;&#x6240;&#x7528;&#x5230;&#x7684;&#x7B97;&#x6CD5;&#xFF08;Fisherfaces&#x548C;Eigenfaces&#xFF09;&#x3002;&#x8FD8;&#x6709;&#x4E2A;&#x60F3;&#x6CD5;&#x5C31;&#x662F;&#x60F3;&#x91CD;&#x65B0;&#x4F18;&#x5316;&#x4E00;&#x4E0B;&#x8FD9;&#x4E2A;&#x9879;&#x76EE;&#xFF08;&#x521A;&#x521A;&#x8BF4;&#x4E86;&#x8FD9;&#x4E2A;&#x4EE3;&#x7801;&#x5199;&#x5F97;&#x5F88;&#x70C2;..&#xFF09;&#x3002;&#x4E4B;&#x524D;&#x505A;&#x7684;&#x8FD9;&#x4E2A;&#x9879;&#x76EE;&#x662F;&#x901A;&#x8FC7;&#x6DF7;&#x6DC6;&#x77E9;&#x9635;&#x6765;&#x8BA1;&#x7B97;&#x548C;&#x5C55;&#x793A;&#x8BC6;&#x522B;&#x7684;&#x6B63;&#x786E;&#x7387;&#x3002;&#x6211;&#x73B0;&#x5728;&#x7684;&#x60F3;&#x6CD5;&#x662F;&#x7ED9;&#x8FD9;&#x4E2A;&#x9879;&#x76EE;&#x505A;&#x4E00;&#x4E2A;&#x5347;&#x534E;&#xFF0C;&#x8FD8;&#x662F;&#x57FA;&#x4E8E;&#x8FD9;&#x4E24;&#x4E2A;&#x7B97;&#x6CD5;&#xFF0C;&#x505A;&#x4E00;&#x4E2A;&#x5B9E;&#x65F6;&#x4EBA;&#x8138;&#x68C0;&#x6D4B;&#x548C;&#x8BC6;&#x522B;&#x7684;&#x7CFB;&#x7EDF;&#x3002;&#x73B0;&#x5728;&#x5C31;&#x5148;&#x4ECE;&#x8FD9;&#x4E2A;&#x4E24;&#x4E2A;&#x7B97;&#x6CD5;&#x7684;&#x539F;&#x7406;&#x5F00;&#x59CB;&#x5427;~ &#x4EBA;&#x8138;&#x8BC6;&#x522B; &#x5E7F;&#x4E49;&#x7684;&#x4EBA;&#x8138;&#x8BC6;&#x522B;&#x5B9E;&#x9645;&#x5305;&#x62EC;&#x6784;&#x5EFA;&#x4EBA;&#x8138;&#x8BC6;&#x522B;&#x7CFB;&#x7EDF;&#x7684;&#x4E00;&#x7CFB;&#x5217;&#x76F8;&#x5173;&#x6280;&#x672F;&#xFF0C;&#x5305;&#x62EC;&#x4EBA;&#x8138;&#x56FE;&#x50CF;&#x91C7;&#x96C6;&#x3001;&#x4EBA;&#x8138;&#x5B9A;&#x4F4D;&#x3001;&#x4EBA;&#x8138;&#x8BC6;&#x522B;&#x9884;&#x5904;&#x7406;&#x3001;&#x8EAB;&#x4EFD;&#x786E;&#x8BA4;&#x4EE5;&#x53CA;&#x8EAB;&#x4EFD;&#x67E5;&#x627E;&#x7B49;&#xFF1B;&#x800C;&#x72ED;&#x4E49;&#x7684;&#x4EBA;&#x8138;&#x8BC6;&#x522B;&#x7279;&#x6307;&#x901A;&#x8FC7;&#x4EBA;&#x8138;&#x8FDB;&#x884C;&#x8EAB;&#x4EFD;&#x786E;&#x8BA4;&#x6216;&#x8005;&#x8EAB;&#x4EFD;&#x67E5;&#x627E;&#x7684;&#x6280;&#x672F;&#x3002;&#x4EBA;&#x8138;&#x8BC6;&#x522B;&#x662F;&#x4E00;&#x9879;&#x70ED;&#x95E8;&#x7684;&#x8BA1;&#x7B97;&#x673A;&#x6280;&#x672F;&#x7814;&#x7A76;&#x9886;&#x57DF;&#xFF0C;&#x5B83;&#x5C5E;&#x4E8E;&#x751F;&#x7269;&#x7279;&#x5F81;&#x8BC6;&#x522B;&#x6280;&#x672F;&#xFF0C;&#x662F;&#x5BF9;&#x751F;&#x7269;&#x4F53;&#xFF08;&#x4E00;&#x822C;&#x7279;&#x6307;&#x4EBA;&#xFF09;&#x672C;&#x8EAB;&#x7684;&#x751F;&#x7269;&#x7279;&#x5F81;&#x6765;&#x533A;&#x5206;&#x751F;&#x7269;&#x4F53;&#x4E2A;&#x4F53;&#x3002; &#x9762;&#x4E34;&#x7684;&#x6311;&#x6218; &#x867D;&#x7136;&#x4EBA;&#x8138;&#x8BC6;&#x522B;&#x6709;&#x5F88;&#x591A;&#x5176;&#x4ED6;&#x8BC6;&#x522B;&#x65E0;&#x6CD5;&#x6BD4;&#x62DF;&#x7684;&#x4F18;&#x70B9;&#xFF0C;&#x4F46;&#x662F;&#x5B83;&#x672C;&#x8EAB;&#x4E5F;&#x5B58;&#x5728;&#x8BB8;&#x591A;&#x56F0;&#x96BE;&#x3002;&#x4EBA;&#x8138;&#x8BC6;&#x522B;&#x88AB;&#x8BA4;&#x4E3A;&#x662F;&#x751F;&#x7269;&#x7279;&#x5F81;&#x8BC6;&#x522B;&#x9886;&#x57DF;&#x751A;&#x81F3;&#x4EBA;&#x5DE5;&#x667A;&#x80FD;&#x9886;&#x57DF;&#x6700;&#x56F0;&#x96BE;&#x7684;&#x7814;&#x7A76;&#x8BFE;&#x9898;&#x4E4B;&#x4E00;&#x3002;&#x4EBA;&#x8138;&#x8BC6;&#x522B;&#x7684;&#x56F0;&#x96BE;&#x4E3B;&#x8981;&#x662F;&#x4EBA;&#x8138;&#x4F5C;&#x4E3A;&#x751F;&#x7269;&#x7279;&#x5F81;&#x7684;&#x7279;&#x70B9;&#x6240;&#x5E26;&#x6765;&#x7684;&#x3002;&#x4EBA;&#x8138;&#x5728;&#x89C6;&#x89C9;&#x4E0A;&#x7684;&#x7279;&#x70B9;&#x662F;&#xFF1A; &#x4E0D;&#x540C;&#x4E2A;&#x4F53;&#x4E4B;&#x95F4;&#x7684;&#x533A;&#x522B;&#x4E0D;&#x5927;&#xFF0C;&#x6240;&#x6709;&#x7684;&#x4EBA;&#x8138;&#x7684;&#x7ED3;&#x6784;&#x90FD;&#x76F8;&#x4F3C;&#xFF0C;&#x751A;&#x81F3;&#x4EBA;&#x8138;&#x5668;&#x5B98;&#x7684;&#x7ED3;&#x6784;&#x5916;&#x5F62;&#x90FD;&#x5F88;&#x76F8;&#x4F3C;&#x3002;&#x8FD9;&#x6837;&#x7684;&#x7279;&#x70B9;&#x5BF9;&#x4E8E;&#x5229;&#x7528;&#x4EBA;&#x8138;&#x8FDB;&#x884C;&#x5B9A;&#x4F4D;&#x662F;&#x6709;&#x5229;&#x7684;&#xFF0C;&#x4F46;&#x662F;&#x5BF9;&#x4E8E;&#x5229;&#x7528;&#x4EBA;&#x8138;&#x533A;&#x5206;&#x4EBA;&#x7C7B;&#x4E2A;&#x4F53;&#x662F;&#x4E0D;&#x5229;&#x7684;&#x3002; &#x4EBA;&#x8138;&#x7684;&#x5916;&#x5F62;&#x5F88;&#x4E0D;&#x7A33;&#x5B9A;&#xFF0C;&#x4EBA;&#x53EF;&#x4EE5;&#x901A;&#x8FC7;&#x8138;&#x90E8;&#x7684;&#x53D8;&#x5316;&#x4EA7;&#x751F;&#x5F88;&#x591A;&#x8868;&#x60C5;&#xFF0C;&#x800C;&#x5728;&#x4E0D;&#x540C;&#x89C2;&#x5BDF;&#x89D2;&#x5EA6;&#xFF0C;&#x4EBA;&#x8138;&#x7684;&#x89C6;&#x89C9;&#x56FE;&#x50CF;&#x4E5F;&#x76F8;&#x5DEE;&#x5F88;&#x5927;&#xFF0C;&#x53E6;&#x5916;&#xFF0C;&#x4EBA;&#x8138;&#x8BC6;&#x522B;&#x8FD8;&#x53D7;&#x5149;&#x7167;&#x6761;&#x4EF6;&#xFF08;&#x4F8B;&#x5982;&#x767D;&#x5929;&#x548C;&#x591C;&#x665A;&#xFF0C;&#x5BA4;&#x5185;&#x548C;&#x5BA4;&#x5916;&#x7B49;&#xFF09;&#x3001;&#x4EBA;&#x8138;&#x7684;&#x5F88;&#x591A;&#x906E;&#x76D6;&#x7269;&#xFF08;&#x4F8B;&#x5982;&#x53E3;&#x7F69;&#x3001;&#x58A8;&#x955C;&#x3001;&#x5934;&#x53D1;&#x3001;&#x80E1;&#x987B;&#x7B49;&#xFF09;&#x3001;&#x5E74;&#x9F84;&#x3001;&#x62CD;&#x6444;&#x7684;&#x59FF;&#x6001;&#x89D2;&#x5EA6;&#x7B49;&#x591A;&#x65B9;&#x9762;&#x56E0;&#x7D20;&#x7684;&#x5F71;&#x54CD;&#x3002; &#x5728;&#x4EBA;&#x8138;&#x8BC6;&#x522B;&#x4E2D;&#xFF0C;&#x7B2C;&#x4E00;&#x7C7B;&#x7684;&#x53D8;&#x5316;&#x662F;&#x5E94;&#x8BE5;&#x653E;&#x5927;&#x800C;&#x4F5C;&#x4E3A;&#x533A;&#x5206;&#x4E2A;&#x4F53;&#x7684;&#x6807;&#x51C6;&#x7684;&#xFF0C;&#x800C;&#x7B2C;&#x4E8C;&#x7C7B;&#x7684;&#x53D8;&#x5316;&#x5E94;&#x8BE5;&#x6D88;&#x9664;&#xFF0C;&#x56E0;&#x4E3A;&#x5B83;&#x4EEC;&#x53EF;&#x4EE5;&#x4EE3;&#x8868;&#x540C;&#x4E00;&#x4E2A;&#x4E2A;&#x4F53;&#x3002;&#x901A;&#x5E38;&#x79F0;&#x7B2C;&#x4E00;&#x7C7B;&#x53D8;&#x5316;&#x4E3A;&#x7C7B;&#x95F4;&#x53D8;&#x5316;&#xFF08;inter-class difference&#xFF09;&#xFF0C;&#x800C;&#x79F0;&#x7B2C;&#x4E8C;&#x7C7B;&#x53D8;&#x5316;&#x4E3A;&#x7C7B;&#x5185;&#x53D8;&#x5316;&#xFF08;intra-class difference&#xFF09;&#x3002;&#x5BF9;&#x4E8E;&#x4EBA;&#x8138;&#xFF0C;&#x7C7B;&#x5185;&#x53D8;&#x5316;&#x5F80;&#x5F80;&#x5927;&#x4E8E;&#x7C7B;&#x95F4;&#x53D8;&#x5316;&#xFF0C;&#x4ECE;&#x800C;&#x4F7F;&#x5728;&#x53D7;&#x7C7B;&#x5185;&#x53D8;&#x5316;&#x5E72;&#x6270;&#x7684;&#x60C5;&#x51B5;&#x4E0B;&#x5229;&#x7528;&#x7C7B;&#x95F4;&#x53D8;&#x5316;&#x533A;&#x5206;&#x4E2A;&#x4F53;&#x53D8;&#x5F97;&#x5F02;&#x5E38;&#x56F0;&#x96BE;&#x3002; &#x6280;&#x672F;&#x7EC6;&#x8282; &#x4E00;&#x822C;&#x6765;&#x8BF4;&#xFF0C;&#x4EBA;&#x8138;&#x8BC6;&#x522B;&#x7CFB;&#x7EDF;&#x5305;&#x62EC;&#x56FE;&#x50CF;&#x6444;&#x53D6;&#x3001;&#x4EBA;&#x8138;&#x5B9A;&#x4F4D;&#x3001;&#x56FE;&#x50CF;&#x9884;&#x5904;&#x7406;&#x3001;&#x4EE5;&#x53CA;&#x4EBA;&#x8138;&#x8BC6;&#x522B;&#xFF08;&#x8EAB;&#x4EFD;&#x786E;&#x8BA4;&#x6216;&#x8005;&#x8EAB;&#x4EFD;&#x67E5;&#x627E;&#xFF09;&#x3002;&#x7CFB;&#x7EDF;&#x8F93;&#x5165;&#x4E00;&#x822C;&#x662F;&#x4E00;&#x5F20;&#x6216;&#x8005;&#x4E00;&#x7CFB;&#x5217;&#x542B;&#x6709;&#x672A;&#x786E;&#x5B9A;&#x8EAB;&#x4EFD;&#x7684;&#x4EBA;&#x8138;&#x56FE;&#x50CF;&#xFF0C;&#x4EE5;&#x53CA;&#x4EBA;&#x8138;&#x6570;&#x636E;&#x5E93;&#x4E2D;&#x7684;&#x82E5;&#x5E72;&#x5DF2;&#x77E5;&#x8EAB;&#x4EFD;&#x7684;&#x4EBA;&#x8138;&#x56FE;&#x8C61;&#x6216;&#x8005;&#x76F8;&#x5E94;&#x7684;&#x7F16;&#x7801;&#xFF0C;&#x800C;&#x5176;&#x8F93;&#x51FA;&#x5219;&#x662F;&#x4E00;&#x7CFB;&#x5217;&#x76F8;&#x4F3C;&#x5EA6;&#x5F97;&#x5206;&#xFF0C;&#x8868;&#x660E;&#x5F85;&#x8BC6;&#x522B;&#x7684;&#x4EBA;&#x8138;&#x7684;&#x8EAB;&#x4EFD;&#x3002; &#x76EE;&#x524D;&#x4EBA;&#x8138;&#x8BC6;&#x522B;&#x7684;&#x7B97;&#x6CD5;&#x53EF;&#x4EE5;&#x5206;&#x7C7B;&#x4E3A;&#xFF1A; &#x57FA;&#x4E8E;&#x4EBA;&#x8138;&#x7279;&#x5F81;&#x70B9;&#x7684;&#x8BC6;&#x522B;&#x7B97;&#x6CD5;&#xFF08;feature-based recognition algorithms&#xFF09;&#xFF1B; &#x57FA;&#x4E8E;&#x6574;&#x5E45;&#x4EBA;&#x8138;&#x56FE;&#x50CF;&#x7684;&#x8BC6;&#x522B;&#x7B97;&#x6CD5;&#xFF08;appearance-based recognition algorithms&#xFF09;&#xFF1B; &#x57FA;&#x4E8E;&#x6A21;&#x677F;&#x7684;&#x8BC6;&#x522B;&#x7B97;&#x6CD5;&#xFF08;template-based recognition algorithms&#xFF09;&#xFF1B; &#x5229;&#x7528;&#x795E;&#x7ECF;&#x7F51;&#x7EDC;&#x8FDB;&#x884C;&#x8BC6;&#x522B;&#x7684;&#x7B97;&#x6CD5;&#xFF08;recognition algorithms using neural network&#xFF09;&#xFF1B; &#x5229;&#x7528;&#x652F;&#x6301;&#x5411;&#x91CF;&#x673A;&#x8FDB;&#x884C;&#x8BC6;&#x522B;&#x7684;&#x7B97;&#x6CD5;&#xFF08;recognition algorithms using SVM&#xFF09;&#x3002; &#x65B9;&#x6CD5; Eigenfaces &#x7279;&#x5F81;&#x8138;&#x662F;&#x6307;&#x4E00;&#x79CD; appearance-based &#x7684;&#x9762;&#x90E8;&#x8BC6;&#x522B;&#x65B9;&#x6CD5;&#xFF0C;&#x65E8;&#x5728;&#x6355;&#x83B7;&#x9762;&#x90E8;&#x56FE;&#x50CF;&#x96C6;&#x5408;&#x4E2D;&#x7684;&#x53D8;&#x5316;&#x5E76;&#x4F7F;&#x7528;&#x6B64;&#x4FE1;&#x606F;&#x5BF9;&#x6574;&#x4F53;&#x4E2D;&#x7684;&#x5404;&#x4E2A;&#x9762;&#x90E8;&#x56FE;&#x50CF;&#x8FDB;&#x884C;&#x7F16;&#x7801;&#x548C;&#x6BD4;&#x8F83;&#xFF08;&#x4E0E; parts-based &#x6216; feature-based &#x7684;&#x65B9;&#x6CD5;&#x76F8;&#x53CD;&#xFF09;&#x7684;&#x65B9;&#x5F0F;&#x3002;&#x5177;&#x4F53;&#x800C;&#x8A00;&#xFF0C;&#x7279;&#x5F81;&#x8138;&#x662F;&#x8138;&#x90E8;&#x5206;&#x5E03;&#x7684;&#x4E3B;&#x8981;&#x6210;&#x5206;&#xFF0C;&#x6216;&#x8005;&#x7B49;&#x6548;&#x5730;&#xFF0C;&#x662F;&#x8138;&#x90E8;&#x56FE;&#x50CF;&#x96C6;&#x5408;&#x7684;&#x534F;&#x65B9;&#x5DEE;&#x77E9;&#x9635;&#x7684;&#x7279;&#x5F81;&#x5411;&#x91CF;&#xFF0C;&#x5176;&#x4E2D;&#x5177;&#x6709;N&#x4E2A;&#x50CF;&#x7D20;&#x7684;&#x56FE;&#x50CF;&#x88AB;&#x89C6;&#x4E3A;N&#x7EF4;&#x7A7A;&#x95F4;&#x4E2D;&#x7684;&#x4E00;&#x4E2A;&#x70B9;&#xFF08;&#x6216;&#x5411;&#x91CF;&#xFF09;&#x3002;Sirovich&#x548C;Kirby&#xFF08;Sirovich and Kirby 1987&#xFF09;&#x63D0;&#x51FA;&#x4E86;&#x4F7F;&#x7528;&#x4E3B;&#x8981;&#x6210;&#x5206;&#x4EE3;&#x8868;&#x4EBA;&#x8138;&#x7684;&#x60F3;&#x6CD5;&#xFF0C;Turk&#x548C;Pentland&#xFF08;Turk and Pentland 1991&#xFF09;&#x5219;&#x91C7;&#x7528;&#x4E86;&#x8FD9;&#x79CD;&#x60F3;&#x6CD5;&#x8FDB;&#x884C;&#x4EBA;&#x8138;&#x68C0;&#x6D4B;&#x548C;&#x8BC6;&#x522B;&#x3002;Eigenface&#x65B9;&#x6CD5;&#x88AB;&#x8BB8;&#x591A;&#x4EBA;&#x8BA4;&#x4E3A;&#x662F;&#x7B2C;&#x4E00;&#x79CD;&#x53EF;&#x884C;&#x7684;&#x9762;&#x90E8;&#x8BC6;&#x522B;&#x6280;&#x672F;&#xFF0C;&#x5E76;&#x4E14;&#x5B83;&#x662F;&#x9876;&#x7EA7;&#x5546;&#x4E1A;&#x9762;&#x90E8;&#x8BC6;&#x522B;&#x6280;&#x672F;&#x4EA7;&#x54C1;&#x4E4B;&#x4E00;&#x7684;&#x57FA;&#x7840;&#x3002;&#x81EA;&#x4ECE;&#x6700;&#x521D;&#x7684;&#x5F00;&#x53D1;&#x548C;&#x53D1;&#x5E03;&#x4EE5;&#x6765;&#xFF0C;&#x81EA;&#x52A8;&#x9762;&#x90E8;&#x8BC6;&#x522B;&#x7CFB;&#x7EDF;&#x5DF2;&#x7ECF;&#x5BF9;&#x539F;&#x59CB;&#x65B9;&#x6CD5;&#x8FDB;&#x884C;&#x4E86;&#x8BB8;&#x591A;&#x6269;&#x5C55;&#xFF0C;&#x5E76;&#x4E14;&#x8FDB;&#x884C;&#x4E86;&#x8BB8;&#x591A;&#x65B0;&#x7684;&#x5F00;&#x53D1;&#x3002;&#x7279;&#x5F81;&#x8138;&#x4ECD;&#x7136;&#x7ECF;&#x5E38;&#x88AB;&#x8BA4;&#x4E3A;&#x662F;&#x57FA;&#x7EBF;&#x6BD4;&#x8F83;&#x65B9;&#x6CD5;&#xFF0C;&#x4EE5;&#x8BC1;&#x660E;&#x8FD9;&#x79CD;&#x7CFB;&#x7EDF;&#x7684;&#x6700;&#x4F4E;&#x9884;&#x671F;&#x6027;&#x80FD;&#x3002; &#x7279;&#x5F81;&#x8138;&#x7684;&#x52A8;&#x673A;&#x662F;&#x53CC;&#x91CD;&#x7684;&#xFF1A; &#x63D0;&#x53D6;&#x76F8;&#x5173;&#x7684;&#x9762;&#x90E8;&#x4FE1;&#x606F;&#xFF0C;&#x8BE5;&#x4FE1;&#x606F;&#x53EF;&#x80FD;&#x4E0E;&#x4EBA;&#x7C7B;&#x5BF9;&#x773C;&#x775B;&#xFF0C;&#x9F3B;&#x5B50;&#x548C;&#x5634;&#x5507;&#x7B49;&#x9762;&#x90E8;&#x7279;&#x5F81;&#x7684;&#x76F4;&#x89C9;&#x6CA1;&#x6709;&#x76F4;&#x63A5;&#x5173;&#x7CFB;&#x3002;&#x4E00;&#x79CD;&#x65B9;&#x6CD5;&#x662F;&#x6355;&#x83B7;&#x9762;&#x90E8;&#x56FE;&#x50CF;&#x4E4B;&#x95F4;&#x7684;&#x7EDF;&#x8BA1;&#x5DEE;&#x5F02;&#x3002; &#x6709;&#x6548;&#x5730;&#x8868;&#x793A;&#x4EBA;&#x8138;&#x56FE;&#x50CF;&#x3002;&#x4E3A;&#x4E86;&#x51CF;&#x5C11;&#x8BA1;&#x7B97;&#x548C;&#x7A7A;&#x95F4;&#x590D;&#x6742;&#x5EA6;&#xFF0C;&#x53EF;&#x4EE5;&#x4F7F;&#x7528;&#x5C11;&#x91CF;&#x53C2;&#x6570;&#x6765;&#x8868;&#x793A;&#x6BCF;&#x4E2A;&#x9762;&#x90E8;&#x56FE;&#x50CF;&#x3002; &#x7279;&#x5F81;&#x8138;&#x53EF;&#x4EE5;&#x88AB;&#x8BA4;&#x4E3A;&#x662F;&#x8868;&#x5F81;&#x8138;&#x90E8;&#x56FE;&#x50CF;&#x4E4B;&#x95F4;&#x7684;&#x6574;&#x4F53;&#x53D8;&#x5316;&#x7684;&#x4E00;&#x7EC4;&#x7279;&#x5F81;&#x3002;&#x7136;&#x540E;&#xFF0C;&#x4F7F;&#x7528;&#x7279;&#x5F81;&#x8138;&#x7684;&#x5B50;&#x96C6;&#xFF08;&#x4E0E;&#x6700;&#x5927;&#x7279;&#x5F81;&#x503C;&#x5173;&#x8054;&#x7684;&#x7279;&#x5F81;&#x8138;&#xFF09;&#x5BF9;&#x6BCF;&#x4E2A;&#x8138;&#x56FE;&#x50CF;&#x8FDB;&#x884C;&#x8FD1;&#x4F3C;&#x3002;&#x8FD9;&#x4E9B;&#x7279;&#x5F81;&#x662F;&#x8BAD;&#x7EC3;&#x96C6;&#x4E2D;&#x5DEE;&#x5F02;&#x6700;&#x5927;&#x7684;&#x3002; &#x8BA1;&#x7B97;&#x7279;&#x5F81;&#x8138;&#xFF08;Eigenfaces&#xFF09; &#x5728;&#x751F;&#x6210;&#x7279;&#x5F81;&#x8138;&#x4E4B;&#x524D;&#xFF0C;&#x5148;&#x5BF9;&#x8138;&#x90E8;&#x56FE;&#x50CF;&#x8FDB;&#x884C;&#x5F52;&#x4E00;&#x5316;&#x5904;&#x7406;&#x4EE5;&#x4F7F;&#x5176;&#x4E0E;&#x773C;&#x775B;&#x548C;&#x5634;&#x5DF4;&#x5BF9;&#x9F50;&#xFF0C;&#x7136;&#x540E;&#x4EE5;&#x76F8;&#x540C;&#x7684;&#x50CF;&#x7D20;&#x5206;&#x8FA8;&#x7387;&#x5BF9;&#x6240;&#x6709;&#x56FE;&#x50CF;&#x8FDB;&#x884C;&#x91CD;&#x65B0;&#x91C7;&#x6837;&#x3002;&#x7136;&#x540E;&#x901A;&#x8FC7;&#x4E3B;&#x6210;&#x5206;&#x5206;&#x6790;&#xFF08;PCA&#xFF09;&#x4EE5;&#x4E0B;&#x5217;&#x65B9;&#x5F0F;&#x4ECE;&#x56FE;&#x50CF;&#x6570;&#x636E;&#x4E2D;&#x63D0;&#x53D6;&#x7279;&#x5F81;&#x8138;&#xFF1A; &#x7ED9;&#x5B9A; M &#x5F20;&#x5927;&#x5C0F;&#x4E3A; h&#xD7;w &#x7684;&#x4EBA;&#x8138;&#x56FE;&#x50CF;(&#x5E94;&#x9002;&#x5F53;&#x7F29;&#x653E;&#x548C;&#x5BF9;&#x9F50;&#x9762;&#x90E8;&#x56FE;&#x50CF;&#xFF0C;&#x80CC;&#x666F;&#xFF08;&#x4EE5;&#x53CA;&#x53EF;&#x80FD;&#x7684;&#x975E;&#x9762;&#x90E8;&#x533A;&#x57DF;&#xFF0C;&#x4F8B;&#x5982;&#x5934;&#x53D1;&#x548C;&#x8116;&#x5B50;&#xFF09;&#x5E94;&#x4FDD;&#x6301;&#x6052;&#x5B9A;&#x6216;&#x53BB;&#x9664;)&#x3002;&#x5C06;&#x6BCF;&#x5F20;&#x56FE;&#x50CF;&#x53D8;&#x6362;&#x4E3A;D(=hw)&#x5927;&#x5C0F;&#x7684;&#x5411;&#x91CF;&#xFF0C;&#x5F97;&#x5230;&#x96C6;&#x5408;&#xFF1A; {&#x393;1,&#x393;2,...,&#x393;M} \\{\\varGamma_1, \\varGamma_2, ..., \\varGamma_M\\} {&#x393;1&#x200B;,&#x393;2&#x200B;,...,&#x393;M&#x200B;} &#x6BCF;&#x5F20;&#x4EBA;&#x8138;&#x90FD;&#x4E0E;&#x4EBA;&#x8138;&#x5E73;&#x5747;&#x503C;&#x6C42;&#x5DEE;&#xFF1A; &#x3A6;i=&#x393;i&#x2212;&#x3A8; &#x3A6;_i= \\varGamma_i - \\varPsi &#x3A6;i&#x200B;=&#x393;i&#x200B;&#x2212;&#x3A8; &#x5176;&#x4E2D;&#x5E73;&#x5747;&#x8138;&#x4E3A;&#xFF1A;&#x3A8;=1M&#x2211;i=1M&#x393;i\\varPsi = \\frac 1 M \\sum_{i=1}^{M} \\varGamma_i&#x3A8;=M1&#x200B;&#x2211;i=1M&#x200B;&#x393;i&#x200B;&#x3002; &#x534F;&#x65B9;&#x5DEE;&#x77E9;&#x9635; C&#x2208;&#x211C;D&#xD7;DC \\in \\Re^{D&#xD7;D}C&#x2208;&#x211C;D&#xD7;D &#x5B9A;&#x4E49;&#x4E3A;: C=1M&#x2211;i=1M&#x3A8;i&#x3A8;iT=AAT C=\\frac 1 M \\sum_{i=1}^M \\varPsi_i \\varPsi_i^T = AA^T C=M1&#x200B;i=1&#x2211;M&#x200B;&#x3A8;i&#x200B;&#x3A8;iT&#x200B;=AAT &#x5176;&#x4E2D;A=&#x3A8;1,&#x3A8;2,...,&#x3A8;M&#x2208;&#x211C;D&#xD7;MA = {\\varPsi_1, \\varPsi_2, ..., \\varPsi_M} \\in \\Re^{D&#xD7;M}A=&#x3A8;1&#x200B;,&#x3A8;2&#x200B;,...,&#x3A8;M&#x200B;&#x2208;&#x211C;D&#xD7;M &#x5F53;&#x56FE;&#x50CF;&#x5C3A;&#x5BF8; D&#x226B;MD &#x226B; MD&#x226B;M &#x65F6;&#xFF0C;&#x786E;&#x5B9A; CCC &#x7684;&#x7279;&#x5F81;&#x5411;&#x91CF;&#x662F;&#x6BD4;&#x8F83;&#x56F0;&#x96BE;&#x7684;&#x4EFB;&#x52A1;&#x3002;&#x4F46;&#x662F;&#xFF0C;&#x4E3A;&#x4E86;&#x6709;&#x6548;&#x5730;&#x8BA1;&#x7B97; CCC &#x7684;&#x7279;&#x5F81;&#x5411;&#x91CF;&#xFF0C;&#x53EF;&#x4EE5;&#x5148;&#x8BA1;&#x7B97;&#x51FA;&#x8F83;&#x5C0F;&#x7684; M&#xD7;MM&#xD7;MM&#xD7;M &#x77E9;&#x9635; ATAA^TAATA&#x7684;&#x7279;&#x5F81;&#x5411;&#x91CF;&#x3002;ATAA^TAATA&#x7684;&#x7279;&#x5F81;&#x5411;&#x91CF;&#x548C;&#x7279;&#x5F81;&#x503C;&#x77E9;&#x9635;&#x5B9A;&#x4E49;&#x4E3A;: V={v1,v2,...,vr} V = \\{v_1, v_2, ..., v_r\\} V={v1&#x200B;,v2&#x200B;,...,vr&#x200B;} &#x4E14; &#x39B;=diag{&#x3BB;1,&#x3BB;2,...,&#x3BB;r},&#x3BB;1&#x2265;&#x3BB;2&#x2265;...&#x3BB;r&gt;0&#x39B; = diag\\{\\lambda_1, \\lambda_2, ..., \\lambda_r\\}, \\lambda_1 &#x2265; \\lambda_2 &#x2265; ... \\lambda_r &gt; 0&#x39B;=diag{&#x3BB;1&#x200B;,&#x3BB;2&#x200B;,...,&#x3BB;r&#x200B;},&#x3BB;1&#x200B;&#x2265;&#x3BB;2&#x200B;&#x2265;...&#x3BB;r&#x200B;&gt;0&#xFF0C;&#x5176;&#x4E2D; rrr &#x662F; AAA &#x7684;&#x79E9;&#x3002;&#x5BF9;&#x5E94;&#x4E8E;&#x96F6;&#x7279;&#x5F81;&#x503C;&#x7684;&#x7279;&#x5F81;&#x5411;&#x91CF;&#x5DF2;&#x88AB;&#x820D;&#x53BB;&#x3002; CCC &#x7684;&#x7279;&#x5F81;&#x503C;&#x548C;&#x7279;&#x5F81;&#x5411;&#x91CF;&#x77E9;&#x9635;&#x662F; &#x39B;&#x39B;&#x39B;&#xFF0C;U=AV&#x39B;&#x2212;1/2U = AV&#x39B;^{&#x2212;1/2}U=AV&#x39B;&#x2212;1/2&#xFF0C;&#x5176;&#x4E2D;U={ui}U = \\{u_i\\}U={ui&#x200B;}&#x662F;&#x7279;&#x5F81;&#x8138;&#x7684;&#x96C6;&#x5408;&#x3002; &#x4E0B;&#x56FE;&#x5DE6;&#x8FB9;&#x516D;&#x5F20;&#x56FE;&#x662F;&#x6765;&#x81EA;CMU PIE&#x6570;&#x636E;&#x96C6;&#x7684;&#x4E00;&#x4E9B;&#x793A;&#x4F8B;&#xFF0C;&#x53F3;&#x8FB9;&#x516D;&#x5F20;&#x56FE;&#x663E;&#x793A;&#x4E86;&#x4ECE;&#x6570;&#x636E;&#x96C6;&#x83B7;&#x5F97;&#x7684;&#x5E73;&#x5747;&#x4EBA;&#x8138;&#x548C;&#x7279;&#x5F81;&#x8138;&#xFF0C;&#x5728;&#x53F3;&#x8FB9;&#x7684;&#x516D;&#x5F20;&#x56FE;&#x4E2D;&#xFF0C;&#x7B2C;&#x4E00;&#x884C;&#x7684;&#x6700;&#x5DE6;&#x8FB9;&#x662F;&#x5E73;&#x5747;&#x8138;&#xFF0C;&#x5176;&#x4ED6;&#x4E24;&#x4E2A;&#x662F;&#x7279;&#x5F81;&#x8138;&#xFF1B;&#x7B2C;&#x4E8C;&#x884C;&#x663E;&#x793A;&#x7684;&#x662F;&#x5177;&#x6709;&#x81F3;&#x5C11;&#x4E09;&#x4E2A;&#x7279;&#x5F81;&#x503C;&#x7684;&#x7279;&#x5F81;&#x8138;&#x3002; &#x5728;&#x4EBA;&#x8138;&#x5904;&#x7406;&#x4E2D;&#x4F7F;&#x7528;&#x7279;&#x5F81;&#x8138; &#x901A;&#x8FC7;&#x9009;&#x62E9;&#x4E0E;m&#x4E2A;&#x6700;&#x5927;&#x7279;&#x5F81;&#x503C;&#x76F8;&#x5173;&#x7684;&#x7279;&#x5F81;&#x5411;&#x91CF; U^={u1,...,um}\\hat{U} = \\{u_1, ... , u_m\\}U^={u1&#x200B;,...,um&#x200B;} &#x7684;&#x5B50;&#x96C6;&#xFF0C;&#x7279;&#x5F81;&#x9762;&#x8DE8;&#x8D8A;&#x539F;&#x59CB;&#x56FE;&#x50CF;&#x7A7A;&#x95F4;&#x7684;m&#x7EF4;&#x5B50;&#x7A7A;&#x95F4;&#x3002;&#x8FD9;&#x751F;&#x6210;&#x6240;&#x8C13;&#x7684;&#x8138;&#x7A7A;&#x95F4;&#xFF0C;&#x5176;&#x539F;&#x70B9;&#x662F;&#x5E73;&#x5747;&#x8138;&#xFF0C;&#x5176;&#x8F74;&#x662F;&#x7279;&#x5F81;&#x8138;&#x3002;&#x4E3A;&#x4E86;&#x6267;&#x884C;&#x9762;&#x90E8;&#x68C0;&#x6D4B;&#x6216;&#x8BC6;&#x522B;&#xFF0C;&#x53EF;&#x4EE5;&#x8BA1;&#x7B97;&#x9762;&#x90E8;&#x7A7A;&#x95F4;&#x5185;&#x6216;&#x4E0E;&#x9762;&#x90E8;&#x7A7A;&#x95F4;&#x7684;&#x8DDD;&#x79BB;&#x3002; &#x4E0B;&#x56FE;&#x5C55;&#x793A;&#x4E86;2D&#x4EBA;&#x8138;&#x7A7A;&#x95F4;&#x7684;&#x53EF;&#x89C6;&#x5316;&#xFF0C;&#x5176;&#x4E2D;&#x7684;&#x8F74;&#x8868;&#x793A;&#x4E24;&#x4E2A;&#x7279;&#x5F81;&#x8138;&#xFF1A; &#x7279;&#x5F81;&#x8138;&#x68C0;&#x6D4B; &#x7531;&#x4E8E;&#x4EBA;&#x8138;&#x7A7A;&#x95F4;&#xFF08;&#x7279;&#x5F81;&#x8138;&#x5B50;&#x7A7A;&#x95F4;&#xFF09;&#x5B9A;&#x4E49;&#x4E86;&#x4EBA;&#x8138;&#x56FE;&#x50CF;&#x7684;&#x7A7A;&#x95F4;&#xFF0C;&#x56E0;&#x6B64;&#x4EBA;&#x8138;&#x68C0;&#x6D4B;&#x53EF;&#x4EE5;&#x89C6;&#x4E3A;&#x68C0;&#x6D4B;&#x9760;&#x8FD1;&#x4EBA;&#x8138;&#x7A7A;&#x95F4;&#x7684;&#x56FE;&#x50CF;&#x5757;&#x3002;&#x6362;&#x53E5;&#x8BDD;&#x8BF4;&#xFF0C;&#x6295;&#x5F71;&#x8DDD;&#x79BB; &#x3B4;&#x3B4;&#x3B4; &#x5E94;&#x5728;&#x67D0;&#x4E2A;&#x9608;&#x503C; &#x3B8;&#x3B4;&#x3B8;_&#x3B4;&#x3B8;&#x3B4;&#x200B; &#x4E4B;&#x5185;&#x3002;&#x70B9;&#x5230;&#x7A7A;&#x95F4;&#x8DDD;&#x79BB; &#x3B4;&#x3B4;&#x3B4; &#x662F;&#x4EBA;&#x8138;&#x56FE;&#x50CF;&#x4E0E;&#x5176;&#x5728;&#x4EBA;&#x8138;&#x7A7A;&#x95F4;&#x4E0A;&#x7684;&#x6295;&#x5F71;&#x4E4B;&#x95F4;&#x7684;&#x8DDD;&#x79BB;&#xFF0C;&#x53EF;&#x4EE5;&#x8BA1;&#x7B97;&#x4E3A;: &#x3B4;=&#x2225;(I&#x2212;U^U^T)(&#x393;&#x2212;&#x3A8;)&#x2225; &#x3B4; = \\| (I-\\hat{U}\\hat{U}^T)(\\varGamma - \\varPsi) \\| &#x3B4;=&#x2225;(I&#x2212;U^U^T)(&#x393;&#x2212;&#x3A8;)&#x2225; &#x5176;&#x4E2D; III &#x662F;&#x5355;&#x4F4D;&#x77E9;&#x9635;&#x3002;&#x5982;&#x4E0B;&#x6240;&#x793A;&#xFF0C;&#x4E00;&#x5F20;&#x8138;&#x7684;&#x56FE;&#x50CF;&#xFF08;&#x4E0A;&#xFF09;&#x4E0E;&#x5176;&#x8138;&#x90E8;&#x7A7A;&#x95F4;&#x6295;&#x5F71;&#xFF08;&#x4E0B;&#xFF09;&#x4E4B;&#x95F4;&#x7684;&#x8DDD;&#x79BB;&#x6BD4;&#x975E;&#x8138;&#xFF08;&#x6811;&#xFF09;&#x56FE;&#x50CF;&#x5C0F;&#x5F97;&#x591A;&#xFF1A; &#x9762;&#x90E8;&#x8BC6;&#x522B; &#x901A;&#x8FC7; &#x3A9;=UT(&#x393;&#x2212;&#x3A8;)&#x3A9; = U^T(\\varGamma - \\varPsi)&#x3A9;=UT(&#x393;&#x2212;&#x3A8;) &#x5C06;&#x65B0;&#x4EBA;&#x8138; &#x3A8;\\varPsi&#x3A8; &#x6295;&#x5F71;&#x5230;&#x4EBA;&#x8138;&#x7A7A;&#x95F4;&#x4E2D;&#xFF0C;&#x5176;&#x4E2D; U^\\hat{U}U^ &#x662F;&#x6709;&#x6548;&#x7279;&#x5F81;&#x5411;&#x91CF;&#x7684;&#x96C6;&#x5408;&#x3002;&#x6743;&#x91CD;&#x5411;&#x91CF; &#x3A9;&#x3A9;&#x3A9; &#x662F;&#x9762;&#x90E8;&#x7A7A;&#x95F4;&#x4E2D;&#x65B0;&#x9762;&#x90E8;&#x7684;&#x8868;&#x793A;&#x3002;&#x786E;&#x5B9A;&#x54EA;&#x4E2A;&#x4EBA;&#x8138;&#x7C7B;&#x522B; &#x393;\\varGamma&#x393; &#x7684;&#x4E00;&#x79CD;&#x7B80;&#x5355;&#x65B9;&#x6CD5;&#x662F;&#x6700;&#x5C0F;&#x5316;&#x6B27;&#x6C0F;&#x8DDD;&#x79BB;&#xFF1A; &#x3B5;k=&#x2225;&#x3A9;&#x2212;&#x3A9;k&#x2225; \\varepsilon_k = \\|&#x3A9; - &#x3A9;_k \\| &#x3B5;k&#x200B;=&#x2225;&#x3A9;&#x2212;&#x3A9;k&#x200B;&#x2225; &#x5176;&#x4E2D; &#x3A9;k&#x3A9;_k&#x3A9;k&#x200B; &#x662F;&#x4EE3;&#x8868;&#x7B2C;kkk&#x4E2A;&#x9762;&#x90E8;&#x7C7B;&#x522B;&#x7684;&#x6743;&#x91CD;&#x5411;&#x91CF;&#x3002;&#x5982;&#x679C;&#x6700;&#x5C0F; &#x3F5;k&#x3F5;_k&#x3F5;k&#x200B; &#x5C0F;&#x4E8E;&#x67D0;&#x4E2A;&#x9884;&#x5B9A;&#x9608;&#x503C; &#x3B8;&#x3F5;&#x3B8;_&#x3F5;&#x3B8;&#x3F5;&#x200B;&#xFF0C;&#x5219;&#x8BA4;&#x4E3A;&#x4EBA;&#x8138; &#x393;\\varGamma&#x393; &#x5C5E;&#x4E8E;k&#x7C7B;&#xFF1B;&#x5426;&#x5219;&#xFF0C;&#x5C06;&#x5176;&#x5206;&#x7C7B;&#x4E3A;&#x672A;&#x77E5;&#x3002; Fisherfaces &#x8BA1;&#x7B97;&#x673A;&#x89C6;&#x89C9;&#xFF0C;&#x6A21;&#x5F0F;&#x8BC6;&#x522B;&#x548C;&#x673A;&#x5668;&#x5B66;&#x4E60;&#x4E2D;&#x7684;&#x5173;&#x952E;&#x95EE;&#x9898;&#x662F;&#x4E3A;&#x624B;&#x5934;&#x7684;&#x4EFB;&#x52A1;&#x5B9A;&#x4E49;&#x5408;&#x9002;&#x7684;&#x6570;&#x636E;&#x8868;&#x793A;&#x3002;&#x8868;&#x793A;&#x8F93;&#x5165;&#x6570;&#x636E;&#x7684;&#x4E00;&#x79CD;&#x65B9;&#x6CD5;&#x662F;&#x627E;&#x5230;&#x4E00;&#x4E2A;&#x4EE3;&#x8868;&#x5927;&#x90E8;&#x5206;&#x6570;&#x636E;&#x5DEE;&#x5F02;&#x7684;&#x5B50;&#x7A7A;&#x95F4;&#x3002;&#x8FD9;&#x53EF;&#x4EE5;&#x901A;&#x8FC7;&#x4F7F;&#x7528;&#x4E3B;&#x6210;&#x5206;&#x5206;&#x6790;&#xFF08;PCA&#xFF09;&#x6765;&#x83B7;&#x5F97;&#x3002;&#x4E0A;&#x9762;&#x6211;&#x4EEC;&#x63D0;&#x5230;&#x4E86;&#xFF0C;&#x5F53;&#x5E94;&#x7528;&#x4E8E;&#x4EBA;&#x8138;&#x56FE;&#x50CF;&#x65F6;&#xFF0C;PCA&#x4F1A;&#x751F;&#x6210;&#x4E00;&#x7EC4;&#x7279;&#x5F81;&#x8138;&#x3002;&#x8FD9;&#x4E9B;&#x7279;&#x5F81;&#x9762;&#x662F;&#x4E0E;&#x8BAD;&#x7EC3;&#x6570;&#x636E;&#x534F;&#x65B9;&#x5DEE;&#x77E9;&#x9635;&#x7684;&#x6700;&#x5927;&#x7279;&#x5F81;&#x503C;&#x76F8;&#x5173;&#x7684;&#x7279;&#x5F81;&#x5411;&#x91CF;&#x3002;&#x56E0;&#x6B64;&#x627E;&#x5230;&#x7684;&#x7279;&#x5F81;&#x5411;&#x91CF;&#x5BF9;&#x5E94;&#x4E8E;&#x6700;&#x5C0F;&#x4E8C;&#x4E58;&#xFF08;LS&#xFF09;&#x89E3;&#x3002;&#x5B9E;&#x9645;&#x4E0A;&#xFF0C;&#x8FD9;&#x662F;&#x8868;&#x793A;&#x6570;&#x636E;&#x7684;&#x4E00;&#x79CD;&#x6709;&#x6548;&#x65B9;&#x6CD5;&#xFF0C;&#x56E0;&#x4E3A;&#x5B83;&#x53EF;&#x786E;&#x4FDD;&#x7EF4;&#x6301;&#x6570;&#x636E;&#x65B9;&#x5DEE;&#xFF0C;&#x540C;&#x65F6;&#x6D88;&#x9664;&#x6837;&#x672C;&#x5411;&#x91CF;&#x4E2D;&#x539F;&#x59CB;&#x7279;&#x5F81;&#xFF08;&#x5C3A;&#x5BF8;&#xFF09;&#x4E4B;&#x95F4;&#x4E0D;&#x5FC5;&#x8981;&#x7684;&#x73B0;&#x6709;&#x76F8;&#x5173;&#x6027;&#x3002;&#x5F53;&#x76EE;&#x6807;&#x662F;&#x5206;&#x7C7B;&#x800C;&#x4E0D;&#x662F;&#x7279;&#x5F81;&#x8868;&#x793A;&#x65F6;&#xFF0C;LS&#x89E3;&#x51B3;&#x65B9;&#x6848;&#x53EF;&#x80FD;&#x4E0D;&#x4F1A;&#x4EA7;&#x751F;&#x6700;&#x7406;&#x60F3;&#x7684;&#x7ED3;&#x679C;&#x3002;&#x5728;&#x8FD9;&#x79CD;&#x60C5;&#x51B5;&#x4E0B;&#xFF0C;&#x6211;&#x4EEC;&#x5E0C;&#x671B;&#x627E;&#x5230;&#x4E00;&#x79CD;&#x5B50;&#x7A7A;&#x95F4;&#xFF0C;&#x8BE5;&#x5B50;&#x7A7A;&#x95F4;&#x5C06;&#x540C;&#x4E00;&#x7C7B;&#x522B;&#x7684;&#x6837;&#x672C;&#x77E2;&#x91CF;&#x6620;&#x5C04;&#x5230;&#x7279;&#x5F81;&#x8868;&#x793A;&#x7684;&#x5355;&#x4E2A;&#x70B9;&#x4E2D;&#xFF0C;&#x800C;&#x4E0D;&#x540C;&#x7C7B;&#x522B;&#x7684;&#x6837;&#x672C;&#x77E2;&#x91CF;&#x5219;&#x5C3D;&#x53EF;&#x80FD;&#x5730;&#x5F7C;&#x6B64;&#x5206;&#x5F00;&#x3002;&#x4E3A;&#x5B9E;&#x73B0;&#x6B64;&#x76EE;&#x6807;&#x800C;&#x884D;&#x751F;&#x7684;&#x6280;&#x672F;&#x79F0;&#x4E3A;&#x5224;&#x522B;&#x5206;&#x6790;&#xFF08;DA&#xFF09;&#x3002;&#x6700;&#x8457;&#x540D;&#x7684;DA&#x662F;&#x7EBF;&#x6027;&#x5224;&#x522B;&#x5206;&#x6790;&#xFF08;LDA&#xFF09;&#xFF0C;&#x53EF;&#x4EE5;&#x4ECE;R.A.&#x63D0;&#x51FA;&#x7684;&#x60F3;&#x6CD5;&#x4E2D;&#x5F97;&#x51FA;&#x3002;1936&#x5E74;&#x7684;Fisher&#x3002;&#x5F53;&#x4F7F;&#x7528;LDA&#x67E5;&#x627E;&#x4E00;&#x7EC4;&#x9762;&#x90E8;&#x56FE;&#x50CF;&#x7684;&#x5B50;&#x7A7A;&#x95F4;&#x8868;&#x793A;&#x65F6;&#xFF0C;&#x5B9A;&#x4E49;&#x8BE5;&#x7A7A;&#x95F4;&#x7684;&#x7ED3;&#x679C;&#x57FA;&#x5411;&#x91CF;&#x79F0;&#x4E3A;Fisherfaces&#x3002; &#x5224;&#x522B;&#x5206;&#x6570; &#x4E3A;&#x4E86;&#x8BA1;&#x7B97;Fisherfaces&#xFF0C;&#x6211;&#x4EEC;&#x5047;&#x8BBE;&#x6BCF;&#x4E2A;&#x7C7B;&#x522B;&#x4E2D;&#x7684;&#x6570;&#x636E;&#x90FD;&#x662F;&#x6B63;&#x6001;&#x5206;&#x5E03;&#x7684;&#x3002;&#x6211;&#x4EEC;&#x5C06;&#x591A;&#x5143;&#x6B63;&#x6001;&#x5206;&#x5E03;&#x8868;&#x793A;&#x4E3A; Ni(&#x3BC;i,&#x3A3;i)N_i(&#x3BC;_i, &#x3A3;_i)Ni&#x200B;(&#x3BC;i&#x200B;,&#x3A3;i&#x200B;) &#xFF0C;&#x5747;&#x503C; &#x3BC;i&#x3BC;_i&#x3BC;i&#x200B; &#x548C;&#x534F;&#x65B9;&#x5DEE;&#x77E9;&#x9635; &#x3A3;i&#x3A3;_i&#x3A3;i&#x200B; &#xFF0C;&#x5176;&#x6982;&#x7387;&#x5BC6;&#x5EA6;&#x51FD;&#x6570;&#x4E3A;fi(x&#x2223;&#x3BC;,&#x3A3;i)f_i(x|&#x3BC;_, &#x3A3;_i)fi&#x200B;(x&#x2223;&#x3BC;,&#x200B;&#x3A3;i&#x200B;)&#x3002; &#x5728;CCC&#x7C7B;&#x95EE;&#x9898;&#x4E2D;&#xFF0C;&#x6211;&#x4EEC;&#x6709;Ni(&#x3BC;i,&#x3A3;i)N_i(&#x3BC;_i, &#x3A3;_i)Ni&#x200B;(&#x3BC;i&#x200B;,&#x3A3;i&#x200B;)&#xFF0C;&#x5176;&#x4E2D;i=1,...,Ci = 1, ..., Ci=1,...,C&#x3002;&#x7ED9;&#x5B9A;&#x8FD9;&#x4E9B;&#x6B63;&#x6001;&#x5206;&#x5E03;&#x53CA;&#x5176;&#x7C7B;&#x522B;&#x5148;&#x9A8C;&#x6982;&#x7387; PiP_iPi&#x200B;&#xFF0C;&#x901A;&#x8FC7;&#x6BD4;&#x8F83;&#x6240;&#x6709;iii&#x7684;fi(x&#x2223;&#x3BC;,&#x3A3;i)f_i(x|&#x3BC;_, &#x3A3;_i)fi&#x200B;(x&#x2223;&#x3BC;,&#x200B;&#x3A3;i&#x200B;) PiP_iPi&#x200B;&#x7684;&#x5BF9;&#x6570;&#x4F3C;&#x7136;&#x6765;&#x7ED9;&#x51FA;&#x6D4B;&#x8BD5;&#x6837;&#x672C;xxx&#x7684;&#x5206;&#x7C7B;&#xFF0C;&#x5373;: arg&#x2009;min&#x2061;1&#x2264;i&#x2264;Cdi(x) \\argmin_{1&#x2264;i&#x2264;C} d_i(x) 1&#x2264;i&#x2264;Cargmin&#x200B;di&#x200B;(x) &#xFF0C;&#x5176;&#x4E2D;di(x)=(x&#x2212;&#x3BC;i)T&#x3A3;i&#x2212;1(x&#x2212;&#x3BC;i)+ln&#x2223;&#x3A3;i&#x2223;&#x2212;2lnPid_i(x) = (x-&#x3BC;_i)^T &#x3A3;^{-1}_i(x-&#x3BC;_i) + ln |&#x3A3;_i| -2lnP_idi&#x200B;(x)=(x&#x2212;&#x3BC;i&#x200B;)T&#x3A3;i&#x2212;1&#x200B;(x&#x2212;&#x3BC;i&#x200B;)+ln&#x2223;&#x3A3;i&#x200B;&#x2223;&#x2212;2lnPi&#x200B; &#x88AB;&#x79F0;&#x4E3A;&#x6BCF;&#x4E2A;&#x7C7B;&#x522B;&#x7684;&#x5224;&#x522B;&#x5206;&#x6570;&#x3002;&#x8FD9;&#x6837;&#x5B9A;&#x4E49;&#x7684;&#x5224;&#x522B;&#x5206;&#x6570;&#x53EF;&#x5F97;&#x51FA;&#x8D1D;&#x53F6;&#x65AF;&#x6700;&#x4F18;&#x89E3;&#x3002; &#x5224;&#x522B;&#x5206;&#x6570;&#x901A;&#x5E38;&#x751F;&#x6210;&#x7C7B;&#x4E4B;&#x95F4;&#x7684;&#x4E8C;&#x6B21;&#x5206;&#x7C7B;&#x8FB9;&#x754C;&#x3002;&#x4F46;&#x662F;&#xFF0C;&#x5BF9;&#x4E8E;&#x6240;&#x6709;&#x534F;&#x65B9;&#x5DEE;&#x77E9;&#x9635;&#x90FD;&#x76F8;&#x540C;&#x7684;&#x60C5;&#x51B5;&#xFF1A;&#x3A3;i=&#x3A3;i,&#x2200;i&#x3A3;_i=&#x3A3;_i, \\forall i&#x3A3;i&#x200B;=&#x3A3;i&#x200B;,&#x2200;i&#xFF0C;did_idi&#x200B; &#x7684;&#x4E8C;&#x6B21;&#x90E8;&#x5206;&#x4F1A;&#x62B5;&#x6D88;&#xFF0C;&#x4ECE;&#x800C;&#x4EA7;&#x751F;&#x7EBF;&#x6027;&#x5206;&#x7C7B;&#x5668;&#x3002;&#x8FD9;&#x4E9B;&#x5206;&#x7C7B;&#x5668;&#x79F0;&#x4E3A;&#x7EBF;&#x6027;&#x5224;&#x522B;&#x57FA;&#x3002;&#x56E0;&#x6B64;&#xFF0C;&#x6709;&#x4E86;&#x7EBF;&#x6027;&#x5224;&#x522B;&#x5206;&#x6790;&#x7684;&#x540D;&#x79F0;&#x3002;&#x6240;&#x6709;&#x534F;&#x65B9;&#x5DEE;&#x90FD;&#x76F8;&#x540C;&#x7684;&#x60C5;&#x51B5;&#x79F0;&#x4E3A;&#x5747;&#x65B9;&#x6B63;&#x6001;&#x5206;&#x5E03;&#x3002; &#x5047;&#x5B9A; C=2C = 2C=2&#xFF0C;&#x5E76;&#x4E14;&#x8FD9;&#x4E9B;&#x7C7B;&#x662F;&#x540C;&#x65B9;&#x5DEE;&#x6B63;&#x6001;&#x3002;&#x5C06;&#x6837;&#x672C;&#x7279;&#x5F81;&#x5411;&#x91CF;&#x6295;&#x5F71;&#x5230;&#x4E0E;&#x5224;&#x522B;&#x5206;&#x6570;&#x7ED9;&#x5B9A;&#x7684;&#x5206;&#x7C7B;&#x8D85;&#x5E73;&#x9762;&#x6B63;&#x4EA4;&#x7684;&#x4E00;&#x7EF4;&#x5B50;&#x7A7A;&#x95F4;&#x4E0A;&#xFF0C;&#x5728;p&#x7EF4;&#x7684;&#x539F;&#x59CB;&#x7A7A;&#x95F4;&#x4E2D;&#x548C;&#x5728;&#x4EC5;&#x4E00;&#x7EF4;&#x7684;&#x6B64;&#x5B50;&#x7A7A;&#x95F4;&#x4E2D;&#x88AB;&#x9519;&#x8BEF;&#x5206;&#x7C7B;&#x7684;&#x6837;&#x672C;&#x6570;&#x662F;&#x76F8;&#x540C;&#x7684;&#x3002;&#x8FD9;&#x5F88;&#x5BB9;&#x6613;&#x9A8C;&#x8BC1;&#x3002;&#x7531;&#x4E8E;&#x5206;&#x7C7B;&#x8FB9;&#x754C;&#x662F;&#x7EBF;&#x6027;&#x7684;&#xFF0C;&#x56E0;&#x6B64;&#x5728;&#x7A7A;&#x95F4;&#x4E00;&#x4FA7;&#x7684;&#x6240;&#x6709;&#x6837;&#x672C;&#x5C06;&#x4FDD;&#x7559;&#x5728;&#x4E00;&#x7EF4;&#x5B50;&#x7A7A;&#x95F4;&#x7684;&#x540C;&#x4E00;&#x4FA7;&#x3002;R.A.Fisher&#x9996;&#x5148;&#x6307;&#x51FA;&#x4E86;&#x8FD9;&#x4E00;&#x91CD;&#x8981;&#x70B9;&#x3002;&#x5E76;&#x5B9A;&#x4E49;LDA&#x7B97;&#x6CD5;&#x548C;Fisherfaces&#x3002; &#x8BA1;&#x7B97; Fisherfaces &#x4E0A;&#x9762;&#x7ED9;&#x51FA;&#x7684;&#x7406;&#x8BBA;&#x8BBA;&#x8BC1;&#x663E;&#x793A;&#x4E86;&#x5982;&#x4F55;&#x83B7;&#x5F97;2&#x7C7B;&#x540C;&#x65B9;&#x5DEE;&#x60C5;&#x51B5;&#x7684;&#x8D1D;&#x53F6;&#x65AF;&#x6700;&#x4F18;&#x89E3;&#x3002;&#x901A;&#x5E38;&#xFF0C;&#x5C06;&#x6709;&#x4E24;&#x4E2A;&#x4EE5;&#x4E0A;&#x7684;&#x7C7B;&#x522B;&#x3002;&#x5728;&#x8FD9;&#x79CD;&#x60C5;&#x51B5;&#x4E0B;&#xFF0C;&#x5C06;&#x4E0A;&#x8FF0;&#x95EE;&#x9898;&#x91CD;&#x65B0;&#x5B9A;&#x4E49;&#x4E3A;&#x6700;&#x5C0F;&#x5316;&#x7C7B;&#x5185;&#x5DEE;&#x5F02;&#x548C;&#x6700;&#x5927;&#x5316;&#x7C7B;&#x95F4;&#x8DDD;&#x79BB;&#x7684;&#x95EE;&#x9898;&#x3002; &#x5176;&#x4E2D;&#x7C7B;&#x5185;&#x5DEE;&#x5F02;&#x53EF;&#x4EE5;&#x4F7F;&#x7528;&#x7C7B;&#x5185;&#x6563;&#x5E03;&#x77E9;&#x9635;&#x6765;&#x4F30;&#x7B97;&#xFF0C;&#x7531;&#xFF1A; Sw=&#x2211;j=1C&#x2211;i=1nj(xij&#x2212;&#x3BC;j)(xij&#x2212;&#x3BC;j)T S_w = \\sum_{j=1}^C\\sum_{i=1}^{n_j}(x_{ij}-\\mu_j)(x_{ij}-\\mu_j)^T Sw&#x200B;=j=1&#x2211;C&#x200B;i=1&#x2211;nj&#x200B;&#x200B;(xij&#x200B;&#x2212;&#x3BC;j&#x200B;)(xij&#x200B;&#x2212;&#x3BC;j&#x200B;)T &#x5176;&#x4E2D;xijx_{ij}xij&#x200B;&#x662F;&#x7C7B;&#x522B;jjj&#x7684;&#x7B2C;iii&#x4E2A;&#x6837;&#x672C;&#xFF0C;&#x3BC;j&#x3BC;_j&#x3BC;j&#x200B;&#x662F;&#x7C7B;&#x522B;jjj&#x7684;&#x5747;&#x503C;&#xFF0C;njn_jnj&#x200B;&#x662F;&#x7C7B;&#x522B;jjj&#x7684;&#x6837;&#x672C;&#x6570;&#x3002; &#x540C;&#x6837;&#xFF0C;&#x7C7B;&#x95F4;&#x5DEE;&#x5F02;&#x4F7F;&#x7528;&#x7C7B;&#x95F4;&#x6563;&#x5E03;&#x77E9;&#x9635;&#x8BA1;&#x7B97;&#xFF1A; Sb=&#x2211;j=1C(&#x3BC;j&#x2212;&#x3BC;)(&#x3BC;j&#x2212;&#x3BC;)T S_b = \\sum_{j=1}^C(\\mu_j-\\mu)(\\mu_j-\\mu)^T Sb&#x200B;=j=1&#x2211;C&#x200B;(&#x3BC;j&#x200B;&#x2212;&#x3BC;)(&#x3BC;j&#x200B;&#x2212;&#x3BC;)T &#x5176;&#x4E2D;&#xFF0C;&#x3BC;&#x3BC;&#x3BC;&#x8868;&#x793A;&#x6240;&#x6709;&#x7C7B;&#x522B;&#x7684;&#x5E73;&#x5747;&#x503C;&#x3002; &#x73B0;&#x5728;&#x6211;&#x4EEC;&#x60F3;&#x8981;&#x627E;&#x5230;&#x90A3;&#x4E9B;&#x5C06;SwS_wSw&#x200B;&#x6700;&#x5C0F;&#x5316;&#xFF0C;&#x5E76;&#x5C06;SbS_bSb&#x200B;&#x6700;&#x5927;&#x5316;&#x7684;&#x57FA;&#x5411;&#x91CF;VVV&#xFF0C;&#x5176;&#x4E2D;VVV&#x662F;&#x4E00;&#x4E2A;&#x77E9;&#x9635;&#xFF0C;&#x5176;&#x5217;viv_ivi&#x200B;&#x662F;&#x5B9A;&#x4E49;&#x5B50;&#x7A7A;&#x95F4;&#x7684;&#x57FA;&#x5411;&#x91CF;&#xFF0C;&#x7531;&#x2223;VTSbV&#x2223;&#x2223;VTSwV&#x2223;\\frac {|V^TS_bV|} {|V^TS_wV|}&#x2223;VTSw&#x200B;V&#x2223;&#x2223;VTSb&#x200B;V&#x2223;&#x200B; &#x7ED9;&#x51FA;&#x3002; &#x8BE5;&#x95EE;&#x9898;&#x7684;&#x89E3;&#x51B3;&#x65B9;&#x6848;&#x662F;&#x901A;&#x8FC7;&#x5E7F;&#x4E49;&#x7279;&#x5F81;&#x503C;&#x5206;&#x89E3;&#x7ED9;&#x51FA;&#x7684;&#xFF1A;SbV=SwV&#x39B;S_bV = S_wV&#x39B;Sb&#x200B;V=Sw&#x200B;V&#x39B;&#xFF0C; &#x5176;&#x4E2D;VVV&#x662F;&#x7279;&#x5F81;&#x5411;&#x91CF;&#x7684;&#x77E9;&#x9635;&#xFF08;&#x5982;&#x4E0A;&#x6240;&#x8FF0;&#xFF09;&#xFF0C;&#x39B;&#x39B;&#x39B;&#x662F;&#x5BF9;&#x5E94;&#x7279;&#x5F81;&#x503C;&#x7684;&#x5BF9;&#x89D2;&#x77E9;&#x9635;&#x3002; &#x4E0E;&#x975E;&#x96F6;&#x7279;&#x5F81;&#x503C;&#x76F8;&#x5173;&#x7684;VVV&#x7684;&#x7279;&#x5F81;&#x5411;&#x91CF;&#x662F;Fisherfaces&#x3002;&#x6700;&#x591A;&#x6709;C&#x2212;1C-1C&#x2212;1&#x4E2A;Fisherfaces&#x3002;&#x4ECE;SbS_bSb&#x200B;&#x7684;&#x5B9A;&#x4E49;&#x53EF;&#x4EE5;&#x5F88;&#x5BB9;&#x6613;&#x5730;&#x770B;&#x51FA;&#x8FD9;&#x4E00;&#x70B9;&#x3002;&#x8BF7;&#x6CE8;&#x610F;&#xFF0C;&#x5728;&#x6211;&#x4EEC;&#x7684;&#x5B9A;&#x4E49;&#x4E2D;&#xFF0C;SbS_bSb&#x200B;&#x662F;CCC&#x4E2A;&#x7279;&#x5F81;&#x5411;&#x91CF;&#x7684;&#x7EC4;&#x5408;&#x3002;&#x4EFB;&#x4F55;CCC&#x5411;&#x91CF;&#x90FD;&#x5B9A;&#x4E49;C&#x2212;1C-1C&#x2212;1&#x6216;&#x66F4;&#x5C0F;&#x7684;&#x5B50;&#x7A7A;&#x95F4;&#x3002;&#x5F53;&#x8FD9;&#x4E9B;&#x5411;&#x91CF;&#x5F7C;&#x6B64;&#x7EBF;&#x6027;&#x72EC;&#x7ACB;&#x65F6;&#xFF0C;&#x7B49;&#x5F0F;&#x6210;&#x7ACB;&#x3002;&#x4E0B;&#x56FE;&#x663E;&#x793A;&#x4E86;&#x5BF9;&#x4E00;&#x7EC4;100&#x4E2A;&#x4E0D;&#x540C;&#x4E2A;&#x4F53;&#x7684;&#x6B63;&#x9762;&#x56FE;&#x50CF;&#x4F7F;&#x7528;&#x5B9A;&#x4E49;&#x7684;&#x7B97;&#x6CD5;&#x65F6;&#x83B7;&#x5F97;&#x7684;&#x524D;&#x56DB;&#x4E2A;Fisherfaces&#x3002; &#x6280;&#x672F;&#x6027;&#x95EE;&#x9898; &#x4E3A;&#x4E86;&#x83B7;&#x5F97;Fisherfaces&#xFF0C;&#x6211;&#x4EEC;&#x9700;&#x8981;&#x8BA1;&#x7B97;SwS_wSw&#x200B;&#x7684;&#x5012;&#x6570;&#xFF0C;&#x5373; Sw&#x2212;1S^{-1}_wSw&#x2212;1&#x200B; &#x3002;&#x5982;&#x679C;&#x6837;&#x672C;&#x7279;&#x5F81;&#x5411;&#x91CF;&#x5728;ppp&#x7EF4;&#x7A7A;&#x95F4;&#x4E2D;&#x5B9A;&#x4E49;&#x4E14; ppp &#x5927;&#x4E8E;&#x6837;&#x672C;&#x603B;&#x6570; nnn &#xFF0C;&#x5219; SwS_wSw&#x200B; &#x4E3A;&#x5947;&#x6570;&#x3002;&#x6709;&#x4E24;&#x79CD;&#x901A;&#x5E38;&#x4F7F;&#x7528;&#x7684;&#x89E3;&#x51B3;&#x65B9;&#x6848;&#x3002;&#x5728;&#x7B2C;&#x4E00;&#x4E2A;&#x89E3;&#x51B3;&#x65B9;&#x6848;&#x4E2D;&#xFF0C;&#x6211;&#x4EEC;&#x5C06;&#x6837;&#x672C;&#x5411;&#x91CF;&#xFF08;&#x6216;&#x7B49;&#x6548;&#x5730;&#xFF0C;&#x7C7B;&#x5185;&#x548C;&#x7C7B;&#x5185;&#x6563;&#x5E03;&#x77E9;&#x9635;&#xFF09;&#x6295;&#x5F71;&#x5230;rrr&#x7EF4;&#x7684;PCA&#x7A7A;&#x95F4;&#x4E0A;&#xFF0C;&#x5176;&#x4E2D; r&#x2264;rank(Sw)r &#x2264; rank(S_w)r&#x2264;rank(Sw&#x200B;) &#x5E76;&#x5728;&#x6B64;PCA&#x7A7A;&#x95F4;&#x4E2D;&#x8BA1;&#x7B97;Fisherfaces&#x3002;&#x7B2C;&#x4E8C;&#x79CD;&#x89E3;&#x51B3;&#x65B9;&#x6848;&#x662F;&#x5411;SwS_wSw&#x200B;&#x6DFB;&#x52A0;&#x4E00;&#x4E2A;&#x6B63;&#x5219;&#x9879;&#x3002;&#x5373; Sw+&#x3F5;IS_w + &#x3F5;ISw&#x200B;+&#x3F5;I &#xFF0C;&#x5176;&#x4E2D; III &#x662F;&#x5355;&#x4F4D;&#x77E9;&#x9635;&#xFF0C; &#x3F5;&#x3F5;&#x3F5; &#x662F;&#x4E00;&#x4E2A;&#x5C0F;&#x5E38;&#x6570;&#x3002; &#x4E5F;&#x53EF;&#x4EE5;&#x5C06;&#x7C7B;&#x95F4;&#x548C;&#x7C7B;&#x5185;&#x6563;&#x5E03;&#x77E9;&#x9635;&#x66FF;&#x4EE3;&#x505A;&#x7C7B;&#x4F3C;&#x5DE5;&#x4F5C;&#x7684;&#x5176;&#x4ED6;&#x5EA6;&#x91CF;&#x3002;&#x9996;&#x5148;&#xFF0C;&#x8FD9;&#x4E24;&#x4E2A;&#x77E9;&#x9635;&#x662F;&#x5BF9;&#x79F0;&#x7684;&#x5E76;&#x4E14;&#x662F;&#x6B63;&#x534A;&#x5B9A;&#x7684;&#x3002;&#x56E0;&#x6B64;&#xFF0C;&#x6BCF;&#x4E2A;&#x5B9A;&#x4E49;&#x4E00;&#x4E2A;&#x5EA6;&#x91CF;&#x3002;&#x8FD9;&#x610F;&#x5473;&#x7740;&#x6211;&#x4EEC;&#x53EF;&#x4EE5;&#x5C06;&#x8FD9;&#x4E9B;&#x77E9;&#x9635;&#x66FF;&#x6362;&#x4E3A;&#x5176;&#x4ED6;&#x77E9;&#x9635;&#xFF0C;&#x53EA;&#x8981;&#x5B83;&#x4EEC;&#x5B9A;&#x4E49;&#x7684;&#x76EE;&#x6807;&#x662F;&#x6700;&#x5C0F;&#x5316;&#x7C7B;&#x5185;&#x65B9;&#x5DEE;&#x548C;&#x6700;&#x5927;&#x5316;&#x7C7B;&#x95F4;&#x8DDD;&#x79BB;&#x5373;&#x53EF;&#x3002;&#x4F8B;&#x5982;&#xFF0C;&#x6211;&#x4EEC;&#x53EF;&#x4EE5;&#x5C06;&#x7C7B;&#x5185;&#x6563;&#x5E03;&#x77E9;&#x9635;&#x66FF;&#x6362;&#x4E3A;&#x6837;&#x672C;&#x534F;&#x65B9;&#x5DEE;&#x77E9;&#x9635;&#x3002; &#x5230;&#x76EE;&#x524D;&#x4E3A;&#x6B62;&#xFF0C;&#x901A;&#x8FC7;&#x4E0A;&#x8FF0;&#x65B9;&#x6CD5;&#x83B7;&#x5F97;&#x7684;Fisherfaces&#x57FA;&#x4E8E;&#x4E0A;&#x8FF0;&#x7EBF;&#x6027;&#x5047;&#x8BBE;&#x3002;&#x5F53;&#x7C7B;&#x670D;&#x4ECE;&#x540C;&#x65B9;&#x5DEE;&#x6B63;&#x6001;&#x65F6;&#xFF0C;&#x8BE5;&#x5047;&#x8BBE;&#x6210;&#x7ACB;&#x3002;&#x4F46;&#x901A;&#x5E38;&#x60C5;&#x51B5;&#x4E0B;&#x8BE5;&#x5047;&#x8BBE;&#x4E0D;&#x6210;&#x7ACB;&#x3002;&#x8981;&#x89E3;&#x51B3;&#x6B64;&#x95EE;&#x9898;&#xFF0C;&#x53EF;&#x4EE5;&#x5728;&#x65B9;&#x7A0B;&#x5F0F;&#x4E2D;&#x6DFB;&#x52A0;&#x53E6;&#x4E00;&#x4E2A;&#x5EA6;&#x91CF;&#x3002;&#x8FD9;&#x9879;&#x65B0;&#x6307;&#x6807;&#x7684;&#x76EE;&#x6807;&#x662F;&#x5C06;&#x539F;&#x59CB;&#x7684;&#x5F02;&#x65B9;&#x5DEE;&#x95EE;&#x9898;&#xFF08;&#x5373;&#x5177;&#x6709;&#x4E0D;&#x540C;&#x534F;&#x65B9;&#x5DEE;&#x7684;&#x95EE;&#x9898;&#xFF09;&#x6620;&#x5C04;&#x4E3A;&#x540C;&#x65B9;&#x5DEE;&#x95EE;&#x9898;&#x3002; &#x501F;&#x52A9; Representer&apos;s Theorem&#xFF0C;&#x8BE5;&#x6620;&#x5C04;&#x51FD;&#x6570;&#x53EF;&#x4EE5;&#x8F6C;&#x6362;&#x4E3A;&#x5185;&#x6838;&#x6620;&#x5C04;&#x3002;&#x5E76;&#x4E14;&#xFF0C;&#x5EA6;&#x91CF;&#x7531;Gram&#xFF08;&#x6216;&#x5185;&#x6838;&#xFF09;&#x77E9;&#x9635;&#x7ED9;&#x51FA;&#x3002;&#x56E0;&#x6B64;&#xFF0C;&#x8FD9;&#x79CD;&#x66FF;&#x4EE3;&#x65B9;&#x6CD5;&#x79F0;&#x4E3A;&#x5185;&#x6838;LDA&#xFF08;&#x6216;&#x7B80;&#x79F0;&#x4E3A;KLDA&#xFF09;&#x3002;&#x51E0;&#x4F4D;&#x4F5C;&#x8005;&#x8FD8;&#x5B9A;&#x4E49;&#x4E86;&#x7C7B;&#x5185;&#x548C;&#x7C7B;&#x95F4;&#x5DEE;&#x5F02;&#x7684;&#x5F02;&#x65B9;&#x5DEE;&#x5EA6;&#x91CF;&#x3002;&#x4F46;&#x662F;&#xFF0C;&#x51CF;&#x5C11;&#x6B63;&#x6001;&#x5047;&#x8BBE;&#x7684;&#x53E6;&#x4E00;&#x79CD;&#x65B9;&#x6CD5;&#x662F;&#x5C06;&#x6BCF;&#x4E2A;&#x7C7B;&#x522B;&#x4E2D;&#x7684;&#x6837;&#x672C;&#x8868;&#x793A;&#x4E3A;&#x6B63;&#x6001;&#x5206;&#x5E03;&#x7684;&#x6DF7;&#x5408;&#x3002;&#x5728;&#x8FD9;&#x79CD;&#x65B9;&#x6CD5;&#x4E2D;&#xFF0C;&#x8BC0;&#x7A8D;&#x662F;&#x5982;&#x4F55;&#x786E;&#x5B9A;&#x6BCF;&#x4E2A;&#x7C7B;&#x522B;&#x7684;&#x6DF7;&#x5408;&#x7269;&#x6570;&#x91CF;&#x3002;&#x5B50;&#x7C7B;&#x5224;&#x522B;&#x5206;&#x6790;&#xFF08;SDA&#xFF09;&#x7B97;&#x6CD5;&#x53CA;&#x5176;&#x5185;&#x6838;&#x6269;&#x5C55;KSDA&#x63D0;&#x4F9B;&#x4E86;&#x4E00;&#x79CD;&#x6D41;&#x884C;&#x7684;&#x89E3;&#x51B3;&#x65B9;&#x6848;&#x3002;&#x5F53;&#x8BAD;&#x7EC3;&#x6837;&#x672C;&#x7684;&#x6570;&#x91CF;&#x8DB3;&#x591F;&#x5927;&#x4EE5;&#x5229;&#x4E8E;&#x5B66;&#x4E60;&#x975E;&#x7EBF;&#x6027;&#x6620;&#x5C04;&#x65F6;&#xFF0C;&#x901A;&#x5E38;&#x9996;&#x9009;&#x5185;&#x6838;&#x65B9;&#x6CD5;&#x3002; &#x603B;&#x7ED3; Eigenfaces &#x627E;&#x5230;&#x5747;&#x503C;&#x5411;&#x91CF;&#x3A8;D&#xD7;1&#x3A8;_{D&#xD7;1}&#x3A8;D&#xD7;1&#x200B;; &#x6BCF;&#x4E2A;&#x5411;&#x91CF;&#x901A;&#x8FC7;&#x51CF;&#x53BB;&#x3A8;D&#xD7;1&#x3A8;_{D&#xD7;1}&#x3A8;D&#xD7;1&#x200B;&#x5F97;&#x5230;&#x3A6;i&#x3A6;_i&#x3A6;i&#x200B;; &#x8BA1;&#x7B97;&#x3A6;i&#x3A6;_i&#x3A6;i&#x200B;&#x7684;&#x534F;&#x65B9;&#x5DEE;&#x77E9;&#x9635;$C_{D&#xD7;D}; &#x8BA1;&#x7B97;CCC&#x7684;&#x7279;&#x5F81;&#x5411;&#x91CF;&#x96C6;VD&#xD7;rV_{D&#xD7;r}VD&#xD7;r&#x200B;; &#x4FDD;&#x7559;MMM&#x4E2A;&#x6700;&#x5927;&#x7279;&#x5F81;&#x503C;, &#x77E9;&#x9635;UD&#xD7;MU_{D&#xD7;M}UD&#xD7;M&#x200B; UT&#x3A6;iU^T&#x3A6;_iUT&#x3A6;i&#x200B;&#x662F;&#x7B2C;iii&#x4E2A;&#x4EBA;&#x8138;&#x7684;&#x7279;&#x5F81;&#x8138;&#xFF08;M&#xD7;1M&#xD7;1M&#xD7;1&#xFF09; Fisherfaces &#x6570;&#x636E;&#x5E93;&#x4E2D;&#x4EBA;&#x8138;&#x4E4B;&#x95F4;&#x7684;&#x5DEE;&#x5F02;&#x53EF;&#x80FD;&#x6765;&#x81EA;&#x8BF8;&#x5982;&#x7167;&#x660E;&#xFF0C;&#x9762;&#x90E8;&#x8868;&#x60C5;&#x548C;&#x59FF;&#x52BF;&#x53D8;&#x5316;&#x4E4B;&#x7C7B;&#x7684;&#x5931;&#x771F;&#x3002;&#x6709;&#x65F6;&#xFF0C;&#x8FD9;&#x4E9B;&#x53D8;&#x5316;&#x5927;&#x4E8E;&#x6807;&#x51C6;&#x9762;&#x5B54;&#x4E4B;&#x95F4;&#x7684;&#x53D8;&#x5316;&#xFF1B; &#x5728;&#x53D8;&#x5316;&#x7684;&#x5149;&#x7167;&#x4F46;&#x56FA;&#x5B9A;&#x7684;&#x59FF;&#x52BF;&#x4E0B;&#xFF0C;&#x7279;&#x5B9A;&#x9762;&#x90E8;&#x7684;&#x56FE;&#x50CF;&#x4F4D;&#x4E8E;&#x9AD8;&#x7EF4;&#x56FE;&#x50CF;&#x7A7A;&#x95F4;&#x7684;3D&#x7EBF;&#x6027;&#x5B50;&#x7A7A;&#x95F4;&#x4E2D;&#xFF08;&#x65E0;&#x9634;&#x5F71;&#xFF09;&#xFF1B; &#x8BD5;&#x56FE;&#x6700;&#x5927;&#x7A0B;&#x5EA6;&#x5730;&#x51CF;&#x5C11;&#x7C7B;&#x5185;&#x5DEE;&#x5F02;&#xFF0C;&#x4F46;&#x4FDD;&#x7559;&#x7C7B;&#x95F4;&#x5DEE;&#x5F02;&#xFF1B; &#x5C06;&#x56FE;&#x50CF;&#x7EBF;&#x6027;&#x6295;&#x5F71;&#x5230;&#x5B50;&#x7A7A;&#x95F4;&#x4E2D;&#xFF0C;&#x8BE5;&#x65B9;&#x5F0F;&#x53EF;&#x4EE5;&#x6298;&#x8877;&#x90A3;&#x4E9B;&#x5177;&#x6709;&#x8F83;&#x5927;&#x504F;&#x5DEE;&#x7684;&#x9762;&#x90E8;&#x533A;&#x57DF;&#x3002; Reference &#x4EBA;&#x8138;&#x8BC6;&#x522B;&#x7CFB;&#x7EDF; &quot;Pattern Recognition 2 KNN, PCA, LDA&quot; [Dr. Terence Sim] School of Computing National University of Singapore Scholarpedia: Eigenfaces Eigenfaces and Fisherfaces Presenter: Harry Chao aMMAI 2010 &quot;Fisher Linear Discriminant&quot; [Dr. Terence Sim] School of Computing National University of Singapore Eigenfaces vs. Fisherfaces: RecognitionUsing Class Specific Linear Projection Scholarpedia: Fisherfaces","categories":[{"name":"Technology","slug":"Technology","permalink":"https://littlemeemoon.cn/categories/Technology/"},{"name":"Facial Recognition","slug":"Technology/Facial-Recognition","permalink":"https://littlemeemoon.cn/categories/Technology/Facial-Recognition/"}],"tags":[{"name":"LDA","slug":"LDA","permalink":"https://littlemeemoon.cn/tags/LDA/"},{"name":"Computer vision","slug":"Computer-vision","permalink":"https://littlemeemoon.cn/tags/Computer-vision/"},{"name":"Algorithm Principle","slug":"Algorithm-Principle","permalink":"https://littlemeemoon.cn/tags/Algorithm-Principle/"},{"name":"Facial Recognition","slug":"Facial-Recognition","permalink":"https://littlemeemoon.cn/tags/Facial-Recognition/"},{"name":"Fisherfaces","slug":"Fisherfaces","permalink":"https://littlemeemoon.cn/tags/Fisherfaces/"},{"name":"Eigenfaces","slug":"Eigenfaces","permalink":"https://littlemeemoon.cn/tags/Eigenfaces/"},{"name":"PCA","slug":"PCA","permalink":"https://littlemeemoon.cn/tags/PCA/"}],"keywords":[{"name":"Technology","slug":"Technology","permalink":"https://littlemeemoon.cn/categories/Technology/"},{"name":"Facial Recognition","slug":"Technology/Facial-Recognition","permalink":"https://littlemeemoon.cn/categories/Technology/Facial-Recognition/"}]},{"title":"Leetcode Note in May 2020 | part 3 | day 21-31 | (三) | Edit Distance","slug":"Technology/Coding/Leetcode/Leetcode-Note-in-May-2020-part-3-day-21-31-Edit-Distance","date":"2020-06-01T06:16:16.000Z","updated":"2020-06-04T04:19:01.759Z","comments":true,"path":"2020/06/01/Technology/Coding/Leetcode/Leetcode-Note-in-May-2020-part-3-day-21-31-Edit-Distance/","link":"","permalink":"https://littlemeemoon.cn/2020/06/01/Technology/Coding/Leetcode/Leetcode-Note-in-May-2020-part-3-day-21-31-Edit-Distance/","excerpt":"","text":"&#x5199;&#x5728;&#x524D;&#x9762;&#x7684;&#x8BDD; &#x8FD9;&#x9053;&#x9898;&#x662F;&#x4E94;&#x6708;Leetcode&#x6BCF;&#x65E5;&#x6311;&#x6218;&#x7684;&#x6700;&#x540E;&#x4E00;&#x9898;&#xFF0C;&#x8FD8;&#x662F;&#x6709;&#x70B9;&#x96BE;&#x5EA6;&#x7684;&#xFF0C;&#x8FD9;&#x91CC;&#x5355;&#x72EC;&#x628A;&#x5B83;&#x62FF;&#x51FA;&#x6765;&#x8BB0;&#x5F55;&#xFF0C;&#x662F;&#x4E3A;&#x4E86;&#x4EE5;&#x540E;&#x66F4;&#x65B9;&#x4FBF;&#x7684;&#x68C0;&#x7D22;&#x548C;&#x5B66;&#x4E60;&#x3002; &#x5BF9;&#x4E86;&#xFF0C;&#x795D;&#x5404;&#x4F4D;&#x5C0F;&#x670B;&#x53CB;&#x5927;&#x670B;&#x53CB;&#x8282;&#x65E5;&#x5FEB;&#x4E50;~ &#x1F603; Edit Distance Given two words word1 and word2, find the minimum number of operations required to convert word1 to word2. You have the following 3 operations permitted on a word: - Insert a character - Delete a character - Replace a character Example 1: Input: word1 = &quot;horse&quot;, word2 = &quot;ros&quot; Output: 3 Explanation: horse -&gt; rorse (replace &apos;h&apos; with &apos;r&apos;) rorse -&gt; rose (remove &apos;r&apos;) rose -&gt; ros (remove &apos;e&apos;) Example 2: Input: word1 = &quot;intention&quot;, word2 = &quot;execution&quot; Output: 5 Explanation: intention -&gt; inention (remove &apos;t&apos;) inention -&gt; enention (replace &apos;i&apos; with &apos;e&apos;) enention -&gt; exention (replace &apos;n&apos; with &apos;x&apos;) exention -&gt; exection (replace &apos;n&apos; with &apos;c&apos;) exection -&gt; execution (insert &apos;u&apos;) wiki &#x5728;&#x8BA1;&#x7B97;&#x8BED;&#x8A00;&#x5B66;&#x548C;&#x8BA1;&#x7B97;&#x673A;&#x79D1;&#x5B66;&#x4E2D;&#xFF0C;&#x7F16;&#x8F91;&#x8DDD;&#x79BB;&#x662F;&#x4E00;&#x79CD;&#x901A;&#x8FC7;&#x8BA1;&#x7B97;&#x5C06;&#x4E00;&#x4E2A;&#x5B57;&#x7B26;&#x4E32;&#x8F6C;&#x6362;&#x4E3A;&#x53E6;&#x4E00;&#x4E2A;&#x5B57;&#x7B26;&#x4E32;&#x6240;&#x9700;&#x7684;&#x6700;&#x5C0F;&#x64CD;&#x4F5C;&#x6570;&#x6765;&#x91CF;&#x5316;&#x4E24;&#x4E2A;&#x5B57;&#x7B26;&#x4E32;&#xFF08;&#x4F8B;&#x5982;&#x5355;&#x8BCD;&#xFF09;&#x5F7C;&#x6B64;&#x4E4B;&#x95F4;&#x6709;&#x591A;&#x4E48;&#x4E0D;&#x540C;&#x7684;&#x65B9;&#x5F0F;&#x3002;&#x7F16;&#x8F91;&#x8DDD;&#x79BB;&#x53EF;&#x4EE5;&#x5728;&#x81EA;&#x7136;&#x8BED;&#x8A00;&#x5904;&#x7406;&#x4E2D;&#x627E;&#x5230;&#x5E94;&#x7528;&#x7A0B;&#x5E8F;&#xFF0C;&#x5176;&#x4E2D;&#x81EA;&#x52A8;&#x62FC;&#x5199;&#x6821;&#x6B63;&#x53EF;&#x4EE5;&#x901A;&#x8FC7;&#x4ECE;&#x5B57;&#x5178;&#x4E2D;&#x9009;&#x62E9;&#x4E0E;&#x6240;&#x8BA8;&#x8BBA;&#x5355;&#x8BCD;&#x7684;&#x8DDD;&#x79BB;&#x8F83;&#x5C0F;&#x7684;&#x5355;&#x8BCD;&#x6765;&#x786E;&#x5B9A;&#x62FC;&#x5199;&#x9519;&#x8BEF;&#x7684;&#x5355;&#x8BCD;&#x7684;&#x5019;&#x9009;&#x8005;&#x66F4;&#x6B63;&#x3002;&#x5728;&#x751F;&#x7269;&#x4FE1;&#x606F;&#x5B66;&#x4E2D;&#xFF0C;&#x5B83;&#x53EF;&#x4EE5;&#x7528;&#x4E8E;&#x91CF;&#x5316;DNA&#x5E8F;&#x5217;&#x7684;&#x76F8;&#x4F3C;&#x6027;&#xFF0C;&#x53EF;&#x4EE5;&#x5C06;&#x5176;&#x89C6;&#x4E3A;&#x5B57;&#x6BCD;A&#xFF0C;C&#xFF0C;G&#x548C;T&#x7684;&#x5B57;&#x7B26;&#x4E32;&#x3002;&#x7F16;&#x8F91;&#x8DDD;&#x79BB;&#x7684;&#x4E0D;&#x540C;&#x5B9A;&#x4E49;&#x4F7F;&#x7528;&#x4E0D;&#x540C;&#x7684;&#x5B57;&#x7B26;&#x4E32;&#x64CD;&#x4F5C;&#x96C6;&#x3002;Levenshtein&#x8DDD;&#x79BB;&#x64CD;&#x4F5C;&#x662F;&#x5B57;&#x7B26;&#x4E32;&#x4E2D;&#x5B57;&#x7B26;&#x7684;&#x5220;&#x9664;&#xFF0C;&#x63D2;&#x5165;&#x6216;&#x66FF;&#x6362;&#x3002;&#x4F5C;&#x4E3A;&#x6700;&#x5E38;&#x7528;&#x7684;&#x5EA6;&#x91CF;&#x6807;&#x51C6;&#xFF0C;&#x672F;&#x8BED;Levenshtein&#x8DDD;&#x79BB;&#x7ECF;&#x5E38;&#x4E0E;&#x7F16;&#x8F91;&#x8DDD;&#x79BB;&#x4E92;&#x6362;&#x4F7F;&#x7528;&#x3002; Types of edit distance &#x4E0D;&#x540C;&#x7C7B;&#x578B;&#x7684;&#x7F16;&#x8F91;&#x8DDD;&#x79BB;&#x5141;&#x8BB8;&#x4E0D;&#x540C;&#x7684;&#x5B57;&#x7B26;&#x4E32;&#x64CD;&#x4F5C;&#x96C6;&#x3002;&#x4F8B;&#x5982;&#xFF1A; Levenshtein&#x8DDD;&#x79BB;&#x5141;&#x8BB8;&#x5220;&#x9664;&#xFF0C;&#x63D2;&#x5165;&#x548C;&#x66FF;&#x6362;; &#x6700;&#x957F;&#x516C;&#x5171;&#x5B50;&#x5E8F;&#x5217;&#xFF08;LCS&#xFF09;&#x8DDD;&#x79BB;&#x4EC5;&#x5141;&#x8BB8;&#x63D2;&#x5165;&#x548C;&#x5220;&#x9664;&#xFF0C;&#x800C;&#x4E0D;&#x5141;&#x8BB8;&#x66FF;&#x6362;; &#x6C49;&#x660E;&#x8DDD;&#x79BB;&#x4EC5;&#x5141;&#x8BB8;&#x66FF;&#x6362;&#xFF0C;&#x56E0;&#x6B64;&#xFF0C;&#x5B83;&#x4EC5;&#x9002;&#x7528;&#x4E8E;&#x76F8;&#x540C;&#x957F;&#x5EA6;&#x7684;&#x5B57;&#x7B26;&#x4E32;; Damerau&#x2013;Levenshtein&#x8DDD;&#x79BB;&#x5141;&#x8BB8;&#x4E24;&#x4E2A;&#x76F8;&#x90BB;&#x5B57;&#x7B26;&#x7684;&#x63D2;&#x5165;&#xFF0C;&#x5220;&#x9664;&#xFF0C;&#x66FF;&#x6362;&#x548C;&#x79FB;&#x4F4D;; Jaro&#x8DDD;&#x79BB;&#x4EC5;&#x5141;&#x8BB8;&#x6362;&#x4F4D;&#x3002; Definition &#x7ED9;&#x5B9A;&#x5B57;&#x6BCD;&#x3A3;&#x4E0A;&#x7684;&#x4E24;&#x4E2A;&#x5B57;&#x7B26;&#x4E32;a&#x548C;b&#xFF08;&#x4F8B;&#x5982;ASCII&#x5B57;&#x7B26;&#x96C6;&#xFF0C;&#x5B57;&#x8282;&#x96C6;[0..255]&#x7B49;&#xFF09;&#xFF0C;&#x7F16;&#x8F91;&#x8DDD;&#x79BB;d(a, b)&#x662F;&#x6700;&#x5C0F;&#x6743;&#x91CD;&#x7684;&#x7F16;&#x8F91;&#x5E8F;&#x5217;&#x5C06;a&#x8F6C;&#x6362;&#x4E3A;b&#x7684;&#x8FD0;&#x7B97;&#x3002;Levenshtein&#x5728;1966&#x5E74;&#x5B9A;&#x4E49;&#x7684;&#x6700;&#x7B80;&#x5355;&#x7684;&#x4E00;&#x7EC4;&#x7F16;&#x8F91;&#x64CD;&#x4F5C;&#x4E4B;&#x4E00;&#x662F;&#xFF1A; &#x63D2;&#x5165;&#x5355;&#x4E2A;&#x7B26;&#x53F7;&#x3002;&#x5982;&#x679C;a = uv&#xFF0C;&#x5219;&#x63D2;&#x5165;&#x7B26;&#x53F7;x&#x4F1A;&#x751F;&#x6210;uxv&#x3002;&#x8FD9;&#x4E5F;&#x53EF;&#x4EE5;&#x8868;&#x793A;&#x4E3A;&#x3B5;&#x2192;x&#xFF0C;&#x4F7F;&#x7528;&#x3B5;&#x8868;&#x793A;&#x7A7A;&#x5B57;&#x7B26;&#x4E32;; &#x5220;&#x9664;&#x5355;&#x4E2A;&#x7B26;&#x53F7;&#xFF0C;&#x4F1A;&#x5C06;uxv&#x66F4;&#x6539;&#x4E3A;uv(x&#x2192;&#x3B5;); &#x7528;&#x5355;&#x4E2A;&#x7B26;&#x53F7;x&#x66FF;&#x6362;&#x7B26;&#x53F7;y&#x2260;x&#x5C06;uxv&#x66F4;&#x6539;&#x4E3A;uyv(x&#x2192;y)&#x3002; Example &quot;kitten&quot;&#x548C;&quot;sitting&quot;&#x4E4B;&#x95F4;&#x7684;Levenshtein&#x8DDD;&#x79BB;&#x4E3A;3&#x3002;&#x5C06;&#x524D;&#x8005;&#x8F6C;&#x6362;&#x4E3A;&#x540E;&#x8005;&#x7684;&#x6700;&#x5C0F;&#x7F16;&#x8F91;&#x811A;&#x672C;&#x4E3A;&#xFF1A; kitten &#x2192; sitten (substitute &quot;s&quot; for &quot;k&quot;) sitten &#x2192; sittin (substitute &quot;i&quot; for &quot;e&quot;) sittin &#x2192; sitting (insert &quot;g&quot; at the end) LCS&#x8DDD;&#x79BB;&#xFF08;&#x4EC5;&#x63D2;&#x5165;&#x548C;&#x5220;&#x9664;&#xFF09;&#x63D0;&#x4F9B;&#x4E86;&#x4E0D;&#x540C;&#x7684;&#x8DDD;&#x79BB;&#x548C;&#x6700;&#x5C0F;&#x7684;&#x7F16;&#x8F91;&#x811A;&#x672C;&#xFF1A; kitten &#x2192; itten (delete &quot;k&quot; at 0) itten &#x2192; sitten (insert &quot;s&quot; at 0) sitten &#x2192; sittn (delete &quot;e&quot; at 4) sittn &#x2192; sittin (insert &quot;i&quot; at 4) sittin &#x2192; sitting (insert &quot;g&quot; at 6) &#x603B;&#x6210;&#x672C;/&#x8DDD;&#x79BB;&#x4E3A;5&#x6B21;&#x64CD;&#x4F5C;&#x3002; More... Solution &#x8FD9;&#x9053;&#x9898;&#x7684;&#x9898;&#x610F;&#x5F88;&#x6E05;&#x695A;&#xFF1A;&#x6C42;&#x4ECE;&#x5355;&#x8BCD;word1&#x8F6C;&#x4E3A;&#x5355;&#x8BCD;word2&#x6240;&#x9700;&#x8981;&#x7684;&#x6700;&#x5C11;&#x53D8;&#x6362;&#x6B21;&#x6570;&#x3002;&#x6211;&#x770B;&#x5230;&#x8FD9;&#x9053;&#x9898;&#x4E5F;&#x6709;&#x5F88;&#x591A;&#x601D;&#x7EEA;&#xFF0C;&#x4F46;&#x662F;&#x6700;&#x540E;&#x6211;&#x8FD8;&#x662F;&#x6CA1;&#x80FD;&#x505A;&#x51FA;&#x6765;&#xFF08;&#x601D;&#x7EEA;&#x592A;&#x4E71;&#x4E86;&#xFF0C;&#x6700;&#x540E;&#x4E5F;&#x6CA1;&#x7406;&#x6E05;&#x695A;&#x3002;&#x3002;&#x540E;&#x9762;&#x6211;&#x53BB;&#x8BA8;&#x8BBA;&#x533A;&#x770B;&#x4E86;&#x5927;&#x5BB6;&#x7684;&#x8BA8;&#x8BBA;&#xFF0C;&#x8FD9;&#x9898;&#x7684;&#x6700;&#x4F73;&#x89E3;&#x51B3;&#x65B9;&#x6848;&#x8FD8;&#x662F;&#x52A8;&#x6001;&#x89C4;&#x5212;&#xFF08;&#x6211;&#x867D;&#x7136;&#x601D;&#x7EEA;&#x4E07;&#x5343;&#xFF0C;&#x4F46;&#x662F;&#x6CA1;&#x5F80;&#x52A8;&#x6001;&#x89C4;&#x5212;&#x60F3;(&#x2299;o&#x2299;)&#x2026;&#x3002;&#x7136;&#x540E;&#x6211;&#x770B;&#x5230;&#x4E00;&#x4E2A;&#x70B9;&#x8D5E;&#x6BD4;&#x8F83;&#x591A;&#x7684;&#x8BA8;&#x8BBA;&#xFF08;[@anderson5&apos;s discussion](https://leetcode.com/problems/edit-distance/discuss/159295/Python-solutions-and-intuition)&#xFF09;&#xFF0C;&#x6211;&#x89C9;&#x5F97;&#x5199;&#x5F97;&#x633A;&#x597D;&#xFF0C;&#x8FD9;&#x91CC;&#x5F15;&#x7528;&#x4E00;&#x4E0B;&#x4ED6;&#x7684;&#x89E3;&#x9898;&#x601D;&#x8DEF;&#x3002;&#x56E0;&#x4E3A;&#x6211;&#x89C9;&#x5F97;&#x4ED6;&#x7684;&#x89E3;&#x9898;&#x601D;&#x8DEF;&#x4E0D;&#x4EC5;&#x4EC5;&#x662F;&#x9488;&#x5BF9;&#x8FD9;&#x9053;&#x9898;&#xFF0C;&#x4EE5;&#x540E;&#x8BBE;&#x8BA1;&#x5230;&#x540C;&#x7C7B;&#x578B;&#x7684;&#x9898;&#x90FD;&#x4F1A;&#x6709;&#x542F;&#x53D1;&#xFF0C;&#x6240;&#x4EE5;&#x8FD9;&#x91CC;&#x9A6C;&#x4E00;&#x4E0B;&#xFF1A; anderson5&#x2019;s thought &#x5BF9;&#x4E8E;&#x90A3;&#x4E9B;&#x96BE;&#x4EE5;&#x7834;&#x89E3;&#x52A8;&#x6001;&#x7F16;&#x7A0B;&#x89E3;&#x51B3;&#x65B9;&#x6848;&#x7684;&#x4EBA;&#xFF0C;&#x6211;&#x53D1;&#x73B0;&#x6700;&#x7B80;&#x5355;&#x7684;&#x89E3;&#x51B3;&#x65B9;&#x6CD5;&#x662F;&#x9996;&#x5148;&#x4ECE;&#x4E00;&#x4E2A;&#x6734;&#x7D20;&#x4F46;&#x53EF;&#x884C;&#x7684;&#x9012;&#x5F52;&#x5B9E;&#x73B0;&#x5F00;&#x59CB;&#x3002;&#x8FD9;&#x6837;&#x505A;&#x662F;&#x5FC5;&#x4E0D;&#x53EF;&#x5C11;&#x7684;&#xFF0C;&#x56E0;&#x4E3A;&#x52A8;&#x6001;&#x7F16;&#x7A0B;&#x57FA;&#x672C;&#x4E0A;&#x662F;&#x4F7F;&#x7528;&#x7F13;&#x5B58;&#x8FDB;&#x884C;&#x9012;&#x5F52;&#x7684;&#x3002;&#x901A;&#x8FC7;&#x8FD9;&#x6837;&#x7684;&#x8FC7;&#x7A0B;&#xFF0C;&#x5BF9;&#x6211;&#x4EEC;&#x666E;&#x901A;&#x4EBA;&#x6765;&#x8BF4;&#xFF0C;&#x89E3;&#x7B54;&#x52A8;&#x6001;&#x7F16;&#x7A0B;&#x95EE;&#x9898;&#x5C06;&#x53D8;&#x5F97;&#x66F4;&#x52A0;&#x5BB9;&#x6613;&#x3002;:) &#x601D;&#x8003;&#x8FC7;&#x7A0B; &#x5728;&#x7ED9;&#x5B9A;&#x4E24;&#x4E2A;&#x5B57;&#x7B26;&#x4E32;&#x7684;&#x60C5;&#x51B5;&#x4E0B;&#xFF0C;&#x6211;&#x4EEC;&#x7684;&#x4EFB;&#x52A1;&#x662F;&#x627E;&#x5230;&#x4E3A;&#x83B7;&#x5F97;&#x7B49;&#x6548;&#x5B57;&#x7B26;&#x4E32;&#x800C;&#x9700;&#x8981;&#x8FDB;&#x884C;&#x7684;&#x6700;&#x5C11;&#x8F6C;&#x6362;&#x6570;&#x91CF;&#x3002;&#x4ECE;&#x4E00;&#x5F00;&#x59CB;&#xFF0C;&#x4F3C;&#x4E4E;&#x6CA1;&#x6709;&#x529E;&#x6CD5;&#x89E3;&#x51B3;&#x6240;&#x6709;&#x53EF;&#x80FD;&#x7684;&#x95EE;&#x9898;&#xFF0C;&#x5728;&#x8FD9;&#x79CD;&#x60C5;&#x51B5;&#x4E0B;&#xFF0C;&#x53EF;&#x80FD;&#x6027;&#x662F;&#x6307;&#x63D2;&#x5165;&#xFF0C;&#x5220;&#x9664;&#x6216;&#x66FF;&#x6362;&#x5B57;&#x7B26;&#x3002;&#x9012;&#x5F52;&#x901A;&#x5E38;&#x662F;&#x5C1D;&#x8BD5;&#x6240;&#x6709;&#x53EF;&#x80FD;&#x6027;&#x7684;&#x4E0D;&#x9519;&#x9009;&#x62E9;&#x3002; &#x6BCF;&#x5F53;&#x6211;&#x4EEC;&#x7F16;&#x5199;&#x9012;&#x5F52;&#x51FD;&#x6570;&#x65F6;&#xFF0C;&#x6211;&#x4EEC;&#x90FD;&#x9700;&#x8981;&#x67D0;&#x79CD;&#x65B9;&#x6CD5;&#x6765;&#x7EC8;&#x6B62;&#xFF0C;&#x5426;&#x5219;&#x6211;&#x4EEC;&#x5C06;&#x901A;&#x8FC7;&#x65E0;&#x9650;&#x9012;&#x5F52;&#x6700;&#x7EC8;&#x5BFC;&#x81F4;&#x5806;&#x6808;&#x6EA2;&#x51FA;&#x3002;&#x5BF9;&#x4E8E;&#x5B57;&#x7B26;&#x4E32;&#xFF0C;&#x8981;&#x8DDF;&#x8E2A;&#x7684;&#x662F;&#x7D22;&#x5F15;&#x3002;&#x6211;&#x4EEC;&#x9700;&#x8981;&#x4E24;&#x4E2A;&#x7D22;&#x5F15;&#xFF0C;&#x4E00;&#x4E2A;&#x7528;&#x4E8E;word1&#xFF0C;&#x4E00;&#x4E2A;&#x7528;&#x4E8E;word2&#x3002;&#x73B0;&#x5728;&#xFF0C;&#x6211;&#x4EEC;&#x53EA;&#x9700;&#x8981;&#x5904;&#x7406;&#x57FA;&#x672C;&#x6848;&#x4F8B;&#x548C;&#x9012;&#x5F52;&#x6848;&#x4F8B;&#x3002;&#x5F53;&#x6211;&#x4EEC;&#x904D;&#x5386;&#x5B8C;&#x4E24;&#x4E2A;&#x5B57;&#x540E;&#x4F1A;&#x600E;&#x6837;&#xFF1F;&#x6709;&#x4E9B;&#x60F3;&#x6CD5;&#x4F1A;&#x544A;&#x8BC9;&#x60A8;&#xFF0C;&#x8F6C;&#x6362;&#x7684;&#x6700;&#x5C0F;&#x6B21;&#x6570;&#x53EA;&#x662F;&#x63D2;&#x5165;&#x5176;&#x4ED6;&#x5355;&#x8BCD;&#x7684;&#x5176;&#x4F59;&#x90E8;&#x5206;&#x3002;&#x8FD9;&#x662F;&#x6211;&#x4EEC;&#x7684;&#x57FA;&#x672C;&#x60C5;&#x51B5;&#x3002;&#x5F53;&#x6211;&#x4EEC;&#x4E0D;&#x4F7F;&#x7528;&#x4EFB;&#x4F55;&#x4E00;&#x4E2A;&#x5B57;&#x7B26;&#x4E32;&#x600E;&#x4E48;&#x529E;&#xFF1F;&#x6211;&#x4EEC;&#x8981;&#x4E48;&#x5339;&#x914D;&#x4E24;&#x4E2A;&#x5B57;&#x7B26;&#x4E32;&#x4E2D;&#x5F53;&#x524D;&#x7D22;&#x5F15;&#x7684;&#x5B57;&#x7B26;&#xFF0C;&#x8981;&#x4E48;&#x4E0D;&#x5339;&#x914D;&#x3002;&#x5728;&#x7B2C;&#x4E00;&#x79CD;&#x60C5;&#x51B5;&#x4E0B;&#xFF0C;&#x6211;&#x4EEC;&#x4E0D;&#x4F1A;&#x4EA7;&#x751F;&#x4EFB;&#x4F55;&#x635F;&#x5931;&#xFF0C;&#x5E76;&#x4E14;&#x53EF;&#x4EE5;&#x901A;&#x8FC7;&#x91CD;&#x590D;&#x4E24;&#x4E2A;&#x5B57;&#x7B26;&#x4E32;&#x7684;&#x5176;&#x4F59;&#x90E8;&#x5206;&#x6765;&#x7EE7;&#x7EED;&#x6BD4;&#x8F83;&#x5176;&#x4F59;&#x5B57;&#x7B26;&#x4E32;&#x3002;&#x5728;&#x4E0D;&#x5339;&#x914D;&#x7684;&#x60C5;&#x51B5;&#x4E0B;&#xFF0C;&#x6211;&#x4EEC;&#x53EF;&#x4EE5;&#x63D2;&#x5165;&#xFF0C;&#x5220;&#x9664;&#x6216;&#x66FF;&#x6362;&#x3002;&#x56DE;&#x987E;&#x4E00;&#x4E0B;&#xFF1A; &#x57FA;&#x672C;&#x60C5;&#x51B5;&#xFF1A;word1 = &quot;&quot; &#x6216; word2 = &quot;&quot; =&gt; &#x8FD4;&#x56DE;&#x5176;&#x4ED6;&#x5B57;&#x7B26;&#x4E32;&#x7684;&#x957F;&#x5EA6;&#xFF1B; &#x9012;&#x5F52;&#x7684;&#x60C5;&#x51B5;&#xFF1A;word1 [0] == word2 [0] =&gt; &#x5BF9;word1 [1:]&#x548C;word2 [1:]&#x8FDB;&#x884C;&#x9012;&#x5F52;&#xFF1B; &#x9012;&#x5F52;&#x7684;&#x60C5;&#x51B5;&#xFF1A;word1 [0] != word2 [0] =&gt; &#x901A;&#x8FC7;&#x63D2;&#x5165;&#xFF0C;&#x5220;&#x9664;&#x6216;&#x66FF;&#x6362;&#x6765;&#x9012;&#x5F52;&#x3002; &#x5728;Python&#x4E2D;&#xFF1A; class Solution: def minDistance(self, word1, word2): &quot;&quot;&quot;Naive recursive solution&quot;&quot;&quot; if not word1 and not word2: return 0 if not word1: return len(word2) if not word2: return len(word1) if word1[0] == word2[0]: return self.minDistance(word1[1:], word2[1:]) insert = 1 + self.minDistance(word1, word2[1:]) delete = 1 + self.minDistance(word1[1:], word2) replace = 1 + self.minDistance(word1[1:], word2[1:]) return min(insert, replace, delete) &#x6709;&#x4E86;&#x4E00;&#x4E2A;&#x53EF;&#x7528;&#x7684;&#x89E3;&#x51B3;&#x65B9;&#x6848;&#xFF0C;&#x6211;&#x4EEC;&#x6B23;&#x559C;&#x82E5;&#x72C2;&#xFF0C;&#x6211;&#x4EEC;&#x53BB;&#x63D0;&#x4EA4;&#x6211;&#x4EEC;&#x7684;&#x4EE3;&#x7801;&#x3002;&#x4E00;&#x5207;&#x90FD;&#x5F88;&#x597D;&#xFF0C;&#x76F4;&#x5230;&#x6211;&#x4EEC;&#x770B;&#x5230;&#x53EF;&#x6015;&#x7684;&#x7EA2;&#x8272;&#x6587;&#x672C;&#x4E3A;&#x6B62;&#x2026;&#x2026;TIME LIMIT EXCEEDED&#x3002;&#x6211;&#x4EEC;&#x505A;&#x9519;&#x4E86;&#x4EC0;&#x4E48;&#xFF1F;&#x8BA9;&#x6211;&#x4EEC;&#x770B;&#x4E00;&#x4E2A;&#x7B80;&#x5355;&#x7684;&#x793A;&#x4F8B;&#xFF0C;&#x4E3A;&#x4E86;&#x7B80;&#x6D01;&#x8D77;&#x89C1;&#xFF0C;&#x6211;&#x5C06;minDistance&#x51FD;&#x6570;&#x6CE8;&#x91CA;&#x4E3A;md&#x3002; word1 = &quot;horse&quot; word2 = &quot;hello&quot; &#x9012;&#x5F52;&#x8C03;&#x7528;&#x6811;&#x6DF1;3&#x5C42;&#xFF0C;&#x5982;&#x4E0B;&#x6240;&#x793A;&#x3002;&#x6211;&#x91CD;&#x70B9;&#x4ECB;&#x7ECD;&#x4E86;&#x5177;&#x6709;&#x591A;&#x4E2A;&#x8C03;&#x7528;&#x7684;&#x9012;&#x5F52;&#x8C03;&#x7528;&#x3002;&#x6240;&#x4EE5;&#x73B0;&#x5728;&#x6211;&#x4EEC;&#x770B;&#x5230;&#x6211;&#x4EEC;&#x6B63;&#x5728;&#x91CD;&#x590D;&#x5DE5;&#x4F5C;&#x3002;&#x6211;&#x4E0D;&#x4F1A;&#x5C1D;&#x8BD5;&#x5206;&#x6790;&#x6B64;&#x89E3;&#x51B3;&#x65B9;&#x6848;&#x7684;&#x8FD0;&#x884C;&#x65F6;&#xFF0C;&#x4F46;&#x662F;&#x5B83;&#x662F;&#x6307;&#x6570;&#x7EA7;&#x7684;&#x3002; md(&quot;horse&quot;, &quot;hello&quot;) md(&quot;orse&quot;, &quot;ello&quot;) md(&quot;orse&quot;, &quot;llo&quot;) md(&quot;orse&quot;, &quot;lo&quot;) md(&quot;rse&quot;, &quot;llo&quot;) &lt;- md(&quot;rse&quot;, &quot;lo&quot;) md(&quot;rse&quot;, &quot;ello&quot;) md(&quot;rse&quot;, &quot;llo&quot;) &lt;- md(&quot;se&quot;, &quot;ello&quot;) md(&quot;se&quot;, &quot;llo&quot;) &lt;&lt;- md(&quot;rse&quot;, &quot;llo&quot;) md(&quot;rse&quot;, &quot;llo&quot;) &lt;- md(&quot;se&quot;, &quot;llo&quot;) &lt;&lt;- md(&quot;se&quot;, &quot;lo&quot;) &#x6211;&#x4EEC;&#x89E3;&#x51B3;&#x6B64;&#x95EE;&#x9898;&#x7684;&#x65B9;&#x6CD5;&#x662F;&#x901A;&#x8FC7;&#x7F13;&#x5B58;&#x3002;&#x6211;&#x4EEC;&#x5C06;&#x4E2D;&#x95F4;&#x8BA1;&#x7B97;&#x7ED3;&#x679C;&#x4FDD;&#x5B58;&#x5728;&#x4E00;&#x4E2A;&#x5B57;&#x5178;&#x4E2D;&#xFF0C;&#x5982;&#x679C;&#x6211;&#x4EEC;&#x518D;&#x6B21;&#x5904;&#x7406;&#x76F8;&#x540C;&#x7684;&#x5B50;&#x95EE;&#x9898;&#xFF0C;&#x800C;&#x4E0D;&#x662F;&#x518D;&#x6B21;&#x6267;&#x884C;&#x76F8;&#x540C;&#x7684;&#x5DE5;&#x4F5C;&#xFF0C;&#x6211;&#x4EEC;&#x5C06;&#x8FD4;&#x56DE;&#x4FDD;&#x5B58;&#x7684;&#x503C;&#x3002;&#x8FD9;&#x662F;&#x8BB0;&#x5FC6;&#x5316;&#x7684;&#x89E3;&#x51B3;&#x65B9;&#x6848;&#xFF0C;&#x6211;&#x4EEC;&#x4ECE;&#x8F83;&#x5927;&#x7684;&#x5B50;&#x95EE;&#x9898;&#x6784;&#x5EFA;&#x4E3A;&#x8F83;&#x5C0F;&#x7684;&#x5B50;&#x95EE;&#x9898;&#xFF08;&#x81EA;&#x4E0A;&#x800C;&#x4E0B;&#xFF09;&#x3002; class Solution: def minDistance(self, word1, word2, i, j, memo): &quot;&quot;&quot;Memoized solution&quot;&quot;&quot; if i == len(word1) and j == len(word2): return 0 if i == len(word1): return len(word2) - j if j == len(word2): return len(word1) - i if (i, j) not in memo: if word1[i] == word2[j]: ans = self.minDistance2(word1, word2, i + 1, j + 1, memo) else: insert = 1 + self.minDistance2(word1, word2, i, j + 1, memo) delete = 1 + self.minDistance2(word1, word2, i + 1, j, memo) replace = 1 + self.minDistance2(word1, word2, i + 1, j + 1, memo) ans = min(insert, delete, replace) memo[(i, j)] = ans return memo[(i, j)] &#x5F53;&#x7136;&#xFF0C;&#x4EA4;&#x4E92;&#x5F0F;&#x5B9E;&#x73B0;&#x901A;&#x5E38;&#x6BD4;&#x5176;&#x9012;&#x5F52;&#x5B9E;&#x73B0;&#x8981;&#x597D;&#xFF0C;&#x56E0;&#x4E3A;&#x5728;&#x9012;&#x5F52;&#x8C03;&#x7528;&#x7684;&#x6570;&#x91CF;&#x975E;&#x5E38;&#x591A;&#x7684;&#x60C5;&#x51B5;&#x4E0B;&#xFF0C;&#x6211;&#x4EEC;&#x4E0D;&#x627F;&#x62C5;&#x70B8;&#x6BC1;&#x5806;&#x6808;&#x7684;&#x98CE;&#x9669;&#x3002;&#x6211;&#x4EEC;&#x8FD8;&#x53EF;&#x4EE5;&#x4F7F;&#x7528;2D&#x6570;&#x7EC4;&#x6267;&#x884C;&#x4E0E;&#x7F13;&#x5B58;&#x503C;&#x7684;&#x5B57;&#x5178;&#x57FA;&#x672C;&#x76F8;&#x540C;&#x7684;&#x64CD;&#x4F5C;&#x3002;&#x5F53;&#x6211;&#x4EEC;&#x8FD9;&#x6837;&#x505A;&#x65F6;&#xFF0C;&#x6211;&#x4EEC;&#x5EFA;&#x7ACB;&#x4E86;&#x4ECE;&#x8F83;&#x5C0F;&#x7684;&#x5B50;&#x95EE;&#x9898;&#x5230;&#x8F83;&#x5927;&#x7684;&#x5B50;&#x95EE;&#x9898;&#xFF08;&#x81EA;&#x4E0B;&#x800C;&#x4E0A;&#xFF09;&#x7684;&#x89E3;&#x51B3;&#x65B9;&#x6848;&#x3002;&#x5728;&#x8FD9;&#x79CD;&#x60C5;&#x51B5;&#x4E0B;&#xFF0C;&#x7531;&#x4E8E;&#x4E0D;&#x518D;&#x9700;&#x8981;&#x4F20;&#x7EDF;&#x610F;&#x4E49;&#x4E0A;&#x7684;&#x201C;&#x91CD;&#x590D;&#x53D1;&#x751F;&#x201D;&#xFF0C;&#x56E0;&#x6B64;&#x6211;&#x4EEC;&#x4F7F;&#x7528;&#x57FA;&#x672C;&#x7EA6;&#x675F;&#x6765;&#x521D;&#x59CB;&#x5316;2D&#x8868;&#x3002;&#x8BE5;&#x8868;&#x7684;&#x7B2C;&#x4E00;&#x884C;&#x548C;&#x5217;&#x5177;&#x6709;&#x5DF2;&#x77E5;&#x503C;&#xFF0C;&#x56E0;&#x4E3A;&#x5982;&#x679C;&#x4E00;&#x4E2A;&#x5B57;&#x7B26;&#x4E32;&#x4E3A;&#x7A7A;&#xFF0C;&#x6211;&#x4EEC;&#x53EA;&#x9700;&#x6DFB;&#x52A0;&#x975E;&#x7A7A;&#x5B57;&#x7B26;&#x4E32;&#x7684;&#x957F;&#x5EA6;&#xFF0C;&#x56E0;&#x4E3A;&#x8FD9;&#x662F;&#x8FBE;&#x5230;&#x7B49;&#x6548;&#x5B57;&#x7B26;&#x4E32;&#x6240;&#x9700;&#x7684;&#x6700;&#x5C11;&#x7F16;&#x8F91;&#x6B21;&#x6570;&#x3002;&#x5BF9;&#x4E8E;&#x8BB0;&#x5FC6;&#x548C;&#x52A8;&#x6001;&#x7F16;&#x7A0B;&#x89E3;&#x51B3;&#x65B9;&#x6848;&#xFF0C;&#x65F6;&#x95F4;&#x590D;&#x6742;&#x5EA6;&#x5747;&#x4E3A;O(mn)&#xFF0C;&#x7A7A;&#x95F4;&#x590D;&#x6742;&#x5EA6;&#x4E3A;O(mn)&#xFF0C;&#x5176;&#x4E2D;m&#x548C;n&#x5206;&#x522B;&#x662F;word1&#x548C;word2&#x7684;&#x957F;&#x5EA6;&#x3002; class Solution: def minDistance(self, word1, word2): &quot;&quot;&quot;Dynamic programming solution&quot;&quot;&quot; m = len(word1) n = len(word2) table = [[0] * (n + 1) for _ in range(m + 1)] for i in range(m + 1): table[i][0] = i for j in range(n + 1): table[0][j] = j for i in range(1, m + 1): for j in range(1, n + 1): if word1[i - 1] == word2[j - 1]: table[i][j] = table[i - 1][j - 1] else: table[i][j] = 1 + min(table[i - 1][j], table[i][j - 1], table[i - 1][j - 1]) return table[-1][-1] Reference Edit distance Python solutions and intuition","categories":[{"name":"Technology","slug":"Technology","permalink":"https://littlemeemoon.cn/categories/Technology/"},{"name":"Coding","slug":"Technology/Coding","permalink":"https://littlemeemoon.cn/categories/Technology/Coding/"},{"name":"Leetcode","slug":"Technology/Coding/Leetcode","permalink":"https://littlemeemoon.cn/categories/Technology/Coding/Leetcode/"}],"tags":[{"name":"Leetcode","slug":"Leetcode","permalink":"https://littlemeemoon.cn/tags/Leetcode/"},{"name":"Python","slug":"Python","permalink":"https://littlemeemoon.cn/tags/Python/"},{"name":"Algorithm","slug":"Algorithm","permalink":"https://littlemeemoon.cn/tags/Algorithm/"}],"keywords":[{"name":"Technology","slug":"Technology","permalink":"https://littlemeemoon.cn/categories/Technology/"},{"name":"Coding","slug":"Technology/Coding","permalink":"https://littlemeemoon.cn/categories/Technology/Coding/"},{"name":"Leetcode","slug":"Technology/Coding/Leetcode","permalink":"https://littlemeemoon.cn/categories/Technology/Coding/Leetcode/"}]},{"title":"Leetcode Note in May 2020 | part 3 | day 21-31 | (二)","slug":"Technology/Coding/Leetcode/Leetcode-Note-in-May-2020-part-3-day-21-31-(二)","date":"2020-05-31T14:15:16.000Z","updated":"2020-06-04T04:19:01.759Z","comments":true,"path":"2020/05/31/Technology/Coding/Leetcode/Leetcode-Note-in-May-2020-part-3-day-21-31-(二)/","link":"","permalink":"https://littlemeemoon.cn/2020/05/31/Technology/Coding/Leetcode/Leetcode-Note-in-May-2020-part-3-day-21-31-(%E4%BA%8C)/","excerpt":"","text":"&#x5199;&#x5728;&#x524D;&#x9762;&#x7684;&#x8BDD; &#x679C;&#x7136;&#x53C8;&#x62D6;&#x5230;&#x4E86;&#x4ECA;&#x5929;&#x5FEB;&#x7ED3;&#x675F;&#xFF0C;&#x6211;&#x8FD9;&#x62D6;&#x5EF6;&#x75C7;&#x554A;&#x554A;&#x554A;&#x554A;&#x1F624;&#x3002;&#x6211;&#x5565;&#x65F6;&#x5019;&#x6539;&#x6389;&#x8FD9;&#x4E2A;&#x6BDB;&#x75C5;&#x6211;&#x4E00;&#x5B9A;&#x8981;&#x597D;&#x597D;&#x5956;&#x52B1;&#x4E00;&#x4E0B;&#x81EA;&#x5DF1;&#xFF01; Uncrossed Lines We write the integers of A and B (in the order they are given) on two separate horizontal lines. Now, we may draw connecting lines: a straight line connecting two numbers A[i] and B[j] such that: - A[i] == B[j]; - The line we draw does not intersect any other connecting (non-horizontal) line. Note that a connecting lines cannot intersect even at the endpoints: each number can only belong to one connecting line. Return the maximum number of connecting lines we can draw in this way. Example 1: Input: A = [1,4,2], B = [1,2,4] Output: 2 Explanation: We can draw 2 uncrossed lines as in the diagram. We cannot draw 3 uncrossed lines, because the line from A[1]=4 to B[2]=4 will intersect the line from A[2]=2 to B[1]=2. Example 2: Input: A = [2,5,1,2,5], B = [10,5,2,1,5,2] Output: 3 Example 3: Input: A = [1,3,7,1,7,5], B = [1,9,2,5,1] Output: 2 Solution &#x8FD9;&#x4E2A;&#x9898;&#x76EE;&#x53EF;&#x4EE5;&#x7528;&#x52A8;&#x6001;&#x89C4;&#x5212;&#x7684;&#x65B9;&#x6CD5;&#x6765;&#x505A;&#x3002;&#x6C42;&#x4E0D;&#x60F3;&#x4EA4;&#x7684;&#x6700;&#x5927;&#x8FDE;&#x7EBF;&#x6570;&#xFF0C;&#x53EF;&#x4EE5;&#x901A;&#x8FC7;&#x6784;&#x9020;&#x4E00;&#x4E2A;&#x8868;dp&#xFF0C;dp[y][x]&#x7684;&#x503C;&#x8868;&#x793A;A[1...y]&#x548C;B[1...x]&#x4E4B;&#x95F4;&#x6700;&#x5927;&#x8FDE;&#x7EBF;&#x6570;&#x3002;&#x9996;&#x5148;&#x53EF;&#x4EE5;&#x4E3A;A,B&#x65B0;&#x589E;&#x52A0;&#x4E00;&#x4E2A;-1&#xFF0C;&#x7528;&#x4E8E;&#x8868;&#x793A;&#x7A7A;&#x5217;&#x8868;&#xFF1A; &#x5F53;y = 0&#xFF0C;&#x6216;&#x8005;x = 0: dp[y][x] = 0&#xFF1B; &#x5982;&#x679C;A[y] = B[x]: dp[y][x] = dp[y-1][x-1] + 1&#xFF0C;&#x5F53;&#x524D;&#x7684;&#x6700;&#x540E;&#x4E00;&#x4E2A;&#x6570;&#x5B57;&#x76F8;&#x7B49;&#xFF0C;&#x589E;&#x52A0;&#x4E00;&#x6761;&#x4E0D;&#x4EA4;&#x53C9;&#x7684;&#x7EBF;&#xFF1B; &#x5982;&#x679C;A[y] != B[x]: dp[y][x] = max(dp[y][x-1], dp[y-1][x])&#xFF0C;&#x5F53;&#x524D;&#x7684;&#x6700;&#x540E;&#x4E00;&#x4E2A;&#x6570;&#x5B57;&#x4E0D;&#x76F8;&#x7B49;&#xFF0C;&#x56DE;&#x6EAF;&#x5230;A[1 ... y]B[1...x-1]&#xFF0C;A[1...y-1]B[1...x]&#x627E;&#x5230;&#x6700;&#x5927;&#x7684;&#x4E0D;&#x4EA4;&#x53C9;&#x7EBF;&#x3002; class Solution: def maxUncrossedLines(self, A: List[int], B: List[int]) -&gt; int: A = [-1] + A B = [-1] + B h, w = len(A), len(B) dp = [[0 for _ in range(w)] for _ in range(h)] for y in range(1, h): for x in range(1, w): if A[y] == B[x]: dp[y][x] = dp[y-1][x-1] + 1 else: dp[y][x] = max(dp[y][x-1], dp[y-1][x]) return dp[-1][-1] Possible Bipartition Given a set of N people (numbered 1, 2, ..., N), we would like to split everyone into two groups of any size. Each person may dislike some other people, and they should not go into the same group. Formally, if dislikes[i] = [a, b], it means it is not allowed to put the people numbered a and b into the same group. Return true if and only if it is possible to split everyone into two groups in this way. Example 1: Input: N = 4, dislikes = [[1,2],[1,3],[2,4]] Output: true Explanation: group1 [1,4], group2 [2,3] Example 2: Input: N = 3, dislikes = [[1,2],[1,3],[2,3]] Output: false Example 3: Input: N = 5, dislikes = [[1,2],[2,3],[3,4],[4,5],[1,5]] Output: false Solution &#x8FD9;&#x9053;&#x9898;&#x6211;&#x53C2;&#x8003;&#x4E86;@brianchiang_tw&#x7684;&#x89E3;&#x8BF4;&#xFF0C;&#x53EF;&#x4EE5;&#x7528;&#x56FE;&#x548C;&#x6DF1;&#x5EA6;&#x4F18;&#x5148;&#x904D;&#x5386;&#x7684;&#x65B9;&#x6CD5;&#x89E3;&#x7B54;&#x3002;&#x9996;&#x5148;&#x5C06;&#x6BCF;&#x4E00;&#x4E2A;&#x4EBA;&#x90FD;&#x770B;&#x4F5C;&#x56FE;&#x4E2D;&#x7684;&#x8282;&#x70B9;&#xFF0C;&#x5982;&#x679C;&#x4E24;&#x4E2A;&#x8282;&#x70B9;&#x4E4B;&#x95F4;&#x6709;&#x8FDE;&#x7EBF;&#x8868;&#x793A;&#x8FD9;&#x4E24;&#x4E2A;&#x4EBA;&#x4E92;&#x76F8;&#x4E0D;&#x559C;&#x6B22;&#x5BF9;&#x65B9;&#xFF0C;&#x90A3;&#x4E48;&#x53EF;&#x4EE5;&#x4E3A;&#x8FD9;&#x4E24;&#x4E2A;&#x8282;&#x70B9;&#x7740;&#x4E0D;&#x4E00;&#x6837;&#x7684;&#x989C;&#x8272;&#x3002;&#x8FD9;&#x6837;&#x5C31;&#x53EF;&#x4EE5;&#x901A;&#x8FC7;&#x5224;&#x65AD;&#x662F;&#x5426;&#x80FD;&#x591F;&#x6784;&#x6210;&#x4E00;&#x4E2A;&#x53EF;&#x80FD;&#x7684;&#x4E8C;&#x5206;&#x56FE;&#x6765;&#x5224;&#x65AD;&#x662F;&#x5426;&#x80FD;&#x5C06;N&#x4E2A;&#x4EBA;&#x5206;&#x4E3A;&#x4E0D;&#x540C;&#x7684;&#x4E24;&#x7EC4;&#x3002; &#x4E8C;&#x5206;&#x56FE; &#x5728;&#x56FE;&#x8BBA;&#x4E2D;&#xFF0C;&#x4E8C;&#x5206;&#x56FE;&#x662F;&#x4E00;&#x7C7B;&#x7279;&#x6B8A;&#x7684;&#x56FE;&#xFF0C;&#x53C8;&#x79F0;&#x4E3A;&#x53CC;&#x5206;&#x56FE;&#x3001;&#x4E8C;&#x90E8;&#x56FE;&#x3001;&#x5076;&#x56FE;&#x3002;&#x4E8C;&#x5206;&#x56FE;&#x7684;&#x9876;&#x70B9;&#x53EF;&#x4EE5;&#x5206;&#x6210;&#x4E24;&#x4E2A;&#x4E92;&#x65A5;&#x7684;&#x72EC;&#x7ACB;&#x96C6; U &#x548C; V &#x7684;&#x56FE;&#xFF0C;&#x4F7F;&#x5F97;&#x6240;&#x6709;&#x8FB9;&#x90FD;&#x662F;&#x8FDE;&#x7ED3;&#x4E00;&#x4E2A; U &#x4E2D;&#x7684;&#x70B9;&#x548C;&#x4E00;&#x4E2A; V &#x4E2D;&#x7684;&#x70B9;&#x3002;&#x9876;&#x70B9;&#x96C6; U&#x3001;V &#x88AB;&#x79F0;&#x4E3A;&#x662F;&#x56FE;&#x7684;&#x4E24;&#x4E2A;&#x90E8;&#x5206;&#x3002;&#x7B49;&#x4EF7;&#x7684;&#xFF0C;&#x4E8C;&#x5206;&#x56FE;&#x53EF;&#x4EE5;&#x88AB;&#x5B9A;&#x4E49;&#x6210;&#x56FE;&#x4E2D;&#x6240;&#x6709;&#x7684;&#x73AF;&#x90FD;&#x6709;&#x5076;&#x6570;&#x4E2A;&#x9876;&#x70B9;&#x3002; &#x53EF;&#x4EE5;&#x5C06; U &#x548C; V &#x5F53;&#x505A;&#x4E00;&#x4E2A;&#x7740;&#x8272;&#xFF1A;U &#x4E2D;&#x6240;&#x6709;&#x9876;&#x70B9;&#x4E3A;&#x84DD;&#x8272;&#xFF0C;V &#x4E2D;&#x6240;&#x6709;&#x9876;&#x70B9;&#x7740;&#x7EFF;&#x8272;&#xFF0C;&#x6BCF;&#x6761;&#x8FB9;&#x7684;&#x4E24;&#x4E2A;&#x7AEF;&#x70B9;&#x7684;&#x989C;&#x8272;&#x4E0D;&#x540C;&#xFF0C;&#x7B26;&#x5408;&#x56FE;&#x7740;&#x8272;&#x95EE;&#x9898;&#x7684;&#x8981;&#x6C42;&#x3002;&#x76F8;&#x53CD;&#x7684;&#xFF0C;&#x975E;&#x4E8C;&#x5206;&#x56FE;&#x65E0;&#x6CD5;&#x88AB;&#x4E8C;&#x7740;&#x8272;&#xFF0C;&#x4F8B;&#x5982; K3K_{3}K3&#x200B;(3 &#x4E2A;&#x9876;&#x70B9;&#x7684;&#x5B8C;&#x5168;&#x56FE;)&#xFF0C;&#x5C06;&#x5176;&#x4E2D;&#x4E00;&#x4E2A;&#x9876;&#x70B9;&#x7740;&#x84DD;&#x8272;&#x5E76;&#x4E14;&#x53E6;&#x5916;&#x4E00;&#x4E2A;&#x7740;&#x7EFF;&#x8272;&#x540E;&#xFF0C;&#x7B2C;&#x4E09;&#x4E2A;&#x9876;&#x70B9;&#x4E0E;&#x4E0A;&#x8FF0;&#x5177;&#x6709;&#x4E24;&#x4E2A;&#x989C;&#x8272;&#x7684;&#x9876;&#x70B9;&#x76F8;&#x8FDE;&#xFF0C;&#x65E0;&#x6CD5;&#x518D;&#x5BF9;&#x5B83;&#x7740;&#x84DD;&#x8272;&#x6216;&#x7EFF;&#x8272;&#x3002; &#x4E8C;&#x5206;&#x56FE;&#x7684;&#x4E00;&#x79CD;&#x63CF;&#x8FF0;&#x65B9;&#x5F0F;&#x4E3A;&#xFF1A;G=(U,V,E)&#xFF0C;&#x5305;&#x542B;&#x4E86;&#x72EC;&#x7ACB;&#x96C6; U &#x548C; V&#xFF0C;&#x4EE5;&#x53CA;&#x8FB9; E &#x7684;&#x4FE1;&#x606F;&#x3002;&#x5047;&#x5982;G&#x4E0D;&#x662F;&#x8FDE;&#x901A;&#x56FE;&#xFF0C;&#x53EF;&#x80FD;&#x6709;&#x591A;&#x79CD;&#x5C06;&#x6240;&#x6709;&#x9876;&#x70B9;&#x5206;&#x6210; U &#x548C; V &#x7684;&#x65B9;&#x5F0F;&#xFF1B;&#x5728;&#x7279;&#x5B9A;&#x7684;&#x5E94;&#x7528;&#x573A;&#x5408;&#x4E2D;&#xFF0C;&#x5C06;&#x9876;&#x70B9;&#x7684;&#x4E24;&#x90E8;&#x5206;U&#x3001;V&#x5199;&#x51FA;&#x6765;&#x662F;&#x6709;&#x5FC5;&#x8981;&#x7684;&#x3002;&#x5982;&#x679C;|U|=|V|&#xFF0C;&#x5219; G &#x79F0;&#x4E3A;&#x5E73;&#x8861;&#x4E8C;&#x5206;&#x56FE;&#x3002;&#x5982;&#x679C;&#x4E8C;&#x5206;&#x56FE; U &#x4EE5;&#x53CA; V &#x7684;&#x9876;&#x70B9;&#x5206;&#x522B;&#x6709;&#x76F8;&#x540C;&#x7684;&#x5EA6;&#x6570;&#xFF0C;&#x5219;G&#x88AB;&#x79F0;&#x4E3A;&#x662F;&#x53CC;&#x6B63;&#x5219;&#x7684;&#x3002; &#x7ED9;&#x5B9A;&#x4E00;&#x4E2A;&#x4E8C;&#x5206;&#x56FE; G&#xFF0C;&#x5728; G &#x7684;&#x4E00;&#x4E2A;&#x5B50;&#x56FE; M &#x4E2D;&#xFF0C;M &#x7684;&#x8FB9;&#x96C6;&#x4E2D;&#x7684;&#x4EFB;&#x610F;&#x4E24;&#x6761;&#x8FB9;&#x90FD;&#x6CA1;&#x6709;&#x5171;&#x540C;&#x7684;&#x7AEF;&#x70B9;&#xFF0C;&#x5219;&#x79F0; M &#x662F;&#x4E00;&#x4E2A;&#x5339;&#x914D;&#x3002; class Solution: def possibleBipartition(self, N: int, dislikes: List[List[int]]) -&gt; bool: # Constant defined for color drawing to person NOT_COLORED, BLUE, GREEN = 0, 1, -1 def helper(person_id, color): # Draw person_id as color color_table[person_id] = color # Draw the_other, with opposite color, in dislike table of current person_id for the_other in dislike_table[person_id]: if color_table[the_other] == color: # the_other has the same color of current person_id # Reject due to breaking the relationship of dislike return False if color_table[the_other] == NOT_COLORED and not(helper(the_other, -color)): # Other people can not be colored with two different colors. # Therefore, it is impossible to keep dis-like relationship with bipartition. return False return True References &#x4E8C;&#x5206;&#x56FE; Python sol by DFS and coloring. [w/ Graph] Counting Bits Given a non negative integer number num. For every numbers i in the range 0 &#x2264; i &#x2264; num calculate the number of 1&apos;s in their binary representation and return them as an array. Example 1: Input: 2 Output: [0,1,1] Example 2: Input: 5 Output: [0,1,1,2,1,2] Follow up: It is very easy to come up with a solution with run time O(n*sizeof(integer)). But can you do it in linear time O(n) /possibly in a single pass? Space complexity should be O(n). Can you do it like a boss? Do it without using any builtin function like __builtin_popcount in c++ or in any other language. Solutions &#x8FD9;&#x9053;&#x9898;&#x7684;&#x89E3;&#x9898;&#x601D;&#x8DEF;&#x633A;&#x591A;&#x7684;&#xFF0C;&#x6211;&#x6700;&#x5F00;&#x59CB;&#x60F3;&#x5230;&#x7684;&#x5E94;&#x8BE5;&#x662F;&#x6BD4;&#x8F83;&#x5927;&#x4F17;&#x7684;&#x89E3;&#x6CD5;&#xFF0C;&#x601D;&#x8DEF;&#x6E90;&#x4E8E;&#x5341;&#x8FDB;&#x5236;&#x4E0E;&#x4E8C;&#x8FDB;&#x5236;&#x7684;&#x5173;&#x7CFB;&#x3002;&#x901A;&#x8FC7;x&#x9664;&#x4EE5;2&#x7684;&#x7ED3;&#x679C;&#x548C;&#x4F59;&#x6570;&#xFF0C;&#x6765;&#x5224;&#x65AD;1&#x7684;&#x4E2A;&#x6570;&#x3002;&#x800C;&#x4E14;&#x53EF;&#x4EE5;&#x901A;&#x8FC7;&#x8BB0;&#x5F55;&#x4E4B;&#x524D;&#x7684;1&#x7684;&#x4E2A;&#x6570;&#x53EF;&#x4EE5;&#x5F97;&#x5230;&#x540E;&#x9762;&#x7684;&#x4E8C;&#x8FDB;&#x5236;&#x6570;&#x7684;1&#x7684;&#x4E2A;&#x6570;&#x3002; &#x4F8B;&#x5982;&#xFF1A; 0(0) =&gt; 0 1(01) =&gt; 1 2(10) =&gt; 1 3(011) = 2*1 + 1 =&gt; 1&#x7684;&#x4E2A;&#x6570;&#xFF1A;1&#xFF08;1&#x7684;&#x4E8C;&#x8FDB;&#x5236;&#x6570;&#x4E2D;1&#x7684;&#x4E2A;&#x6570;&#xFF09;+ 1&#xFF08;1&#x7684;&#x4E8C;&#x8FDB;&#x5236;&#x6570;&#x4E2D;1&#x7684;&#x4E2A;&#x6570;&#xFF09;= 2 4(100) = 2*2 + 0 =&gt; 1&#x7684;&#x4E2A;&#x6570;&#xFF1A;1&#xFF08;2&#x7684;&#x4E8C;&#x8FDB;&#x5236;&#x6570;&#x4E2D;1&#x7684;&#x4E2A;&#x6570;&#xFF09;+ 0&#xFF08;0&#x7684;&#x4E8C;&#x8FDB;&#x5236;&#x6570;&#x4E2D;1&#x7684;&#x4E2A;&#x6570;&#xFF09;= 1 5(101) = 2*2 + 1 =&gt; 1 + 1 = 2 ... &#x8FD9;&#x5176;&#x5B9E;&#x4E5F;&#x662F;&#x52A8;&#x6001;&#x89C4;&#x5212;&#x7684;&#x601D;&#x60F3;&#xFF1A; class Solution: def countBits(self, num: int) -&gt; List[int]: if num == 0: return [0] if num == 1: return [0, 1] count_dic = {0:0, 1:1, 2:1} for x in range(3, num+1): q, r = divmod(x, 2) count_dic[x] = count_dic[q] + count_dic[r] return list(count_dic.values()) &#x603B;&#x7ED3; &#x3B5;&#xFF1D;&#x3B5;&#xFF1D;&#x3B5;&#xFF1D;(#&gt;&#x434;&lt;)&#xFF89;&#x4ECA;&#x5929;&#x611F;&#x89C9;&#x597D;&#x7D2F;&#x554A;&#xFF0C;&#x611F;&#x89C9;&#x4E5F;&#x6CA1;&#x5E72;&#x5565;&#x4E8B;&#x554A;&#x3002;&#x53EA;&#x6709;&#x4E00;&#x4E2A;&#x603B;&#x7ED3;&#xFF0C;&#x4E0D;&#x8981;&#x628A;&#x4E8B;&#x60C5;&#x79EF;&#x7D2F;&#x5230;&#x4E00;&#x8D77;&#xFF0C;&#x624D;&#x5F00;&#x59CB;&#x52A8;&#xFF0C;&#x771F;&#x7684;&#x5F88;&#x7D2F;&#x554A;&#xFF0C;&#x800C;&#x4E14;&#x8D8A;&#x5806;&#x8D8A;&#x591A;&#x8D8A;&#x4E0D;&#x60F3;&#x505A;&#x3002;&#x4E0B;&#x4E2A;&#x6708;&#x7684;&#x7B14;&#x8BB0;&#x6700;&#x597D;&#x8FD8;&#x662F;&#x6709;&#x4E00;&#x9053;&#x8BB0;&#x5F55;&#x4E00;&#x9053;&#xFF0C;&#x4E0D;&#x8981;&#x62D6;&#xFF0C;&#x4E0D;&#x8981;&#x62D6;&#xFF0C;&#x4E0D;&#x8981;&#x62D6;&#xFF01;&#x91CD;&#x8981;&#x7684;&#x4E8B;&#x8BF4;&#x4E09;&#x904D;&#xFF01;&#xFF01;&#xFF01;&#x4E0D;&#x7136;&#x8FC7;&#x4E86;&#x597D;&#x4E45;&#x90FD;&#x5FD8;&#x4E86;&#x4E4B;&#x524D;&#x662F;&#x600E;&#x4E48;&#x505A;&#x7684;&#x4E86;&#x1F62D;&#xFF0C;&#x597D;&#x4E86;&#x4E0D;&#x8BF4;&#x4E86;&#xFF0C;&#x8D70;&#x4E86;~","categories":[{"name":"Technology","slug":"Technology","permalink":"https://littlemeemoon.cn/categories/Technology/"},{"name":"Coding","slug":"Technology/Coding","permalink":"https://littlemeemoon.cn/categories/Technology/Coding/"},{"name":"Leetcode","slug":"Technology/Coding/Leetcode","permalink":"https://littlemeemoon.cn/categories/Technology/Coding/Leetcode/"}],"tags":[{"name":"Leetcode","slug":"Leetcode","permalink":"https://littlemeemoon.cn/tags/Leetcode/"},{"name":"Python","slug":"Python","permalink":"https://littlemeemoon.cn/tags/Python/"},{"name":"Algorithm","slug":"Algorithm","permalink":"https://littlemeemoon.cn/tags/Algorithm/"}],"keywords":[{"name":"Technology","slug":"Technology","permalink":"https://littlemeemoon.cn/categories/Technology/"},{"name":"Coding","slug":"Technology/Coding","permalink":"https://littlemeemoon.cn/categories/Technology/Coding/"},{"name":"Leetcode","slug":"Technology/Coding/Leetcode","permalink":"https://littlemeemoon.cn/categories/Technology/Coding/Leetcode/"}]},{"title":"Leetcode Note in May 2020 | part 3 | day 21-31 | (一)","slug":"Technology/Coding/Leetcode/Leetcode-Note-in-May-2020-part-3-day-21-31-(一)","date":"2020-05-31T14:12:48.000Z","updated":"2020-06-04T04:19:01.758Z","comments":true,"path":"2020/05/31/Technology/Coding/Leetcode/Leetcode-Note-in-May-2020-part-3-day-21-31-(一)/","link":"","permalink":"https://littlemeemoon.cn/2020/05/31/Technology/Coding/Leetcode/Leetcode-Note-in-May-2020-part-3-day-21-31-(%E4%B8%80)/","excerpt":"","text":"&#x5199;&#x5728;&#x524D;&#x9762;&#x7684;&#x8BDD; &#x4E94;&#x6708;&#x6700;&#x540E;&#x4E00;&#x6CE2;Leetcode&#x7B14;&#x8BB0;&#xFF0C;&#x4E0B;&#x4E2A;&#x6708;&#x7684;leetcode&#x7B14;&#x8BB0;&#x5F62;&#x5F0F;&#x4F1A;&#x6709;&#x4E00;&#x4E9B;&#x6539;&#x52A8;&#xFF0C;&#x4E3B;&#x8981;&#x662F;&#x4E3A;&#x4E86;&#x65B9;&#x4FBF;&#x68C0;&#x7D22;&#x548C;&#x603B;&#x7ED3;&#x3002;&#x8FD9;&#x4E2A;&#x6708;&#x8FC7;&#x5F97;&#x597D;&#x5FEB;&#x554A;&#xFF0C;&#x4ECA;&#x5929;&#x662F;&#x4E94;&#x6708;&#x7684;&#x6700;&#x540E;&#x4E00;&#x5929;&#xFF0C;&#x4EFF;&#x4F5B;&#x5236;&#x5B9A;&#x4E94;&#x6708;&#x7684;&#x8BA1;&#x5212;&#x5C31;&#x662F;&#x524D;&#x4E24;&#x5929;&#x7684;&#x4E8B;&#xFF0C;&#x8FD9;&#x4E2A;&#x6708;&#x7684;&#x8BA1;&#x5212;&#x57FA;&#x672C;&#x4E0A;&#x8FD8;&#x662F;&#x5B8C;&#x6210;&#x4E86;&#x3002;&#x563F;&#x6211;&#x89C9;&#x5F97;&#x6211;&#x53EF;&#x4EE5;&#x5F00;&#x4E2A;&#x5468;&#x8BA1;&#x5212;&#x6708;&#x8BA1;&#x5212;&#x603B;&#x7ED3;&#x6587;&#x7AE0;&#x7CFB;&#x5217;O(&#x2229;_&#x2229;)O&#x54C8;&#x54C8;~&#xFF0C;&#x4E4B;&#x540E;&#x770B;&#x8981;&#x4E0D;&#x8981;&#x641E;&#x5427;&#x3002; &#x73B0;&#x5728;&#x5F00;&#x59CB;&#x4ECA;&#x5929;&#x7684;&#x6B63;&#x9898;&#x5427;&#x3002;&#x8FD9;&#x7BC7;&#x6587;&#x7AE0;&#x548C;&#x63A5;&#x4E0B;&#x6765;&#x4E24;&#x7BC7;&#x6587;&#x7AE0;&#x90FD;&#x662F;&#x5BF9;5&#x6708;21&#x65E5;&#x5230;5&#x6708;31&#x65E5;&#x8FD9;11&#x5929;&#x5237;leetcode&#x8FDB;&#x884C;&#x4E00;&#x4E2A;&#x603B;&#x7ED3;&#x3002;&#x56E0;&#x4E3A;&#x9898;&#x6709;&#x70B9;&#x591A;&#xFF0C;&#x6240;&#x4EE5;&#x5206;&#x4E3A;&#x4E86;&#x4E09;&#x4E2A;&#x90E8;&#x5206;&#x3002;&#x8FD8;&#x662F;&#x8001;&#x89C4;&#x77E9;&#xFF0C;&#x8BB0;&#x5F55;&#x6709;&#x4EE3;&#x8868;&#x6027;&#x7684;&#x9898;&#x76EE;&#x548C;&#x89E3;&#x9898;&#x601D;&#x8DEF;&#x3002; Count Square Submatrices with All Ones Given a m * n matrix of ones and zeros, return how many square submatrices have all ones. Example 1: Input: matrix = [ [0,1,1,1], [1,1,1,1], [0,1,1,1] ] Output: 15 Explanation: There are 10 squares of side 1. There are 4 squares of side 2. There is 1 square of side 3. Total number of squares = 10 + 4 + 1 = 15. Example 2: Input: matrix = [ [1,0,1], [1,1,0], [1,1,0] ] Output: 7 Explanation: There are 6 squares of side 1. There is 1 square of side 2. Total number of squares = 6 + 1 = 7. Solutions &#x8FD9;&#x4E2A;&#x9898;&#x548C;&#x4E4B;&#x524D;&#x505A;&#x8FC7;&#x7684;&#x90A3;&#x9053;&#x6C42;&#x6700;&#x5927;&#x6B63;&#x65B9;&#x5F62;&#x9762;&#x79EF;&#x7684;&#x9898;&#x5F88;&#x50CF;&#xFF0C;&#x53EA;&#x4E0D;&#x8FC7;&#x8FD9;&#x9053;&#x9898;&#x6C42;&#x7684;&#x662F;&#x6B63;&#x65B9;&#x5F62;&#x7684;&#x4E2A;&#x6570;&#x3002;&#x8FD8;&#x662F;&#x4E00;&#x6837;&#x7684;&#x601D;&#x8DEF;&#xFF0C;&#x91C7;&#x7528;&#x52A8;&#x6001;&#x89C4;&#x5212;&#xFF0C;&#x8FD9;&#x91CC;&#x518D;&#x590D;&#x4E60;&#x4E00;&#x4E0B;&#x597D;&#x4E86;&#x3002; &#x601D;&#x8DEF;&#x662F;&#x626B;&#x63CF;&#x77E9;&#x9635;&#x4E2D;&#x7684;&#x6BCF;&#x4E2A;&#x5355;&#x5143;&#x683C;&#xFF0C;&#x4EE5;&#x4F7F;&#x7528;&#x53EF;&#x4EE5;&#x4ECE;&#x5F53;&#x524D;&#x5355;&#x5143;&#x683C;&#xFF08;&#x5F53;&#x5B83;&#x662F;&#x4EFB;&#x4F55;&#x53EF;&#x80FD;&#x7684;&#x6B63;&#x65B9;&#x5F62;&#x7684;&#x53F3;&#x4E0B;&#x89D2;&#x5355;&#x5143;&#x683C;&#xFF09;&#x5F62;&#x6210;&#x7684;&#x6B63;&#x65B9;&#x5F62;&#x6570;&#x6765;&#x66F4;&#x65B0;&#x77E9;&#x9635;&#x5355;&#x5143;&#x683C;&#x7684;&#x53D8;&#x91CF;&#x503C;&#x4E3A;&#x5F53;&#x524D;&#x5355;&#x5143;&#x683C;&#x53EF;&#x5F62;&#x6210;&#x7684;&#x6B63;&#x65B9;&#x5F62;&#x4E2A;&#x6570;&#x3002;&#x8BF4;&#x8D77;&#x6765;&#x53EF;&#x80FD;&#x6BD4;&#x8F83;&#x7A7A;&#x6D1E;&#xFF0C;&#x8FD9;&#x91CC;&#x5F15;&#x7528;@arkaung&#x7684;&#x56FE;&#x89E3;&#xFF0C;&#x4ED6;&#x771F;&#x7684;&#x505A;&#x7684;&#x5F88;&#x68D2;&#xFF01; count_squares_01 count_squares_02 count_squares_03 class Solution: def countSquares(self, matrix: List[List[int]]) -&gt; int: m, n = len(matrix), len(matrix[0]) count = 0 for i in range(m): for j in range(n): if i != 0 and j != 0: # &#x5F53;i&#x548C;j&#x90FD;&#x975E;&#x96F6;&#x65F6;&#xFF0C;&#x7531;&#x4E8E;&#x77E9;&#x9635;&#x4E2D;&#x53EA;&#x5B58;&#x5728;0&#x548C;1&#xFF0C;&#x6240;&#x4EE5;&#x904D;&#x5386;&#x5230;&#x5F53;&#x524D;&#x70B9;&#x65F6;&#xFF0C; matrix[i][j] *= min(matrix[i-1][j], matrix[i][j-1], matrix[i-1][j-1]) + 1 # &#x8BA1;&#x7B97;&#x5F53;&#x524D;&#x603B;&#x5171;&#x7D2F;&#x8BA1;&#x7684;&#x6B63;&#x65B9;&#x5F62;&#x4E2A;&#x6570; count += matrix[i][j] return count References: &#x4E0A;&#x56FE;&#x6E90;&#x81EA; [@arkaung&apos;s discussion](https://leetcode.com/explore/challenge/card/may-leetcoding-challenge/536/week-3-may-15th-may-21st/3336/discuss/643429/Python-DP-Solution-+-Thinking-Process-Diagrams-(O(mn)-runtime-O(1)-space)) Interval List Intersections Given two lists of closed intervals, each list of intervals is pairwise disjoint and in sorted order. Return the intersection of these two interval lists. (Formally, a closed interval [a, b] (with a &lt;= b) denotes the set of real numbers x with a &lt;= x &lt;= b. The intersection of two closed intervals is a set of real numbers that is either empty, or can be represented as a closed interval. For example, the intersection of [1, 3] and [2, 4] is [2, 3].) Example: Input: A = [[0,2],[5,10],[13,23],[24,25]], B = [[1,5],[8,12],[15,24],[25,26]] Output: [[1,2],[5,5],[8,10],[15,23],[24,24],[25,25]] Solution &#x4ECE;&#x4E0A;&#x9762;&#x4E3E;&#x4F8B;&#x4E2D;&#x7684;&#x56FE;&#x53EF;&#x4EE5;&#x5F88;&#x76F4;&#x89C2;&#x7684;&#x77E5;&#x9053;&#x9898;&#x76EE;&#x8981;&#x6C42;&#x3002;&#x6211;&#x505A;&#x8FD9;&#x9053;&#x9898;&#x7684;&#x601D;&#x8DEF;&#x662F;&#x4F7F;&#x7528;&#x4E24;&#x4E2A;&#x6307;&#x9488;&#x5206;&#x522B;&#x6307;&#x5411;A&#xFF0C;B&#x4E24;&#x4E2A;&#x6570;&#x7EC4;&#xFF0C;&#x6839;&#x636E;&#x95F4;&#x9694;&#x4EA4;&#x96C6;&#x7684;&#x7279;&#x70B9;&#x6765;&#x627E;&#x4EA4;&#x96C6;&#x3002;&#x4EA4;&#x96C6;&#x7684;&#x7279;&#x70B9;&#x4E5F;&#x5F88;&#x660E;&#x663E;&#xFF1A;&#x4EA4;&#x96C6;&#x7684;&#x4E0A;&#x754C;&#x53EA;&#x53EF;&#x80FD;&#x4EA7;&#x751F;&#x4E8E;A&#x6216;B&#x4E2D;&#x5F53;&#x524D;&#x95F4;&#x9694;&#x7684;&#x4E0A;&#x754C;&#xFF0C;&#x4E0B;&#x754C;&#x53EA;&#x80FD;&#x4EA7;&#x751F;&#x4E8E;A&#x6216;B&#x4E2D;&#x5F53;&#x524D;&#x95F4;&#x9694;&#x7684;&#x4E0B;&#x754C;&#x3002;&#x5177;&#x4F53;&#x770B;&#x4EE3;&#x7801;&#x5B9E;&#x73B0;&#x3002; class Solution: def intervalIntersection(self, A: List[List[int]], B: List[List[int]]) -&gt; List[List[int]]: len_a = len(A) len_b = len(B) inter = [] a_i = b_i = 0 while a_i &lt; len_a and b_i &lt; len_b: [a_0, a_1], [b_0, b_1] = A[a_i], B[b_i] if a_0 &lt;= b_1 and b_0 &lt;= a_1: inter.append([max(a_0, b_0), min(a_1, b_1)]) if a_1 &lt;= b_1: a_i += 1 else: b_i += 1 return inter Construct Binary Search Tree from Preorder Traversal Return the root node of a binary search tree that matches the given preorder traversal. (Recall that a binary search tree is a binary tree where for every node, any descendant of node.left has a value &lt; node.val, and any descendant of node.right has a value &gt; node.val. Also recall that a preorder traversal displays the value of the node first, then traverses node.left, then traverses node.right.) It&apos;s guaranteed that for the given test cases there is always possible to find a binary search tree with the given requirements. Example 1: Input: [8,5,1,7,10,12] Output: [8,5,10,1,7,null,12] Solution &#x8FD9;&#x9898;&#x5C31;&#x662F;&#x8981;&#x6C42;&#x6211;&#x4EEC;&#x901A;&#x8FC7;&#x9898;&#x76EE;&#x7ED9;&#x5B9A;&#x7684;&#x6570;&#x7EC4;&#xFF0C;&#x6784;&#x9020;&#x4E00;&#x4E2A;&#x641C;&#x7D22;&#x4E8C;&#x53C9;&#x6811;&#x3002;&#x6211;&#x6700;&#x5F00;&#x59CB;&#x7684;&#x601D;&#x8DEF;&#x5C31;&#x662F;&#x6211;&#x672C;&#x79D1;&#x6570;&#x636E;&#x7ED3;&#x6784;&#x5B66;&#x7684;&#x6784;&#x9020;&#x641C;&#x7D22;&#x4E8C;&#x53C9;&#x6811;&#x7684;&#x7B97;&#x6CD5;(&#x5B66;&#x6CA1;&#x767D;&#x4E0A;&#x1F60B;&#x3002;&#x53EF;&#x4EE5;&#x901A;&#x8FC7;&#x904D;&#x5386;&#x6570;&#x7EC4;&#xFF0C;&#x4F9D;&#x6B21;&#x6839;&#x636E;&#x641C;&#x7D22;&#x4E8C;&#x53C9;&#x6811;&#x7684;&#x7279;&#x70B9;&#xFF08;&#x5DE6;&#x5B50;&#x6811;&#x8282;&#x70B9;&#x7684;&#x503C;&#x5C0F;&#x4E8E;&#x53F3;&#x5B50;&#x6811;&#x8282;&#x70B9;&#x7684;&#x503C;&#xFF09;&#x5411;&#x6811;&#x4E2D;&#x63D2;&#x5165;&#x65B0;&#x7684;&#x8282;&#x70B9;&#xFF0C;&#x4F7F;&#x65B0;&#x7684;&#x8282;&#x70B9;&#x63D2;&#x5165;&#x540E;&#x4E5F;&#x6EE1;&#x8DB3;&#x4E8C;&#x53C9;&#x641C;&#x7D22;&#x6811;&#x7684;&#x7279;&#x70B9;&#x3002; Mine # Definition for a binary tree node. # class TreeNode: # def __init__(self, val=0, left=None, right=None): # self.val = val # self.left = left # self.right = right class Solution: def bstFromPreorder(self, preorder: List[int]) -&gt; TreeNode: def bstInsert(tree, value): if not(tree): tree = TreeNode() tree.val = value return tree elif tree.val &gt; value: tree.left = bstInsert(tree.left, value) return tree else: tree.right = bstInsert(tree.right, value) return tree tree = None for value in preorder: tree = bstInsert(tree, value) return tree Nice answer from @ekovalyov &#x6211;&#x518D;&#x8BA8;&#x8BBA;&#x533A;&#x770B;&#x5230;&#x4E86;&#x4E00;&#x4E2A;&#x5F88;nice&#x7684;&#x7B54;&#x6848;&#xFF0C;&#x6765;&#x81EA;@ekovalyov&#xFF0C;&#x8FD9;&#x91CC;&#x9A6C;&#x4E00;&#x4E0B;&#x3002; class Solution: def bstFromPreorder(self, preorder: List[int]) -&gt; TreeNode: if preorder: return TreeNode(preorder[0], self.bstFromPreorder(tuple(takewhile(lambda x:x&lt;preorder[0], preorder[1:]))), self.bstFromPreorder(tuple(dropwhile(lambda x:x&lt;preorder[0], preorder[1:])))) Course Schedule There are a total of numCourses courses you have to take, labeled from 0 to numCourses-1. Some courses may have prerequisites, for example to take course 0 you have to first take course 1, which is expressed as a pair: [0,1] Given the total number of courses and a list of prerequisite pairs, is it possible for you to finish all courses? Example 1: Input: numCourses = 2, prerequisites = [[1,0]] Output: true Explanation: There are a total of 2 courses to take. To take course 1 you should have finished course 0. So it is possible. Example 2: Input: numCourses = 2, prerequisites = [[1,0],[0,1]] Output: false Explanation: There are a total of 2 courses to take. To take course 1 you should have finished course 0, and to take course 0 you should also have finished course 1. So it is impossible. Solution &#x8FD9;&#x4E2A;&#x9898;&#x76EE;&#x5927;&#x610F;&#x662F;&#x6839;&#x636E;&#x5148;&#x884C;&#x8BFE;&#x8981;&#x6C42;&#xFF0C;&#x5224;&#x65AD;&#x80FD;&#x4E0D;&#x80FD;&#x5B8C;&#x6210;&#x6240;&#x6709;&#x8BFE;&#x7A0B;&#x3002;&#x900F;&#x8FC7;&#x9898;&#x76EE;&#x6211;&#x4EEC;&#x53EF;&#x4EE5;&#x770B;&#x5230;&#x8FD9;&#x9898;&#x672C;&#x8D28;&#x4E0A;&#x662F;&#x4E00;&#x4E2A;&#x5224;&#x65AD;&#x6709;&#x5411;&#x56FE;&#x662F;&#x5426;&#x5B58;&#x5728;&#x73AF;&#x7684;&#x95EE;&#x9898;&#x3002;&#x5982;&#x679C;&#x5B58;&#x5728;&#x73AF;&#x90A3;&#x4E48;&#x4E0D;&#x80FD;&#x5B8C;&#x6210;&#x8BFE;&#x7A0B;&#xFF0C;&#x4E0D;&#x5B58;&#x5728;&#x73AF;&#x5219;&#x53EF;&#x987A;&#x5229;&#x5B8C;&#x6210;&#x6240;&#x6709;&#x8BFE;&#x7A0B;&#x3002;&#x5224;&#x65AD;&#x6709;&#x5411;&#x56FE;&#x662F;&#x5426;&#x5B58;&#x5728;&#x73AF;&#x53EF;&#x4EE5;&#x91C7;&#x7528;&#x6DF1;&#x5EA6;&#x4F18;&#x5148;&#x7B97;&#x6CD5;&#x904D;&#x5386;&#x56FE;&#x3002; class Solution: def canFinish(self, numCourses: int, prerequisites: List[List[int]]) -&gt; bool: neighbours = [[] for x in range(numCourses)] for v, u in prerequisites: neighbours[u].append(v) for source in range(numCourses): visited = [False for x in range(numCourses)] s = [source] # DFS while s: tmp = s.pop() if not visited[tmp]: s.extend(neighbours[tmp]) # Cycle elif tmp == source: return False visited[tmp] = True return True &#x603B;&#x7ED3; &#x8FD9;&#x662F;&#x7B2C;&#x4E00;&#x90E8;&#x5206;&#xFF0C;&#x7B2C;&#x4E8C;&#xFF0C;&#x4E09;&#x90E8;&#x5206;&#x6211;&#x4ECA;&#x5929;&#x5148;&#x53EA;&#x66F4;&#x65B0;&#x9898;&#x76EE;&#x548C;&#x7B54;&#x6848;&#xFF0C;&#x5177;&#x4F53;&#x7684;&#x89E3;&#x9898;&#x601D;&#x8DEF;&#x5206;&#x6790;&#x660E;&#x5929;&#x66F4;&#x65B0;&#xFF0C;&#x56E0;&#x4E3A;&#x73B0;&#x5728;&#x5DF2;&#x7ECF;&#x5F88;&#x665A;&#x4E86;&#xFF0C;&#x7B2C;&#x4E8C;&#x90E8;&#x5206;&#x6709;&#x56DB;&#x9053;&#x9898;&#xFF0C;&#x7B2C;&#x4E09;&#x90E8;&#x5206;&#x6709;&#x4E00;&#x9053;&#x9898;&#xFF0C;&#x4E3A;&#x4E86;&#x4FDD;&#x8BC1;&#x8D28;&#x91CF;&#x8FD8;&#x662F;&#x660E;&#x5929;&#x518D;&#x6574;&#x7406;&#x89E3;&#x9898;&#x601D;&#x8DEF;&#x5427;&#x3002; &#x65F6;&#x95F4;&#x8FC7;&#x7684;&#x597D;&#x5FEB;&#x554A;&#xFF0C;&#x7814;&#x4E00;&#x57FA;&#x672C;&#x4E0A;&#x5C31;&#x7ED3;&#x675F;&#x4E86;&#xFF0C;&#x8BA1;&#x5212;&#x4E2D;&#x50A8;&#x5907;&#x77E5;&#x8BC6;&#x7684;&#x65F6;&#x95F4;&#x5C31;&#x53EA;&#x5269;&#x4E0B;&#x4E00;&#x5E74;&#x4E86;&#x3002;&#x7814;&#x4E00;&#x4E3B;&#x8981;&#x662F;&#x5B8C;&#x6210;&#x8BFE;&#x7A0B;&#x5B66;&#x5206;&#xFF0C;&#x8FD9;&#x8FC7;&#x7A0B;&#x4E2D;&#x53EA;&#x8981;&#x8BA4;&#x771F;&#x5BF9;&#x5F85;&#x6BCF;&#x4E00;&#x95E8;&#x8BFE;&#xFF0C;&#x6536;&#x83B7;&#x8FD8;&#x662F;&#x5F88;&#x5927;&#x7684;&#x3002;&#x4E0B;&#x4E00;&#x9636;&#x6BB5;&#x5373;&#x5C06;&#x5F00;&#x59CB;&#xFF0C;&#x505A;&#x597D;&#x51C6;&#x5907;&#x54E6;&#x1F60A;~","categories":[{"name":"Technology","slug":"Technology","permalink":"https://littlemeemoon.cn/categories/Technology/"},{"name":"Coding","slug":"Technology/Coding","permalink":"https://littlemeemoon.cn/categories/Technology/Coding/"},{"name":"Leetcode","slug":"Technology/Coding/Leetcode","permalink":"https://littlemeemoon.cn/categories/Technology/Coding/Leetcode/"}],"tags":[{"name":"Leetcode","slug":"Leetcode","permalink":"https://littlemeemoon.cn/tags/Leetcode/"},{"name":"Python","slug":"Python","permalink":"https://littlemeemoon.cn/tags/Python/"},{"name":"Algorithm","slug":"Algorithm","permalink":"https://littlemeemoon.cn/tags/Algorithm/"}],"keywords":[{"name":"Technology","slug":"Technology","permalink":"https://littlemeemoon.cn/categories/Technology/"},{"name":"Coding","slug":"Technology/Coding","permalink":"https://littlemeemoon.cn/categories/Technology/Coding/"},{"name":"Leetcode","slug":"Technology/Coding/Leetcode","permalink":"https://littlemeemoon.cn/categories/Technology/Coding/Leetcode/"}]},{"title":"CV | Algorithm | Harris Corner Detector Principle and Implementation","slug":"Technology/CV-Algorithm/Harris Corner Detector Principle and Implementation","date":"2020-05-29T08:46:06.000Z","updated":"2020-06-04T05:52:42.551Z","comments":true,"path":"2020/05/29/Technology/CV-Algorithm/Harris Corner Detector Principle and Implementation/","link":"","permalink":"https://littlemeemoon.cn/2020/05/29/Technology/CV-Algorithm/Harris%20Corner%20Detector%20Principle%20and%20Implementation/","excerpt":"","text":"&#x524D;&#x8A00; &#x4E00;&#x822C;&#x5C40;&#x90E8;&#x7279;&#x5F81;&#x5339;&#x914D;&#x6D89;&#x53CA;&#x4EE5;&#x4E0B;&#x4E09;&#x4E2A;&#x6B65;&#x9AA4;&#xFF1A; &#x68C0;&#x6D4B;&#xFF1A;&#x627E;&#x5230;&#x4E00;&#x7EC4;&#x72EC;&#x7279;&#x7684;&#x5174;&#x8DA3;&#x70B9;&#xFF08; &#x1F43B; &#x672C;&#x6587;&#x7B97;&#x6CD5;&#x89E3;&#x51B3;&#x7684;&#x95EE;&#x9898;&#xFF09;&#xFF1B; &#x63CF;&#x8FF0;&#xFF1A;&#x63D0;&#x53D6;&#x6BCF;&#x4E2A;&#x5174;&#x8DA3;&#x70B9;&#x5468;&#x56F4;&#x7684;&#x7279;&#x5F81;&#x63CF;&#x8FF0;&#x7B26;&#x4F5C;&#x4E3A;&#x77E2;&#x91CF;&#xFF1B; &#x5339;&#x914D;&#xFF1A;&#x8BA1;&#x7B97;&#x7279;&#x5F81;&#x5411;&#x91CF;&#x4E4B;&#x95F4;&#x7684;&#x8DDD;&#x79BB;&#x4EE5;&#x627E;&#x5230;&#x5BF9;&#x5E94;&#x5173;&#x7CFB;&#x3002; &#x8FD9;&#x7BC7;&#x6587;&#x7AE0;&#x4E3B;&#x8981;&#x4ECB;&#x7ECD;&#x68C0;&#x6D4B;&#x5174;&#x8DA3;&#x70B9;&#x7684;&#x4E00;&#x4E2A;&#x7B80;&#x5355;&#x7B97;&#x6CD5;: Harris Corner Detector&#x3002;&#x4E3B;&#x8981;&#x5185;&#x5BB9;&#x5305;&#x62EC;&#x8BE5;&#x7B97;&#x6CD5;&#x7684;&#x539F;&#x7406;&#x4ECB;&#x7ECD;&#x548C;python&#x7684;&#x5B9E;&#x73B0;&#x65B9;&#x6CD5;&#x3002; Harris Corner Detector Principle and Implementation Harris Corner Detector &#x62D0;&#x89D2; (Corner) Harris&#x62D0;&#x89D2;&#x68C0;&#x6D4B;&#x7B97;&#x6CD5;&#xFF08;&#x4E5F;&#x79F0;&#x4E3A;Harris&#xFF06;Stephens&#x62D0;&#x89D2;&#x68C0;&#x6D4B;&#x5668;&#xFF09;&#x662F;&#x53EF;&#x7528;&#x7684;&#x6700;&#x7B80;&#x5355;&#x7684;&#x62D0;&#x89D2;&#x68C0;&#x6D4B;&#x5668;&#x4E4B;&#x4E00;&#x3002;&#x62D0;&#x89D2;&#x662F;&#x4E00;&#x4E2A;&#x70B9;&#xFF0C;&#x5176;&#x5C40;&#x90E8;&#x90BB;&#x57DF;&#x4F4D;&#x4E8E;&#x4E24;&#x4E2A;&#x4E3B;&#x8981;&#x4E14;&#x4E0D;&#x540C;&#x7684;&#x8FB9;&#x7F18;&#x65B9;&#x5411;&#x3002;&#x6362;&#x53E5;&#x8BDD;&#x8BF4;&#xFF0C;&#x4E00;&#x4E2A;&#x89D2;&#x53EF;&#x4EE5;&#x89E3;&#x91CA;&#x4E3A;&#x4E24;&#x4E2A;&#x8FB9;&#x7F18;&#x7684;&#x4EA4;&#x70B9;&#xFF0C;&#x5176;&#x4E2D;&#x8FB9;&#x7F18;&#x662F;&#x56FE;&#x50CF;&#x4EAE;&#x5EA6;&#x7684;&#x7A81;&#x7136;&#x53D8;&#x5316;&#x3002;&#x89D2;&#x662F;&#x56FE;&#x50CF;&#x4E2D;&#x7684;&#x91CD;&#x8981;&#x7279;&#x5F81;&#xFF0C;&#x901A;&#x5E38;&#x88AB;&#x79F0;&#x4E3A;&#x5174;&#x8DA3;&#x70B9;&#xFF0C;&#x5B83;&#x4EEC;&#x5BF9;&#x5E73;&#x79FB;&#xFF0C;&#x65CB;&#x8F6C;&#x548C;&#x7167;&#x660E;&#x4E0D;&#x53D8;&#x3002; &#x56E0;&#x6B64;&#xFF0C;&#x8BA9;&#x6211;&#x4EEC;&#x7406;&#x89E3;&#x4E3A;&#x4EC0;&#x4E48;&#x62D0;&#x89D2;&#x88AB;&#x8BA4;&#x4E3A;&#x662F;&#x66F4;&#x597D;&#x7684;&#x7279;&#x5F81;&#x6216;&#x5BF9;&#x7279;&#x5F81;&#x5757;&#x5339;&#x914D;&#x6709;&#x7528;&#x3002;&#x5728;&#x4E0A;&#x56FE;&#x4E2D;&#xFF0C;&#x5982;&#x679C;&#x6211;&#x4EEC;&#x9009;&#x53D6;&#x5E73;&#x5766;&#x533A;&#x57DF;&#xFF0C;&#x5219;&#x5728;&#x4EFB;&#x4F55;&#x65B9;&#x5411;&#x90FD;&#x4E0D;&#x4F1A;&#x89C2;&#x5BDF;&#x5230;&#x68AF;&#x5EA6;&#x53D8;&#x5316;&#x3002;&#x7C7B;&#x4F3C;&#x5730;&#xFF0C;&#x5728;&#x8FB9;&#x7F18;&#x533A;&#x57DF;&#x4E2D;&#xFF0C;&#x6CBF;&#x8FB9;&#x7F18;&#x65B9;&#x5411;&#x6CA1;&#x6709;&#x89C2;&#x5BDF;&#x5230;&#x68AF;&#x5EA6;&#x53D8;&#x5316;&#x3002;&#x56E0;&#x6B64;&#xFF0C;&#x5E73;&#x5766;&#x533A;&#x57DF;&#x548C;&#x8FB9;&#x7F18;&#x533A;&#x57DF;&#x90FD;&#x4E0D;&#x5229;&#x4E8E;&#x8272;&#x5757;&#x5339;&#x914D;&#xFF0C;&#x56E0;&#x4E3A;&#x5B83;&#x4EEC;&#x7684;&#x533A;&#x522B;&#x4E0D;&#x5927;&#xFF08;&#x6CBF;&#x8FB9;&#x7F18;&#x533A;&#x57DF;&#x4E2D;&#x7684;&#x8FB9;&#x7F18;&#x5B58;&#x5728;&#x8BB8;&#x591A;&#x76F8;&#x4F3C;&#x7684;&#x8272;&#x5757;&#xFF09;&#x3002;&#x5728;&#x62D0;&#x89D2;&#x533A;&#x57DF;&#xFF0C;&#x6211;&#x4EEC;&#x89C2;&#x5BDF;&#x5230;&#x5728;&#x6240;&#x6709;&#x65B9;&#x5411;&#x4E0A;&#x7684;&#x660E;&#x663E;&#x68AF;&#x5EA6;&#x53D8;&#x5316;&#x3002;&#x7531;&#x4E8E;&#x8FD9;&#x4E2A;&#x89D2;&#x88AB;&#x8BA4;&#x4E3A;&#x5BF9;&#x7279;&#x5F81;&#x5757;&#x5339;&#x914D;&#x6709;&#x76CA;&#xFF08;&#x5728;&#x4EFB;&#x4F55;&#x65B9;&#x5411;&#x4E0A;&#x79FB;&#x52A8;&#x7A97;&#x53E3;&#x90FD;&#x4F1A;&#x4EA7;&#x751F;&#x5F88;&#x5927;&#x7684;&#x5916;&#x89C2;&#x53D8;&#x5316;&#xFF09;&#xFF0C;&#x5E76;&#x4E14;&#x901A;&#x5E38;&#x5728;&#x89C6;&#x70B9;&#x53D8;&#x5316;&#x65F6;&#x66F4;&#x7A33;&#x5B9A;&#x3002; &#x62D0;&#x89D2;&#x68C0;&#x6D4B; (Corner Detection) &#x4ECE;&#x4E0A;&#x8FF0;&#x62D0;&#x89D2;&#x7684;&#x6982;&#x5FF5;&#xFF0C;&#x6211;&#x4EEC;&#x5F88;&#x5BB9;&#x6613;&#x53EF;&#x4EE5;&#x60F3;&#x5230;&#x7684;&#x662F;&#x8003;&#x8651;&#x56FE;&#x50CF;&#x4E2D;&#x6BCF;&#x4E2A;&#x50CF;&#x7D20;p&#x5468;&#x56F4;&#x7684;&#x5C0F;&#x7A97;&#x53E3;&#x3002;&#x8981;&#x786E;&#x5B9A;&#x6240;&#x6709;&#x6B64;&#x7C7B;&#x552F;&#x4E00;&#x7684;&#x50CF;&#x7D20;&#x7A97;&#x53E3;&#xFF0C;&#x53EF;&#x4EE5;&#x901A;&#x8FC7;&#x5728;&#x7ED9;&#x5B9A;&#x65B9;&#x5411;&#x4E0A;&#x5C06;&#x6BCF;&#x4E2A;&#x7A97;&#x53E3;&#x5C11;&#x91CF;&#x79FB;&#x52A8;&#x5E76;&#x6D4B;&#x91CF;&#x50CF;&#x7D20;&#x503C;&#x4E2D;&#x53D1;&#x751F;&#x7684;&#x53D8;&#x5316;&#x91CF;&#x6765;&#x5224;&#x65AD;&#x3002;&#x6545;&#x7B97;&#x6CD5;&#x7684;&#x57FA;&#x672C;&#x601D;&#x60F3;&#x662F;&#x627E;&#x5230;(u, v)&#x5728;&#x6240;&#x6709;&#x65B9;&#x5411;&#x4E0A;&#x7684;&#x4F4D;&#x79FB;&#x7684;&#x5F3A;&#x5EA6;&#x5DEE;&#x5F02;&#xFF0C;&#x8868;&#x793A;&#x5982;&#x4E0B;&#xFF1A; E(u,v)=&#x2211;x,yw(x,y)&#x23DF;window&#xA0;function[I(x+u,y+v)&#x23DF;shifted&#xA0;intensity&#x2212;I(x,y)&#x23DF;intensity]2E(u, v) = \\sum_{x,y} \\underbrace{w(x, y)}_{\\text{window function}} [ \\underbrace{I(x+u, y+v)}_{\\text{shifted intensity}} - \\underbrace{I(x, y)}_{\\text{intensity}}]^2 E(u,v)=x,y&#x2211;&#x200B;window&#xA0;functionw(x,y)&#x200B;&#x200B;[shifted&#xA0;intensityI(x+u,y+v)&#x200B;&#x200B;&#x2212;intensityI(x,y)&#x200B;&#x200B;]2 window function&#x53EF;&#x4EE5;&#x662F;&#x77E9;&#x5F62;&#x7A97;&#x53E3;&#xFF0C;&#x4E5F;&#x53EF;&#x4EE5;&#x662F;&#x9AD8;&#x65AF;&#x7A97;&#x53E3;&#xFF0C;&#x4E3A;(x, y)&#x5904;&#x7684;&#x50CF;&#x7D20;&#x8D4B;&#x4E88;&#x6743;&#x91CD;&#x3002;&#x6211;&#x4EEC;&#x9700;&#x8981;&#x6700;&#x5927;&#x5316;&#x6B64;&#x51FD;&#x6570;E(u,v)E(u, v)E(u,v)&#x8FDB;&#x884C;&#x62D0;&#x89D2;&#x68C0;&#x6D4B;&#xFF0C;&#x5373;&#x9700;&#x8981;&#x6700;&#x5927;&#x5316;&#x7B2C;&#x4E8C;&#x9879;&#x3002;&#x4F7F;&#x7528;&#x6CF0;&#x52D2;&#x5C55;&#x5F00;&#x5F0F;&#x8FDB;&#x4E00;&#x6B65;&#x8FD1;&#x4F3C;&#x4E0A;&#x8FF0;&#x65B9;&#x7A0B;&#x5F0F;&#xFF0C;&#x8BE5;&#x65B9;&#x7A0B;&#x5F0F;&#x7684;&#x6700;&#x7EC8;&#x516C;&#x5F0F;&#x4E3A;&#xFF1A; E(u,v)&#x2248;[uv]M[uv]E(u, v) \\approx \\begin{bmatrix} u &amp; v \\end{bmatrix} M \\begin{bmatrix} u \\\\ v \\end{bmatrix} E(u,v)&#x2248;[u&#x200B;v&#x200B;]M[uv&#x200B;] &#x5176;&#x4E2D;&#xFF1A; M=&#x2211;x,yw(x,y)[IxIxIxIyIxIyIyIy]M = \\sum_{x,y}w(x,y) \\begin{bmatrix} I_xI_x &amp; I_xI_y \\\\ I_xI_y &amp; I_yI_y \\end{bmatrix} M=x,y&#x2211;&#x200B;w(x,y)[Ix&#x200B;Ix&#x200B;Ix&#x200B;Iy&#x200B;&#x200B;Ix&#x200B;Iy&#x200B;Iy&#x200B;Iy&#x200B;&#x200B;] IxI_xIx&#x200B;&#x548C;IyI_yIy&#x200B;&#x5206;&#x522B;&#x662F;xxx&#x548C;yyy&#x65B9;&#x5411;&#x7684;&#x56FE;&#x50CF;&#x5BFC;&#x6570;&#x3002;&#x53EF;&#x4EE5;&#x4F7F;&#x7528;sobel&#x5185;&#x6838;&#x6765;&#x8BA1;&#x7B97;&#x5BFC;&#x6570;&#x3002; &#x8BF7;&#x8BB0;&#x4F4F;&#xFF0C;&#x6211;&#x4EEC;&#x5E0C;&#x671B;&#x5DEE;&#x5F97;&#x5E73;&#x65B9;&#x548C;&#xFF08;&#x7B2C;&#x4E8C;&#x9879;&#xFF09;&#x5728;&#x6240;&#x6709;&#x516B;&#x4E2A;&#x65B9;&#x5411;&#x4E0A;&#x7684;&#x504F;&#x79FB;&#x90FD;&#x8F83;&#x5927;&#x3002;&#x6216;&#x8005;&#x6240;&#x6709;&#x65B9;&#x5411;&#x800C;&#x8A00;&#xFF0C;&#x7B2C;&#x4E8C;&#x9879;&#x90FD;&#x5E94;&#x8F83;&#x5C0F;&#x3002;&#x901A;&#x8FC7;&#x6C42;&#x89E3;M&#x7684;&#x7279;&#x5F81;&#x5411;&#x91CF;&#xFF0C;&#x6211;&#x4EEC;&#x53EF;&#x4EE5;&#x83B7;&#x5F97;&#x7B2C;&#x4E8C;&#x9879;&#x6700;&#x5927;&#x548C;&#x6700;&#x5C0F;&#x589E;&#x52A0;&#x7684;&#x65B9;&#x5411;&#x3002;&#x76F8;&#x5E94;&#x7684;&#x7279;&#x5F81;&#x503C;&#x8868;&#x793A;&#x589E;&#x52A0;&#x7684;&#x5B9E;&#x9645;&#x503C;&#x3002;&#x4E3A;&#x6BCF;&#x4E2A;&#x7A97;&#x53E3;&#x8BA1;&#x7B97;&#x5F97;&#x5206;R&#xFF1A; R=det&#x2061;M&#x2212;k(trace&#xA0;M)2det&#x2061;M=&#x3BB;1&#x3BB;2trace&#xA0;M=&#x3BB;1+&#x3BB;2R = \\det M - k(trace \\space M)^2 \\\\ \\det M = \\lambda_1 \\lambda_2 \\\\ trace \\space M = \\lambda_1 + \\lambda_2 R=detM&#x2212;k(trace&#xA0;M)2detM=&#x3BB;1&#x200B;&#x3BB;2&#x200B;trace&#xA0;M=&#x3BB;1&#x200B;+&#x3BB;2&#x200B; &#x5176;&#x4E2D;&#x3BB;1\\lambda_1&#x3BB;1&#x200B;&#x548C;&#x3BB;2\\lambda_2&#x3BB;2&#x200B;&#x4E3A;MMM&#x7684;&#x7279;&#x5F81;&#x503C;&#x3002;&#x56E0;&#x6B64;&#xFF0C;&#x8FD9;&#x4E9B;&#x7279;&#x5F81;&#x503C;&#x7684;&#x503C;&#x51B3;&#x5B9A;&#x4E86;&#x533A;&#x57DF;&#x662F;&#x89D2;&#xFF0C;&#x8FB9;&#x8FD8;&#x662F;&#x5E73;&#x9762;&#xFF1A; &#x5F53;&#x2223;R&#x2223;|R|&#x2223;R&#x2223;&#x8F83;&#x5C0F;&#xFF0C;&#x5373;&#x3BB;1\\lambda_1&#x3BB;1&#x200B;&#x548C;&#x3BB;2\\lambda_2&#x3BB;2&#x200B;&#x8F83;&#x5C0F;&#xFF0C;&#x8BE5;&#x533A;&#x57DF;&#x5E73;&#x5766;&#xFF1B; &#x5F53;R&lt;0R&lt;0R&lt;0&#x65F6;&#xFF0C;&#x5373;&#x3BB;1&gt;&gt;&#x3BB;2\\lambda_1 &gt;&gt; \\lambda_2&#x3BB;1&#x200B;&gt;&gt;&#x3BB;2&#x200B;&#x6216;&#x3BB;1&lt;&lt;&#x3BB;2\\lambda_1 &lt;&lt; \\lambda_2&#x3BB;1&#x200B;&lt;&lt;&#x3BB;2&#x200B;&#xFF0C;&#x8BE5;&#x533A;&#x57DF;&#x4E3A;&#x8FB9;&#xFF1B; &#x5F53;R&#x5927;&#x65F6;&#xFF0C;&#x5373;&#x3BB;1\\lambda_1&#x3BB;1&#x200B;&#x548C;&#x3BB;2\\lambda_2&#x3BB;2&#x200B;&#x5927;&#xFF0C;&#x4E14;&#x3BB;1&#xA0;&#x3BB;2\\lambda_1 ~ \\lambda_2&#x3BB;1&#x200B;&#xA0;&#x3BB;2&#x200B;&#x65F6;&#xFF0C;&#x8BE5;&#x533A;&#x57DF;&#x662F;&#x89D2;&#x3002; &#x7B97;&#x6CD5;&#x7684;&#x8FC7;&#x7A0B; &#x5C06;&#x5F69;&#x8272;&#x56FE;&#x8F6C;&#x4E3A;&#x7070;&#x5EA6;&#x56FE;&#xFF1B; &#x7A7A;&#x95F4;&#x5BFC;&#x6570;&#x8BA1;&#x7B97;&#xFF1B; &#x7ED3;&#x6784;&#x5F20;&#x91CF;&#x8BBE;&#x7F6E;&#xFF1B; &#x8BA1;&#x7B97;Harris&#x5206;&#x6570;&#xFF1B; &#x68C0;&#x6D4B;&#x62D0;&#x89D2;&#xFF1B; Implementation &#x5C06;&#x5F69;&#x8272;&#x56FE;&#x8F6C;&#x4E3A;&#x7070;&#x5EA6;&#x56FE; from skimage import io, img_as_float32 from skimage.color import rgb2gray image_color = img_as_float32(io.imread(&apos;image_file_path&apos;)) image = rgb2gray(image_color) &#x7A7A;&#x95F4;&#x5BFC;&#x6570;&#x8BA1;&#x7B97; import cv2 # &#x8BA1;&#x7B97;Ix, Iy Ix = cv2.Sobel(image, cv2.CV_64F, 1, 0, ksize=5) Iy = cv2.Sobel(image, cv2.CV_64F, 0, 1, ksize=5) &#x7ED3;&#x6784;&#x5F20;&#x91CF;&#x8BBE;&#x7F6E; from scipy.ndimage import gaussian_filter # &#x8BA1;&#x7B97;(Ix)^2, (Iy)^2, Ixy Ixx = gaussian_filter(Ix ** 2, sigma=1) Ixy = gaussian_filter(Iy * Ix, sigma=1) Iyy = gaussian_filter(Iy ** 2, sigma=1) &#x8BA1;&#x7B97;Harris&#x5206;&#x6570; &#x8FD9;&#x91CC;&#x6709;&#x7528;&#x5230;&#x53D8;&#x91CF;alpha&#xFF0C;alpha&#x662F;&#x5C06;&#x89D2;&#x70B9;&#x4E0E;&#x8FB9;&#x7F18;&#x5206;&#x5F00;&#x7684;&#x7075;&#x654F;&#x5EA6;&#x56E0;&#x5B50;&#xFF0C;&#x901A;&#x5E38;&#x4E3A;&#x63A5;&#x8FD1;&#x96F6;&#x7684;&#x503C;&#xFF0C;&#x8FD9;&#x91CC;&#x6211;&#x628A;alpha&#x8BBE;&#x7F6E;&#x4E3A;0.04&#x3002;alpha&#x7684;&#x503C;&#x8F83;&#x5C0F;&#x4F1A;&#x66F4;&#x5BB9;&#x6613;&#x68C0;&#x6D4B;&#x5230;&#x5C16;&#x89D2;&#x3002;harris_score&#x662F;&#x56FE;&#x50CF;&#x4E2D;&#x6BCF;&#x884C;&#x5CF0;&#x503C;&#x7684;&#x6570;&#x7EC4;&#x3002;&#x53EF;&#x4EE5;&#x4F7F;&#x7528;&#x8FD9;&#x4E9B;&#x5CF0;&#x503C;&#x6765;&#x533A;&#x5206;&#x62D0;&#x89D2;&#x548C;&#x8FB9;&#x3002; # &#x8BA1;&#x7B97;&#x884C;&#x5217;&#x5F0F; A &#x548C; trace A detA = Ixx * Iyy - Ixy ** 2 traceA = Ixx + Iyy alpha = 0.04 # &#x8BA1;&#x7B97;Harris&apos;s score harris_score = detA - alpha * traceA ** 2 &#x68C0;&#x6D4B;&#x62D0;&#x89D2; &#x5728;&#x68C0;&#x6D4B;&#x62D0;&#x89D2;&#x7684;&#x65F6;&#x5019;&#x6211;&#x662F;&#x76F4;&#x63A5;&#x7528;&#x7684;peak_local_max&#x51FD;&#x6570;&#x3002;&#x6211;&#x5728;&#x8FD9;&#x91CC;&#x8BBE;&#x7F6E;&#x4E86;&#x4E00;&#x4E2A;&#x53C2;&#x6570;&#xFF1A;threshold_rel&#xFF0C;&#x8FD9;&#x4E2A;&#x503C;&#x662F;&#x7528;&#x6765;&#x68C0;&#x6D4B;&#x5CF0;&#x65F6;&#xFF0C;&#x5CF0;&#x7684;&#x6700;&#x5C0F;&#x5F3A;&#x5EA6;&#xFF08;max(image)&#x2217;thresholdrelmax(image)*threshold_relmax(image)&#x2217;thresholdr&#x200B;el&#xFF09;&#x3002;&#x66F4;&#x6539;&#x8FD9;&#x4E2A;&#x53C2;&#x6570;&#x4F1A;&#x5F71;&#x54CD;&#x62D0;&#x89D2;&#x68C0;&#x6D4B;&#x6548;&#x679C;&#x3002;&#x5177;&#x4F53;&#x53EF;&#x4EE5;&#x53C2;&#x8003;&#x6587;&#x6863;&#x3002; &#x4F7F;&#x7528; peak_local_max &#x51FD;&#x6570; from skimage.feature import peak_local_max # find corners(&#x8FD9;&#x91CC;&#x8BF7;&#x5FFD;&#x89C6;&#x6CE8;&#x91CA;) # 0.06 =&gt; 65%(notre_dame)|23%(mt_rushmore)|0%(e_gaudi) # 0.05 =&gt;notre_dame&#xFF1A; 73%(0.8)/72%(0.7)|mt_rushmore&#xFF1A;26%((ratio&#xFF1A;0.8))/66%(ratio&#xFF1A;0.7)|0%(e_gaudi) # 0.04 =&gt;notre:75%(0.8)/83%(0.7)/75%(0.6)/83%(0.6,min_dis=5)/66%(0.7,min5)61%(0.8)|50%&#xFF08;0.7&#xFF09;/18%(0.8)| # 0.03 =&gt;67%(0.8)/78%(0.7) corners = peak_local_max(harris_score, threshold_rel=0.04) &#x901A;&#x8FC7;R&#x5224;&#x65AD; &#x8FD9;&#x91CC;&#x4E5F;&#x53EF;&#x4EE5;&#x901A;&#x8FC7;&#x4E0A;&#x8FF0;&#x539F;&#x7406;&#x4E2D;&#x7684;R&#x6765;&#x5224;&#x65AD;&#xFF0C;&#x4F46;&#x662F;&#x6548;&#x679C;&#x4E0D;&#x662F;&#x5F88;&#x597D;&#xFF0C;&#x5E94;&#x8BE5;&#x662F;&#x9608;&#x503C;&#x8BBE;&#x7F6E;&#x548C;&#x5CF0;&#x503C;&#x9009;&#x53D6;&#x8DDD;&#x79BB;&#x8BBE;&#x7F6E;&#x7684;&#x95EE;&#x9898;&#xFF08;&#x6211;&#x8FD9;&#x91CC;&#x6CA1;&#x6709;&#x8BBE;&#x7F6E;&#x5CF0;&#x503C;&#x8DDD;&#x79BB;&#xFF09;&#x3002;&#x5177;&#x4F53;&#x5B9E;&#x73B0;&#x5982;&#x4E0B;&#xFF1A; thresh = 0.04 * harris_score.max() for r_i, score in enumerate(harris_score): for c_i, s in enumerate(score): if s &gt; thresh: # corner corners.append([r_i, c_i]) &#x5174;&#x8DA3;&#x70B9;&#x68C0;&#x6D4B;&#x7ED3;&#x679C; &#x4F7F;&#x7528; peak_local_max &#x51FD;&#x6570; &#x901A;&#x8FC7;R&#x5224;&#x65AD; &#x603B;&#x7ED3; &#x6587;&#x7AE0;&#x5230;&#x8FD9;&#x5C31;&#x7ED3;&#x675F;&#x4E86;&#xFF0C;&#x4E4B;&#x540E;&#x8FD8;&#x4F1A;&#x6709;&#x5174;&#x8DA3;&#x70B9;&#x63CF;&#x8FF0; (SIFT) &#x548C;&#x7279;&#x5F81;&#x5339;&#x914D; (NNDR&#xFF09;&#x7B49;&#x540E;&#x7EED;&#x6587;&#x7AE0;&#x3002;&#x672C;&#x6587;&#x6D89;&#x53CA;&#x7684;&#x7B97;&#x6CD5; (Harris Corner Detector) &#x662F;&#x6BD4;&#x8F83;&#x57FA;&#x7840;&#x6BD4;&#x8F83;&#x7B80;&#x5355;&#x7684;&#x5174;&#x8DA3;&#x70B9;&#x68C0;&#x6D4B;&#x7B97;&#x6CD5;&#x3002;&#x4F46;&#x662F;&#x901A;&#x8FC7;&#x8FD9;&#x6B21;&#x5B66;&#x4E60;&#xFF0C;&#x6211;&#x4E0D;&#x4EC5;&#x5B66;&#x5230;&#x4E86;&#x8BE5;&#x7B97;&#x6CD5;&#x7684;&#x539F;&#x7406;&#xFF0C;&#x66F4;&#x91CD;&#x8981;&#x7684;&#x662F;&#x6211;&#x5B66;&#x4E60;&#x5230;&#x4E86;&#x4F5C;&#x8005;&#x7684;&#x601D;&#x7EF4;&#x3002;&#x5B66;&#x4E60;&#x5C31;&#x662F;&#x8FD9;&#x6837;&#x4E00;&#x70B9;&#x4E00;&#x70B9;&#x79EF;&#x7D2F;&#x5427;&#x3002;&#x5982;&#x679C;&#x4EE5;&#x540E;&#x9047;&#x5230;&#x6BD4;&#x8F83;&#x56F0;&#x96BE;&#x7684;&#x95EE;&#x9898;&#xFF0C;&#x6216;&#x8BB8;&#x8FD9;&#x4E2A;&#x7B80;&#x5355;&#x7B97;&#x6CD5;&#x7684;&#x601D;&#x8DEF;&#x548C;&#x4F5C;&#x8005;&#x7684;&#x601D;&#x7EF4;&#x5C31;&#x80FD;&#x5E26;&#x7ED9;&#x6211;&#x5F88;&#x591A;&#x7075;&#x611F;&#x3002; Reference A COMBINED CORNER AND EDGE DETECTOR Harris Corner Detector Introduction to Harris Corner Detector Harris Corner Detector implementation in python","categories":[{"name":"Technology","slug":"Technology","permalink":"https://littlemeemoon.cn/categories/Technology/"},{"name":"CV-Algorithm","slug":"Technology/CV-Algorithm","permalink":"https://littlemeemoon.cn/categories/Technology/CV-Algorithm/"}],"tags":[{"name":"Harris Corner Detector","slug":"Harris-Corner-Detector","permalink":"https://littlemeemoon.cn/tags/Harris-Corner-Detector/"},{"name":"Computer vision","slug":"Computer-vision","permalink":"https://littlemeemoon.cn/tags/Computer-vision/"},{"name":"Algorithm Implementation","slug":"Algorithm-Implementation","permalink":"https://littlemeemoon.cn/tags/Algorithm-Implementation/"},{"name":"Algorithm Principle","slug":"Algorithm-Principle","permalink":"https://littlemeemoon.cn/tags/Algorithm-Principle/"}],"keywords":[{"name":"Technology","slug":"Technology","permalink":"https://littlemeemoon.cn/categories/Technology/"},{"name":"CV-Algorithm","slug":"Technology/CV-Algorithm","permalink":"https://littlemeemoon.cn/categories/Technology/CV-Algorithm/"}]},{"title":"Leetcode Note in May 2020 | part 2 | day 11-20","slug":"Technology/Coding/Leetcode/Leetcode-Note-in-May-2020-part-2-day-11-20","date":"2020-05-20T06:07:28.000Z","updated":"2020-06-04T04:19:01.759Z","comments":true,"path":"2020/05/20/Technology/Coding/Leetcode/Leetcode-Note-in-May-2020-part-2-day-11-20/","link":"","permalink":"https://littlemeemoon.cn/2020/05/20/Technology/Coding/Leetcode/Leetcode-Note-in-May-2020-part-2-day-11-20/","excerpt":"","text":"&#x5199;&#x5728;&#x524D;&#x9762;&#x7684;&#x8BDD; &#x4E94;&#x6708;&#x7B2C;&#x4E8C;&#x6CE2;&#x6765;&#x4E86;~ &#x575A;&#x6301;&#x8BB0;&#x5F55;&#xFF0C;&#x575A;&#x6301;&#x5B66;&#x4E60;&#xFF0C;&#x4E3A;&#x81EA;&#x5DF1;&#x52A0;&#x6CB9;&#x6253;&#x6C14;&#xFF01;&#x9898;&#x5916;&#x8BDD;&#xFF0C;&#x8BB0;&#x5F55;&#x4E00;&#x4E0B;&#x8FD9;&#x4E2A;&#x6708;&#x7684;&#x611F;&#x53D7;&#x3002;&#x8FD9;&#x4E2A;&#x6708;&#x6211;&#x7684;&#x7814;&#x7A76;&#x751F;&#x9636;&#x6BB5;&#x7684;&#x8BFE;&#x7A0B;&#x57FA;&#x672C;&#x4E0A;&#x90FD;&#x7ED3;&#x8BFE;&#x4E86;&#xFF0C;&#x56E0;&#x4E3A;&#x75AB;&#x60C5;&#x539F;&#x56E0;&#xFF0C;&#x73B0;&#x5728;&#x8FD8;&#x6CA1;&#x5B89;&#x6392;&#x8003;&#x8BD5;&#x3002;&#x4F46;&#x662F;&#x540C;&#x5B66;&#x4EEC;&#x5DF2;&#x7ECF;&#x5728;&#x9646;&#x9646;&#x7EED;&#x7EED;&#x8FD4;&#x6821;&#x4E86;&#xFF0C;&#x6211;&#x4F30;&#x8BA1;&#x8003;&#x8BD5;&#x5E94;&#x8BE5;&#x5728;6&#x6708;&#x521D;&#x5230;6&#x6708;&#x4E2D;&#x65EC;&#x3002;&#x8FD9;&#x4E2A;&#x6708;&#x8FD8;&#x5269;&#x4E0B;10&#x5929;&#xFF0C;&#x5BF9;&#x54E6;&#xFF0C;&#x4ECA;&#x5929;&#x662F;&#x4E2A;&#x7279;&#x6B8A;&#x7684;&#x65E5;&#x5B50;&#xFF0C;2020520&#xFF0C;&#x522B;&#x4EBA;&#x90FD;&#x5728;&#x7EA6;&#x4F1A;&#xFF0C;&#x6211;&#x5B9E;&#x5728;&#x662F;&#x592A;&#x7231;&#x5B66;&#x4E60;&#x4E86;&#xFF0C;&#x54C8;&#x54C8;&#x54C8;&#x54C8;&#x54C8;~&#xFF08;&#x6211;&#x4E5F;&#x4E0D;&#x60F3;&#x7684;o(&#x2565;&#xFE4F;&#x2565;)o&#x3002; &#x4E0D;&#x626F;&#x8FDC;&#x4E86;&#xFF0C;&#x6211;&#x60F3;&#x7684;&#x662F;&#x8FD9;&#x4E2A;&#x6708;&#x5269;&#x4E0B;&#x7684;10&#x5929;&#xFF0C;&#x628A;&#x5404;&#x95E8;&#x8BFE;&#x7A0B;&#x7684;&#x5404;&#x79CD;&#x62A5;&#x544A;&#x548C;&#x8BBE;&#x8BA1;&#x505A;&#x5B8C;&#x3002;&#x7136;&#x540E;&#x516D;&#x6708;&#x8BE5;&#x51C6;&#x5907;&#x8003;&#x8BD5;&#x5C31;&#x51C6;&#x5907;&#x8003;&#x8BD5;&#xFF0C;&#x8BE5;&#x53C2;&#x52A0;&#x6BD4;&#x8D5B;&#x5C31;&#x53C2;&#x52A0;&#x6BD4;&#x8D5B;&#x3002;&#x516D;&#x6708;&#x7ED3;&#x675F;&#x5E94;&#x8BE5;&#x662F;&#x8981;&#x53BB;&#x897F;&#x95E8;&#x5B50;&#x5B9E;&#x4E60;&#x7684;&#xFF0C;&#x6211;&#x4E5F;&#x60F3;&#x901A;&#x4E86;&#xFF0C;&#x7814;&#x4E8C;&#x5C31;&#x5728;&#x897F;&#x95E8;&#x5B50;&#x597D;&#x597D;&#x5B9E;&#x4E60;&#xFF0C;&#x4E00;&#x8FB9;&#x5B9E;&#x4E60;&#x4E00;&#x8FB9;&#x79EF;&#x7D2F;&#x3002;&#x7B49;&#x7814;&#x4E8C;&#x4E0B;&#x7684;&#x4E0B;&#x73ED;&#x5B66;&#x671F;&#x53EF;&#x4EE5;&#x5F00;&#x59CB;&#x53BB;&#x6295;&#x4E00;&#x4E9B;&#x81EA;&#x5DF1;&#x60F3;&#x505A;&#x7684;&#x5B9E;&#x4E60;&#x3002;&#x597D;&#x50CF;&#x771F;&#x7684;&#x626F;&#x8FDC;&#x4E86;&#xFF0C;&#x540E;&#x9762;&#x518D;&#x8BB0;&#x5F55;&#x5427;&#x3002;&#x5662;&#x5BF9;&#xFF0C;&#x4E4B;&#x540E;&#x6253;&#x7B97;&#x8FD9;&#x4E00;&#x7CFB;&#x5217;&#x7684;&#x6587;&#x7AE0;&#x4F1A;&#x9488;&#x5BF9;&#x6027;&#x7684;&#x66F4;&#x65B0;&#x5355;&#x4E2A;&#x9898;&#x6216;&#x8005;&#x540C;&#x7C7B;&#x578B;&#x7684;&#x9898;&#xFF0C;&#x56E0;&#x4E3A;&#x8FD9;&#x6837;&#x65B9;&#x4FBF;&#x603B;&#x7ED3;&#x548C;&#x68C0;&#x7D22;&#xFF0C;&#x5177;&#x4F53;&#x5F62;&#x5F0F;&#x8FD8;&#x6CA1;&#x5B9A;&#x3002;&#x1F44C;&#x8A00;&#x5F52;&#x6B63;&#x4F20;&#xFF0C;&#x4E0A;&#x83DC;~ Remove K Digits Given a non-negative integer num represented as a string, remove k digits from the number so that the new number is the smallest possible. Note: The length of num is less than 10002 and will be &#x2265; k. The given num does not contain any leading zero. Example 1: Input: num = &quot;1432219&quot;, k = 3 Output: &quot;1219&quot; Explanation: Remove the three digits 4, 3, and 2 to form the new number 1219 which is the smallest. Example 2: Input: num = &quot;10200&quot;, k = 1 Output: &quot;200&quot; Explanation: Remove the leading 1 and the number is 200. Note that the output must not contain leading zeroes. Example 3: Input: num = &quot;10&quot;, k = 2 Output: &quot;0&quot; Explanation: Remove all the digits from the number and it is left with nothing which is 0. Solutions Mine(&#x8D2A;&#x5FC3;&#x7B97;&#x6CD5;) &#x505A;&#x4E86;&#x6709;&#x70B9;&#x4E45;&#x4E86;&#xFF0C;&#x8FD8;&#x6709;&#x70B9;&#x60F3;&#x4E0D;&#x8D77;&#x6765;&#x4E86;&#xFF0C;&#x4EE5;&#x540E;&#x8FD8;&#x662F;&#x505A;&#x4E00;&#x9053;&#x8BB0;&#x5F55;&#x4E00;&#x9053;&#x6BD4;&#x8F83;&#x597D;&#x3002;&#x8FD9;&#x9898;&#x7684;&#x5927;&#x6982;&#x610F;&#x601D;&#x662F;&#xFF1A;&#x4ECE;&#x7ED9;&#x5B9A;&#x7684;&#x6570;&#x5B57;&#x5B57;&#x7B26;&#x4E32;&#x4E2D;&#xFF0C;&#x5220;&#x9664;k&#x4E2A;&#x6570;&#x5B57;&#xFF0C;&#x4F7F;&#x5F97;&#x5220;&#x9664;&#x540E;&#x7684;&#x6570;&#x5B57;&#x6700;&#x5C0F;&#x3002;&#x8FD9;&#x4E2A;&#x9898;&#x6211;&#x81EA;&#x5DF1;&#x505A;&#x7684;&#x65F6;&#x5019;&#x662F;&#x601D;&#x8DEF;&#x662F;&#xFF0C;&#x4ECE;&#x5DE6;&#x5230;&#x53F3;&#x6BCF;&#x6B21;&#x9009;&#x53D6;&#x6700;&#x5C0F;&#x7684;&#x6570;&#x5B57;&#xFF0C;&#x4F5C;&#x4E3A;&#x5220;&#x9664;k&#x4E2A;&#x6570;&#x5B57;&#x540E;&#x7684;&#x5BF9;&#x5E94;&#x4F4D;&#x7684;&#x6570;&#x5B57;&#x3002;&#x611F;&#x89C9;&#x8BF4;&#x7684;&#x4E0D;&#x662F;&#x5F88;&#x6E05;&#x695A;&#x3002;&#x53EF;&#x4EE5;&#x7B80;&#x5355;&#x7684;&#x770B;&#x4E00;&#x4E2A;&#x4F8B;&#x5B50;&#xFF1A; num = &apos;1432219&apos;, k = 3&#xFF0C;&#x610F;&#x5473;&#x7740;&#x8981;&#x4ECE;num&#x4E2D;&#x5220;&#x9664;3&#x4E2A;&#x6570;&#x5B57;&#xFF0C;&#x4F7F;&#x5269;&#x4E0B;&#x7684;4&#x4E2A;&#x6570;&#x5B57;&#x7EC4;&#x6210;&#x7684;&#x6570;&#x6700;&#x5C0F;&#xFF0C;&#x4E14;&#x6570;&#x5B57;&#x7684;&#x76F8;&#x5BF9;&#x4F4D;&#x7F6E;&#x4E0D;&#x53EF;&#x4EE5;&#x6539;&#x53D8;&#x3002;&#x5220;&#x9664;3&#x4E2A;&#x6570;&#x5B57;&#x8FD8;&#x5269;4&#x4E2A;&#xFF0C;&#x90A3;&#x4E48;&#x5047;&#x8BBE;&#x5269;&#x4F59;&#x56DB;&#x4E2A;&#x6570;&#x5B57;&#x4E3A;&#xFF1A;ABCD&#xFF0C; &#x90A3;&#x4E48;A&#x53EA;&#x80FD;&#x4ECE;&apos;1432&apos;&#x4E2D;&#x9009;&#x4E00;&#x4E2A;&#xFF0C;&#x4E3A;&#x4E86;&#x4FDD;&#x8BC1;&#x6700;&#x540E;&#x7684;&#x6570;&#x6700;&#x5C0F;&#xFF0C;&#x6240;&#x4EE5;&#x8FD9;&#x91CC;&#x9009;&#x6700;&#x5C0F;&#x7684;&#xFF1A;1&#x3002;&#x540C;&#x7406;B&#x53EA;&#x80FD;&#x4ECE;&apos;4322&apos;&#xFF08;1&#x5DF2;&#x7ECF;&#x88AB;&#x9009;&#x4E86;&#xFF09;&#x4E2D;&#x9009;&#x6700;&#x5C0F;&#x7684;&#xFF1A;2&#xFF0C;C&#xFF1A;1&#xFF0C;D&#xFF1A;9&#x3002;&#x6240;&#x4EE5;&#x6700;&#x540E;&#x7684;Output&#x5E94;&#x8BE5;&#x662F;&#xFF1A;&apos;1219&apos;&#x3002; &#x601D;&#x8DEF;&#x5C31;&#x662F;&#x8FD9;&#x6837;&#xFF0C;&#x5177;&#x4F53;&#x770B;&#x770B;&#x4EE3;&#x7801;&#x5B9E;&#x73B0;&#x3002; class Solution: def removeKdigits(self, num: str, k: int) -&gt; str: n = len(num) if n&lt;= k : return &apos;0&apos; t = s = 0 res = &apos;&apos; first_none_zero = False for e in range(k, n): tmp = num[t] # &#x4ECE;&#x5DE6;&#x5230;&#x53F3;&#xFF0C;&#x627E;&#x6700;&#x5C0F;&#x6570;&#x5B57;&#x5BF9;&#x5E94;&#x4F4D;&#xFF08;&#x6CE8;&#x610F;&#x5728;&#x539F;&#x6570;&#x5B57;&#x5B57;&#x7B26;&#x4E32;&#x7684;&#x53EF;&#x9009;&#x533A;&#x95F4;&#xFF09;&#x7684;&#x6700;&#x5C0F;&#x6570;&#x5B57; for i, n in enumerate(num[s:e+1]): if n &lt; tmp: t, tmp = s+i, n t += 1 s = t if tmp != &apos;0&apos; : first_none_zero = True if first_none_zero: res += tmp return res or &apos;0&apos; &#x4F7F;&#x7528;&#x6B63;&#x5219;&#x8868;&#x8FBE;&#x5F0F; &#x6211;&#x5728;&#x505A;&#x5B8C;&#x4E4B;&#x540E;&#x53BB;&#x770B;&#x4E86;&#x4E00;&#x4E0B;&#x5176;&#x4ED6;&#x5C0F;&#x4F19;&#x4F34;&#x7684;&#x8BA8;&#x8BBA;&#xFF0C;&#x6211;&#x53D1;&#x73B0;&#x5927;&#x90E8;&#x5206;&#x5C0F;&#x4F19;&#x4F34;&#x7684;&#x601D;&#x8DEF;&#x90FD;&#x548C;&#x6211;&#x90A3;&#x4E2A;&#x5927;&#x540C;&#x5C0F;&#x5F02;&#x3002;&#x4E5F;&#x9047;&#x5230;&#x4E86;&#x5176;&#x4ED6;&#x7684;&#x89E3;&#x51B3;&#x65B9;&#x6848;&#xFF0C;&#x5C31;&#x662F;&#x7528;&#x6B63;&#x5219;&#x8868;&#x8FBE;&#x5F0F;&#xFF0C;&#x6211;&#x89C9;&#x5F97;&#x8FD9;&#x4E2A;&#x633A;&#x5389;&#x5BB3;&#x7684;&#xFF0C;&#x6211;&#x4E5F;&#x6CA1;&#x60F3;&#x5230;&#xFF0C;&#x5B66;&#x4E60;&#x4E00;&#x4E0B;&#xFF0C;&#x5177;&#x4F53;&#x770B;&#x4EE3;&#x7801;&#xFF0C;&#x5982;&#x679C;&#x770B;&#x4E0D;&#x61C2;&#x7684;&#x8BDD;&#x53EF;&#x80FD;&#x8981;&#x53BB;&#x770B;&#x770B;&#x6B63;&#x5219;&#x8868;&#x8FBE;&#x5F0F;&#x7684;&#x76F8;&#x5173;&#x5185;&#x5BB9;&#x3002; class Solution: def removeKdigits(self, num: str, k: int) -&gt; str: sub = re.compile(&apos;1[0]|2[01]|3[0-2]|4[0-3]|5[0-4]|6[0-5]|7[0-6]|8[0-7]|9[0-8]|.$&apos;).sub for _ in range(k): num = sub(lambda m: m.group()[1:], num, 1) return num.lstrip(&apos;0&apos;) or &apos;0&apos; &#x53C2;&#x8003; StefanPochmann: Short Python, one O(n) and one RegEx Online Stock Span Write a class StockSpanner which collects daily price quotes for some stock, and returns the span of that stock&apos;s price for the current day. The span of the stock&apos;s price today is defined as the maximum number of consecutive days (starting from today and going backwards) for which the price of the stock was less than or equal to today&apos;s price. For example, if the price of a stock over the next 7 days were [100, 80, 60, 70, 60, 75, 85], then the stock spans would be [1, 1, 1, 2, 1, 4, 6]. Example 1: Input: [&quot;StockSpanner&quot;,&quot;next&quot;,&quot;next&quot;,&quot;next&quot;,&quot;next&quot;,&quot;next&quot;,&quot;next&quot;,&quot;next&quot;], [[],[100],[80],[60],[70],[60],[75],[85]] Output: [null,1,1,1,2,1,4,6] Explanation: First, S = StockSpanner() is initialized. Then: S.next(100) is called and returns 1, S.next(80) is called and returns 1, S.next(60) is called and returns 1, S.next(70) is called and returns 2, S.next(60) is called and returns 1, S.next(75) is called and returns 4, S.next(85) is called and returns 6. Note that (for example) S.next(75) returned 4, because the last 4 prices (including today&apos;s price of 75) were less than or equal to today&apos;s price. Solution &#x8FD9;&#x4E2A;&#x9898;&#x86EE;&#x6709;&#x610F;&#x601D;&#x7684;&#xFF0C;&#x9898;&#x76EE;&#x5927;&#x610F;&#x662F;&#xFF1A;&#x5BFB;&#x627E;&#x80A1;&#x7968;&#x4EF7;&#x683C;&#x7684;&#x8DE8;&#x5EA6;&#xFF0C;&#x4E5F;&#x5C31;&#x662F;&#x627E;&#x4E4B;&#x524D;&#xFF08;&#x5305;&#x62EC;&#x5F53;&#x524D;&#x4EF7;&#x683C;&#xFF09;&#x6709;&#x8FDE;&#x7EED;&#x6709;&#x591A;&#x5C11;&#x5929;&#x7684;&#x4EF7;&#x683C;&#x4E0D;&#x9AD8;&#x4E8E;&#x4ECA;&#x5929;&#x7684;&#x4EF7;&#x683C;&#x3002;&#x6211;&#x611F;&#x89C9;&#x6211;&#x4E0D;&#x4F1A;&#x8BF4;&#x8BDD;&#x4E86;&#xFF0C;&#x54C8;&#x54C8;&#x54C8;&#xFF0C;&#x5176;&#x5B9E;&#x770B;&#x4E0A;&#x9762;&#x90A3;&#x4E2A;&#x4F8B;&#x5B50;&#x5C31;&#x5F88;&#x6E05;&#x695A;&#x4E86;&#x3002;&#x8FD9;&#x91CC;&#x6211;&#x7684;&#x601D;&#x8DEF;&#x4E5F;&#x662F;&#x5E38;&#x89C4;&#x601D;&#x8DEF;&#xFF0C;&#x5C31;&#x662F;&#x6309;&#x7167;&#x9898;&#x610F;&#x6BCF;&#x5929;&#x65B0;&#x4EF7;&#x683C;&#x53C2;&#x4EA7;&#x751F;&#x7684;&#x65F6;&#x5019;&#xFF0C;&#x8BB0;&#x5F55;&#x5F53;&#x524D;&#x4EF7;&#x683C;&#x7684;&#x8DE8;&#x5EA6;&#x3002;&#x7136;&#x540E;&#x6709;&#x4E00;&#x4E2A;&#x4F18;&#x5316;&#x65B9;&#x6848;&#xFF0C;&#x6211;&#x4EEC;&#x4E0D;&#x5FC5;&#x8BB0;&#x5F55;&#x6240;&#x6709;&#x4EF7;&#x683C;&#x7684;&#x8DE8;&#x5EA6;&#xFF0C;&#x56E0;&#x4E3A;&#x6709;&#x7684;&#x662F;&#x53EF;&#x4EE5;&#x7D2F;&#x52A0;(&#x4F8B;&#x5982;&#x540C;&#x5C0F;&#x4E8E;&#x5F53;&#x524D;&#x4EF7;&#x683C;&#x7684;&#x8DE8;&#x5EA6;&#x53EF;&#x4EE5;&#x7D2F;&#x52A0;&#x4F5C;&#x4E3A;&#x5F53;&#x524D;&#x4EF7;&#x683C;&#x7684;&#x8DE8;&#x5EA6;)&#x3002;&#x5177;&#x4F53;&#x4F18;&#x5316;&#x770B;&#x4EE3;&#x7801;&#x5B9E;&#x73B0;&#x3002; class StockSpanner: def __init__(self): self.stack = [] def next(self, price: int) -&gt; int: cur = 1 while self.stack and self.stack[-1][0] &lt;= price: cur += self.stack.pop()[1] self.stack.append((price, cur)) return cur # Your StockSpanner object will be instantiated and called as such: # obj = StockSpanner() # param_1 = obj.next(price) Kth Smallest Element in a BST Given a binary search tree, write a function kthSmallest to find the kth smallest element in it. Example 1: Input: root = [3,1,4,null,2], k = 1 3 / \\ 1 4 \\ 2 Output: 1 Example 2: Input: root = [5,3,6,2,4,null,null,1], k = 3 5 / \\ 3 6 / \\ 2 4 / 1 Output: 3 Follow up: What if the BST is modified (insert/delete operations) often and you need to find the kth smallest frequently? How would you optimize the kthSmallest routine? Solution &#x9898;&#x76EE;&#x5927;&#x610F;&#xFF1A;&#x627E;&#x4E8C;&#x53C9;&#x641C;&#x7D22;&#x6811;&#x4E2D;&#x7B2C;k&#x5C0F;&#x7684;&#x8282;&#x70B9;&#x3002;&#x6211;&#x7684;&#x601D;&#x8DEF;&#x5F88;&#x76F4;&#x63A5;&#xFF0C;&#x5C31;&#x662F;&#x6839;&#x636E;&#x4E8C;&#x53C9;&#x6392;&#x5E8F;&#x6811;&#x7684;&#x7279;&#x70B9;&#xFF08;&#x5DE6;&#x5B50;&#x6811;&#x5C0F;&#x4E8E;&#x53F3;&#x5B50;&#x6811;&#x7684;&#x8282;&#x70B9;&#xFF09;&#xFF0C;&#x91C7;&#x7528;&#x6DF1;&#x5EA6;&#x4F18;&#x5148;&#x7B97;&#x6CD5;&#x904D;&#x5386;&#x4E8C;&#x53C9;&#x6811;&#xFF0C;&#x7136;&#x540E;&#x4F9D;&#x6B21;&#x5C06;&#x5DE6;&#x8282;&#x70B9;&#x503C;(&#x5982;&#x679C;&#x5B58;&#x5728;)&#x548C;&#x53F3;&#x8282;&#x70B9;&#x503C;(&#x5982;&#x679C;&#x5B58;&#x5728;)&#x653E;&#x5165;&#x4E00;&#x4E2A;&#x5217;&#x8868;&#x91CC;&#xFF0C;&#x6839;&#x636E;&#x4E8C;&#x53C9;&#x641C;&#x7D22;&#x6811;&#x7684;&#x7279;&#x70B9;&#xFF0C;&#x8FD9;&#x6837;&#x751F;&#x6210;&#x7684;&#x5217;&#x8868;&#x662F;&#x4ECE;&#x5C0F;&#x6253;&#x5230;&#x6392;&#x5E8F;&#x7684;&#x3002;&#x6700;&#x540E;&#x76F4;&#x63A5;&#x8FD4;&#x56DE;&#x5217;&#x8868;&#x4E2D;&#x7B2C;k&#x4E2A;&#x503C;&#x5C31;&#x597D;&#x4E86;&#x3002;&#x5177;&#x4F53;&#x770B;&#x4EE3;&#x7801;&#x5B9E;&#x73B0;&#x3002; # Definition for a binary tree node. # class TreeNode: # def __init__(self, val=0, left=None, right=None): # self.val = val # self.left = left # self.right = right class Solution: def kthSmallest(self, root: TreeNode, k: int) -&gt; int: if not root: return None def dfs(node): if not node: return None dfs(node.left) sorted_list.append(node.val) dfs(node.right) sorted_list = [] dfs(root) return sorted_list[k-1] &#x603B;&#x7ED3; &#x53EF;&#x4EE5;&#x770B;&#x51FA;&#x4E94;&#x6708;&#x4EFD;&#x7684;&#x6311;&#x6218;&#x548C;&#x56DB;&#x6708;&#x4EFD;&#x7684;&#x6311;&#x6218;&#x7684;&#x9898;&#x76EE;&#x90FD;&#x662F;&#x5927;&#x540C;&#x5C0F;&#x5F02;&#x7684;&#xFF0C;&#x867D;&#x7136;&#x9898;&#x76EE;&#x4E0D;&#x540C;&#xFF0C;&#x4F46;&#x662F;&#x5F88;&#x591A;&#x601D;&#x8DEF;&#x662F;&#x4E00;&#x6837;&#x7684;&#x3002;&#x7136;&#x540E;&#x4E5F;&#x901A;&#x8FC7;&#x8FD9;&#x6837;&#x505A;&#x9898;&#x719F;&#x6089;&#x4E86;&#x4E00;&#x4E0B;python&#x7684;&#x8BED;&#x6CD5;&#x4EC0;&#x4E48;&#x7684;&#x3002;&#x6709;&#x65F6;&#x5019;&#x9047;&#x5230;&#x4E00;&#x4E9B;&#x6BD4;&#x8F83;&#x597D;&#x7528;&#x7684;&#x5185;&#x7F6E;&#x51FD;&#x6570;&#x548C;&#x7C7B;&#x7684;&#x65F6;&#x5019;&#x5C31;&#x4F1A;&#x60F3;&#x6E90;&#x7801;&#x662F;&#x600E;&#x4E48;&#x5B9E;&#x73B0;&#x7684;&#xFF0C;&#x7136;&#x540E;&#x53BB;&#x770B;&#x6E90;&#x7801;&#x662F;&#x4E0D;&#x662F;&#x6211;&#x7684;&#x601D;&#x8DEF;&#x4E00;&#x81F4;&#x3002;&#x6211;&#x8BA4;&#x4E3A;&#x8FD9;&#x4E2A;&#x8FC7;&#x7A0B;&#x662F;&#x4F1A;&#x8BA9;&#x6211;&#x6210;&#x957F;&#x7684;&#x3002;&#x6709;&#x7684;&#x65F6;&#x5019;&#x603B;&#x662F;&#x4F1A;&#x8FF7;&#x832B;&#xFF0C;&#x56E0;&#x4E3A;&#x7814;&#x7A76;&#x751F;&#x9636;&#x6BB5;&#x548C;&#x4E4B;&#x524D;&#x6709;&#x5F88;&#x5927;&#x7684;&#x4E0D;&#x540C;&#xFF0C;&#x6CA1;&#x6709;&#x4EBA;&#x53BB;&#x5B89;&#x6392;&#x4F60;&#x5E94;&#x8BE5;&#x8981;&#x505A;&#x4EC0;&#x4E48;&#xFF0C;&#x5E94;&#x8BE5;&#x8981;&#x600E;&#x4E48;&#x5B66;&#x3002;&#x8FD9;&#x6837;&#x6211;&#x7684;&#x5927;&#x90E8;&#x5206;&#x65F6;&#x95F4;&#x5C31;&#x662F;&#x5F88;&#x81EA;&#x7531;&#x7684;&#x3002;&#x5C31;&#x4F1A;&#x7ECF;&#x5E38;&#x7A81;&#x7136;&#x4E0D;&#x77E5;&#x9053;&#x8981;&#x5E72;&#x4EC0;&#x4E48;&#xFF0C;&#x5C31;&#x5F00;&#x59CB;&#x4E0D;&#x5B89;&#x7684;&#x73A9;&#x800D;&#x1F923;&#x3002;&#x4E00;&#x53E3;&#x4E0D;&#x80FD;&#x5403;&#x6210;&#x5927;&#x80D6;&#x5B50;&#xFF0C;&#x811A;&#x8E0F;&#x5B9E;&#x5730;&#xFF0C;&#x4E00;&#x6B65;&#x4E00;&#x6B65;&#x6765;&#x3002;&#x6211;&#x73B0;&#x5728;&#x5C31;&#x662F;&#x4E00;&#x79CD;&#x7740;&#x624B;&#x4E8E;&#x773C;&#x524D;&#x7684;&#x5FC3;&#x6001;&#xFF0C;&#x56E0;&#x4E3A;&#x60F3;&#x592A;&#x591A;&#x4EE5;&#x540E;&#xFF0C;&#x6211;&#x4F1A;&#x7126;&#x8651;&#x554A;&#xFF0C;&#x6211;&#x4F1A;&#x7740;&#x6025;&#xFF01;&#x5509;&#xFF0C;&#x6240;&#x4EE5;&#x5E72;&#x8106;&#x4E0D;&#x60F3;&#x4E86;&#xFF0C;&#x5C31;&#x505A;&#x597D;&#x773C;&#x524D;&#x7684;&#x6BCF;&#x4E00;&#x4EF6;&#x4E8B;&#x5C31;&#x597D;&#x4E86;&#xFF0C;&#x73B0;&#x5728;&#x4E5F;&#x5373;&#x662F;&#x672A;&#x6765;&#x3002; &#x6211;&#x521A;&#x53BB;&#x7FFB;&#x4E86;&#x4E00;&#x4E0B;&#x56DB;&#x6708;&#x4EFD;&#x7684;&#x7B14;&#x8BB0;&#xFF0C;&#x6211;&#x53D1;&#x73B0;&#x8FD9;&#x5341;&#x5929;&#x8BB0;&#x5F55;&#x7684;&#x5185;&#x5BB9;&#x6BD4;&#x4E4B;&#x524D;&#x8981;&#x5C11;&#x4E00;&#x4E9B;&#x4E86;&#xFF0C;&#x5176;&#x5B9E;&#x4E5F;&#x7B97;&#x662F;&#x4E00;&#x4E2A;&#x8FDB;&#x6B65;&#x7684;&#x8FC7;&#x7A0B;&#x5427;&#xFF0C;&#x56E0;&#x4E3A;&#x6211;&#x662F;&#x76F4;&#x63A5;&#x505A;&#x7684;&#x6BCF;&#x65E5;&#x6311;&#x6218;&#x7684;&#x9898;&#xFF0C;&#x90A3;&#x91CC;&#x9762;&#x7684;&#x9898;&#x6709;&#x96BE;&#x6709;&#x6613;&#xFF0C;&#x7531;&#x4E8E;&#x4E4B;&#x524D;&#x4E5F;&#x53C2;&#x52A0;&#x4E86;&#x56DB;&#x6708;&#x7684;&#x6311;&#x6218;&#xFF0C;&#x5C31;&#x611F;&#x89C9;&#x5176;&#x5B9E;&#x5F88;&#x591A;&#x9898;&#x76EE;&#x90FD;&#x662F;&#x5927;&#x540C;&#x5C0F;&#x5F02;&#x7684;&#xFF0C;&#x6240;&#x4EE5;&#x6211;&#x89C9;&#x5F97;&#x76F8;&#x5BF9;&#x7B80;&#x5355;&#x7684;&#x9898;&#x5C31;&#x6CA1;&#x6709;&#x8BB0;&#x5F55;&#x4E86;&#x3002;&#x540E;&#x9762;&#x4E5F;&#x4F1A;&#x7EE7;&#x7EED;&#x505A;&#x8FD9;&#x4E2A;&#x6311;&#x6218;&#xFF0C;&#x73B0;&#x5728;&#x79BB;&#x627E;&#x5DE5;&#x4F5C;&#x9762;&#x8BD5;&#x8FD8;&#x7B97;&#x65E9;&#xFF0C;&#x5C31;&#x5148;&#x6162;&#x6162;&#x4FDD;&#x6301;&#x9898;&#x611F;&#x5427;&#xFF0C;&#x6BCF;&#x5929;&#x4E5F;&#x6CA1;&#x6709;&#x592A;&#x591A;&#x65F6;&#x95F4;&#x5237;&#x66F4;&#x591A;&#x7684;&#x9898;&#xFF0C;&#x5C31;&#x8FD9;&#x6837;&#x4E00;&#x5929;&#x4E00;&#x9053;&#x9898;&#x633A;&#x597D;&#x7684;&#x3002;&#x76EE;&#x524D;&#x6211;&#x505A;&#x4E86;50&#x591A;&#x5929;&#x7684;&#x9898;&#xFF0C;&#x660E;&#x663E;&#x5C31;&#x611F;&#x89C9;&#x6BD4;&#x4E4B;&#x524D;&#x521A;&#x5F00;&#x59CB;&#x5237;&#x9898;&#x7684;&#x65F6;&#x5019;&#x66F4;&#x5F97;&#x5FC3;&#x5E94;&#x624B;&#xFF0C;&#x4E3B;&#x8981;&#x662F;&#x601D;&#x7EF4;&#x7684;&#x8F6C;&#x53D8;&#x5427;&#x3002;&#x7EE7;&#x7EED;&#x575A;&#x6301;&#xFF01; &#x6211;&#x7684;&#x62A5;&#x544A;&#x8FD8;&#x6709;&#x4E00;&#x5806;&#x3B5;&#xFF1D;&#x3B5;&#xFF1D;&#x3B5;&#xFF1D;(#&gt;&#x434;&lt;)&#xFF89;&#xFF0C;&#x5199;&#x62A5;&#x544A;&#x53BB;&#x4E86;(&#xFF40;&#x30FB;&#x3C9;&#x30FB;&#xB4;)&#x3002;","categories":[{"name":"Technology","slug":"Technology","permalink":"https://littlemeemoon.cn/categories/Technology/"},{"name":"Coding","slug":"Technology/Coding","permalink":"https://littlemeemoon.cn/categories/Technology/Coding/"},{"name":"Leetcode","slug":"Technology/Coding/Leetcode","permalink":"https://littlemeemoon.cn/categories/Technology/Coding/Leetcode/"}],"tags":[{"name":"Leetcode","slug":"Leetcode","permalink":"https://littlemeemoon.cn/tags/Leetcode/"},{"name":"Python","slug":"Python","permalink":"https://littlemeemoon.cn/tags/Python/"},{"name":"Algorithm","slug":"Algorithm","permalink":"https://littlemeemoon.cn/tags/Algorithm/"}],"keywords":[{"name":"Technology","slug":"Technology","permalink":"https://littlemeemoon.cn/categories/Technology/"},{"name":"Coding","slug":"Technology/Coding","permalink":"https://littlemeemoon.cn/categories/Technology/Coding/"},{"name":"Leetcode","slug":"Technology/Coding/Leetcode","permalink":"https://littlemeemoon.cn/categories/Technology/Coding/Leetcode/"}]},{"title":"Leetcode Note in May 2020 | part 1 | day 01-10","slug":"Technology/Coding/Leetcode/Leetcode-Note-in-May-2020-part-1-day-01-10","date":"2020-05-10T13:01:11.000Z","updated":"2020-06-04T04:19:01.759Z","comments":true,"path":"2020/05/10/Technology/Coding/Leetcode/Leetcode-Note-in-May-2020-part-1-day-01-10/","link":"","permalink":"https://littlemeemoon.cn/2020/05/10/Technology/Coding/Leetcode/Leetcode-Note-in-May-2020-part-1-day-01-10/","excerpt":"","text":"&#x5199;&#x5728;&#x524D;&#x9762;&#x7684;&#x8BDD; &#x4E94;&#x6708;&#x5F00;&#x4E2A;&#x5934;&#xFF0C;&#x5C31;&#x662F;&#x8FD9;&#x4E2A;&#x5934;&#x5F00;&#x5F97;&#x6709;&#x70B9;&#x665A;&#xFF0C;&#x4E00;&#x662F;&#x56E0;&#x4E3A;&#x5FEB;&#x5230;&#x8003;&#x8BD5;&#x5B63;&#x4E86;&#xFF0C;&#x5F88;&#x591A;&#x8BFE;&#x90FD;&#x7ED3;&#x4E86;&#xFF0C;&#x6240;&#x4EE5;&#x7559;&#x4E86;&#x5F88;&#x591A;&#x4F5C;&#x4E1A;&#x9700;&#x8981;&#x505A;(&#x867D;&#x7136;&#x6211;&#x73A9;&#x800D;&#x7684;&#x65F6;&#x95F4;&#x591A;&#x4E8E;&#x505A;&#x4F5C;&#x4E1A;&#x7684;&#x65F6;&#x95F4;&#xFF0C;&#x6700;&#x540E;&#x53C8;&#x7126;&#x8651;&#x7684;&#x71AC;&#x591C;&#x71AC;&#x591C;&#x71AC;&#x591C;...)&#x3002;&#x4E8C;&#x662F;&#x56E0;&#x4E3A;&#x4E94;&#x6708;&#x521A;&#x5F00;&#x59CB;&#xFF0C;&#x524D;&#x9762;&#x7684;&#x9898;&#x4E5F;&#x90FD;&#x6BD4;&#x8F83;&#x7B80;&#x5355;&#xFF0C;&#x6240;&#x4EE5;&#x8FD9;&#x7BC7;&#x6587;&#x7AE0;&#x4E3B;&#x8981;&#x662F;&#x8BB0;&#x5F55;&#x8FD9;10&#x5929;&#xFF0C;&#x6211;&#x9047;&#x5230;&#x7684;&#x6BD4;&#x8F83;&#x6709;&#x6BD4;&#x8F83;&#x6709;&#x610F;&#x601D;&#x6216;&#x8005;&#x6709;&#x96BE;&#x5EA6;&#x7684;&#x9898;&#xFF0C;&#x5E9F;&#x8BDD;&#x4E0D;&#x591A;&#x8BF4;&#xFF0C;&#x4E0A;&#x83DC;~ Majority Element Given an array of size n, find the majority element. The majority element is the element that appears more than &#x230A; n/2 &#x230B; times. You may assume that the array is non-empty and the majority element always exist in the array. Example 1: Input: [3,2,3] Output: 3 Example 2: Input: [2,2,1,1,1,2,2] Output: 2 Solution &#x8FD9;&#x4E2A;&#x9898;&#x4E0D;&#x96BE;&#x7684;&#xFF0C;&#x8FD9;&#x91CC;&#x8BB0;&#x5F55;&#x5B83;&#x662F;&#x56E0;&#x4E3A;&#x53EF;&#x4EE5;&#x5B66;&#x5230;&#x4E00;&#x4E2A;Python&#x7684;collection&#xFF0C;&#x76F4;&#x63A5;&#x4E0A;&#x4EE3;&#x7801;&#x3002; class Solution: def majorityElement(self, nums: List[int]) -&gt; int: return Counter(nums).most_common(1)[0][0] &#x54C8;&#x54C8;&#x54C8;&#xFF0C;&#x8FD9;&#x4EE3;&#x7801;&#x4E0D;&#x8981;&#x592A;&#x7B80;&#x6D01;&#xFF0C;&#x8212;&#x670D;~ Cousins in Binary Tree In a binary tree, the root node is at depth 0, and children of each depth k node are at depth k+1. Two nodes of a binary tree are cousins if they have the same depth, but have different parents. We are given the root of a binary tree with unique values, and the values x and y of two different nodes in the tree. Return true if and only if the nodes corresponding to the values x and y are cousins. Example 1: Input: root = [1,2,3,4], x = 4, y = 3 1 / \\ 2 3 Output: false Example 2: Input: root = [1,2,3,null,4,null,5], x = 5, y = 4 1 / \\ 2 3 \\ \\ 4 5 Output: true Example 3: Input: root = [1,2,3,null,4], x = 2, y = 3 1 / \\ 2 3 \\ 4 Output: false Solution &#x8FD9;&#x4E2A;&#x9898;&#x662F;&#x5224;&#x65AD;&#x7ED9;&#x5B9A;&#x7684;&#x4E24;&#x4E2A;&#x8282;&#x70B9;&#xFF0C;&#x5728;&#x4E8C;&#x53C9;&#x6811;&#x4E2D;&#x662F;&#x5426;&#x4E3A;&#x5802;&#x5144;&#x5F1F;&#xFF0C;&#x5802;&#x5144;&#x5F1F;&#x7684;&#x5B9A;&#x4E49;&#x662F;&#xFF1A;&#x5728;&#x6811;&#x7684;&#x540C;&#x4E00;&#x5C42;&#xFF0C;&#x4F46;&#x7236;&#x8282;&#x70B9;&#x4E0D;&#x540C;&#xFF0C;&#x6211;&#x8FD9;&#x91CC;&#x4E00;&#x5F00;&#x59CB;&#x60F3;&#x5230;&#x7684;&#x65B9;&#x6CD5;&#x5C31;&#x662F;&#x7528;&#x5C42;&#x6B21;&#x904D;&#x5386;&#x7B97;&#x6CD5;&#xFF0C;&#x7136;&#x540E;&#x6CE8;&#x610F;&#x5224;&#x65AD;&#x6761;&#x4EF6;&#x5C31;&#x884C;&#xFF0C;&#x5177;&#x4F53;diamante&#x6CE8;&#x91CA;&#x90FD;&#x5199;&#x5F97;&#x5F88;&#x6E05;&#x695A;&#x4E86;&#x3002; # Definition for a binary tree node. class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right class Solution: def isCousins(self, root: TreeNode, x: int, y: int) -&gt; bool: q = [] q.append(root) # &#x5C42;&#x6B21;&#x904D;&#x5386;&#x4E8C;&#x53C9;&#x6811;&#xFF1A;&#x901A;&#x8FC7;&#x5224;&#x65AD;&#xFF1A; # 1. x&#xFF0C;y&#x8282;&#x70B9;&#x662F;&#x5426;&#x5728;&#x540C;&#x4E00;&#x5C42; # 2. x&#xFF0C;y&#x8282;&#x70B9;&#x7684;&#x7236;&#x8282;&#x70B9;&#x662F;&#x5426;&#x76F8;&#x540C; # &#x6765;&#x5224;&#x65AD;x&#xFF0C;y&#x662F;&#x5426;&#x4E3A;&#x5802;&#x5144;&#x5F1F; while q: tmp, n = [], len(q) for i in range(n): cur = q.pop(0) if cur: tmp.append(cur.val) q.append(cur.left) q.append(cur.right) else: # &#x52A0;None&#x5360;&#x4F4D;, &#x65B9;&#x4FBF;&#x5224;&#x65AD;&#x662F;&#x5426;&#x4E3A;&#x540C;&#x4E00;&#x7236;&#x8282;&#x70B9; tmp.append(None) # &#x5982;&#x679C;x&#xFF0C;y&#x5728;&#x540C;&#x4E00;&#x5C42;&#xFF0C;&#x5219;&#x53EF;&#x80FD;&#x662F;&#x5802;&#x5144;&#x5F1F; if x in tmp and y in tmp: l = tmp.index(x) r = tmp.index(y) if l &gt; r: l, r = r, l # 1. &#x5982;&#x679C;l, r&#x76F8;&#x90BB;&#xFF08;r-l == 1&#xFF09;&#x5E76;&#x4E14;r&#x4E3A;&#x5947;&#x6570;&#xFF08;r%2 != 0&#xFF09; # &#xFF08;l&#x4E3A;&#x5076;&#x6570;&#xFF09;&#xFF0C;&#x5219;&#x7236;&#x8282;&#x70B9;&#x76F8;&#x540C; =&gt; &#x975E;&#x5802;&#x5144;&#x5F1F; if r-l == 1 and r%2 != 0: return False # 2. &#x540C;&#x5C42;&#x4E14;&#x7236;&#x8282;&#x70B9;&#x4E0D;&#x540C; =&gt; &#x5802;&#x5144;&#x5F1F; return True # 3. &#x5982;&#x679C;x&#xFF0C;y&#x4E0D;&#x5728;&#x540C;&#x4E00;&#x5C42; =&gt; &#x975E;&#x5802;&#x5144;&#x5F1F; if x in tmp or y in tmp: return False # 4. x, y&#x90FD;&#x4E0D;&#x5728;&#x4E8C;&#x53C9;&#x6811;&#x4E2D; return False Valid Perfect Square Given a positive integer num, write a function which returns True if num is a perfect square else False. Note: Do not use any built-in library function such as sqrt. Example 1: Input: 16 Output: true Example 2: Input: 14 Output: false Solution &#x8FD9;&#x4E2A;&#x9898;&#x6211;&#x6CA1;&#x6709;&#x4EC0;&#x4E48;&#x597D;&#x7684;&#x601D;&#x8DEF;&#xFF0C;&#x7136;&#x540E;&#x770B;&#x5230;&#x8BA8;&#x8BBA;&#x533A;&#x6709;&#x4E00;&#x4E2A;&#x4E0D;&#x9519;&#x7684;&#x65B9;&#x6CD5;&#xFF0C;&#x6211;&#x89C9;&#x5F97;&#x53EF;&#x4EE5;&#x62FF;&#x6765;&#x53C2;&#x8003;&#x53C2;&#x8003;&#x3002; &#x8FD9;&#x4E2A;&#x89E3;&#x6CD5;&#x7528;&#x7684;&#x725B;&#x987F;&#x6CD5;&#xFF1A;&#x53EF;&#x7528;&#x4E8E;&#x5FEB;&#x901F;&#x8FD1;&#x4F3C;&#x5E73;&#x65B9;&#x6839;&#xFF08;&#x4E8C;&#x6B21;&#x6536;&#x655B;&#xFF0C;&#x56E0;&#x6B64;&#x6B63;&#x786E;&#x6570;&#x5B57;&#x7684;&#x6570;&#x91CF;&#x6BCF;&#x6B21;&#x8FED;&#x4EE3;&#x52A0;&#x500D;&#xFF09; x0&#x2248;Sxn+1=12(xn+Sxn)S=lim&#x2061;n&#x2192;&#x221E;xn x_0 \\approx \\sqrt{S} \\\\ x_{n+1} = \\frac{1}{2} \\Big(x_n + \\frac{S}{x_n} \\Big) \\\\ \\sqrt{S} = \\lim\\limits_{n\\rightarrow\\infty}x_n x0&#x200B;&#x2248;S&#x200B;xn+1&#x200B;=21&#x200B;(xn&#x200B;+xn&#x200B;S&#x200B;)S&#x200B;=n&#x2192;&#x221E;lim&#x200B;xn&#x200B; class Solution: def isPerfectSquare(self, num: int) -&gt; bool: r = num while r*r &gt; num: r = (r + num/r) // 2 return r*r == num Find the Town Judge In a town, there are N people labelled from 1 to N. There is a rumor that one of these people is secretly the town judge. If the town judge exists, then: 1. The town judge trusts nobody. 2. Everybody (except for the town judge) trusts the town judge. 3. There is exactly one person that satisfies properties 1 and 2. You are given trust, an array of pairs trust[i] = [a, b] representing that the person labelled a trusts the person labelled b. If the town judge exists and can be identified, return the label of the town judge. Otherwise, return -1. Example 1: Input: N = 2, trust = [[1,2]] Output: 2 Example 2: Input: N = 3, trust = [[1,3],[2,3]] Output: 3 Example 3: Input: N = 3, trust = [[1,3],[2,3],[3,1]] Output: -1 Example 4: Input: N = 3, trust = [[1,2],[2,3]] Output: -1 Example 5: Input: N = 4, trust = [[1,3],[1,4],[2,3],[2,4],[4,3]] Output: 3 Note: 1. 1 &lt;= N &lt;= 1000 2. trust.length &lt;= 10000 3. trust[i] are all different 4. trust[i][0] != trust[i][1] 5. 1 &lt;= trust[i][0], trust[i][1] &lt;= N Solution &#x8FD9;&#x4E2A;&#x9898;&#x4E3B;&#x8981;&#x662F;&#x60F3;&#x719F;&#x6089;&#x4E00;&#x4E0B;set&#x548C;Counter&#x7684;&#x7528;&#x6CD5;&#xFF0C;&#x6240;&#x4EE5;&#x6211;&#x60F3;&#x65B9;&#x8BBE;&#x6CD5;&#x4E5F;&#x8981;&#x7528;&#x5230;Counter&#x548C;set&#x3002;&#x6CE8;&#x91CA;&#x5199;&#x5F97;&#x5F88;&#x6E05;&#x695A;&#xFF0C;&#x76F4;&#x63A5;&#x770B;&#x4EE3;&#x7801;&#x5427;&#x3002; class Solution: def findJudge(self, N: int, trust: List[List[int]]) -&gt; int: # &#x7279;&#x5224;&#xFF1A; # 1. &#x5982;&#x679C;&#x8C01;&#x4E5F;&#x4E0D;&#x76F8;&#x4FE1;&#x8C01;&#xFF0C;&#x4E14;&#x4EBA;&#x6570;&#x5927;&#x4E8E;1&#xFF0C;&#x5219;&#x4E00;&#x5B9A;&#x6CA1;&#x6709;&#x6CD5;&#x5B98; # 2. &#x5982;&#x679C;&#x53EA;&#x6709;&#x4E00;&#x4E2A;&#x4EBA;&#xFF0C;&#x5219;&#x8FD9;&#x4E2A;&#x4EBA;&#x662F;&#x6CD5;&#x5B98; if not(trust): if N &gt; 1: return -1 return N n_judge = set([t[0] for t in trust]) c_judge = set([t[1] for t in trust]) # &#x53EF;&#x80FD;&#x51FA;&#x73B0;&#x7684;&#x6CD5;&#x5B98;&#xFF1A;&#x88AB;&#x76F8;&#x4FE1;&#xFF0C;&#x4F46;&#x4E0D;&#x76F8;&#x4FE1;&#x4EFB;&#x4F55;&#x4EBA; #&#xFF08;&#x5B58;&#x5728;&#x88AB;&#x76F8;&#x4FE1;&#x7684;&#x4EBA;&#x7FA4;&#x4E2D;&#xFF0C;&#x4F46;&#x4E0D;&#x5B58;&#x5728;&#x76F8;&#x4FE1;&#x522B;&#x4EBA;&#x7684;&#x4EBA;&#x7FA4;&#x4E2D;&#xFF09; tmp_judge = c_judge.difference(n_judge) # &#x5982;&#x679C;&#x6CA1;&#x6709;&#x6EE1;&#x8DB3;&#x4E0A;&#x8BC9;&#x6761;&#x4EF6;&#x7684;&#x4EBA;&#xFF0C;&#x5219;&#x6CD5;&#x5B98;&#x4E0D;&#x5B58;&#x5728; if not(tmp_judge): return -1 # &#x5982;&#x679C;&#x5B58;&#x5728;&#x8FD9;&#x6837;&#x7684;&#x4EBA;&#xFF0C;&#x7531;&#x9898;&#x610F;&#xFF0C;&#x53EA;&#x5B58;&#x5728;&#x4E00;&#x4E2A;&#x8FD9;&#x6837;&#x7684;&#x4EBA; # &#x518D;&#x5224;&#x65AD;&#xFF1A;&#x662F;&#x5426;&#x9664;&#x4ED6;&#x81EA;&#x5DF1;&#x4EE5;&#x5916;&#x5176;&#x4ED6;&#x4EBA;&#x90FD;&#x76F8;&#x4FE1;&#x4ED6; if Counter([t[1] for t in trust]).most_common(1)[0][1] == N-1: return tmp_judge.pop() return -1 &#x603B;&#x7ED3; &#x4ECA;&#x5929;&#x6211;&#x662F;&#x5FCD;&#x75DB;&#x5728;&#x5199;&#x8FD9;&#x7BC7;&#x6587;&#x7AE0;&#x554A;&#xFF0C;&#x4ECA;&#x5929;&#x4E0B;&#x5348;&#x53BB;&#x62D4;&#x7259;&#x4E86;&#xFF0C;&#x73B0;&#x5728;&#x75DB;&#x5F97;&#x4E0D;&#x884C;&#xFF0C;&#x6211;&#x8981;&#x4F11;&#x606F;&#x4E00;&#x4E0B;&#x4E86;&#x2639;&#x2639;&#xFE0F;&#x3002;","categories":[{"name":"Technology","slug":"Technology","permalink":"https://littlemeemoon.cn/categories/Technology/"},{"name":"Coding","slug":"Technology/Coding","permalink":"https://littlemeemoon.cn/categories/Technology/Coding/"},{"name":"Leetcode","slug":"Technology/Coding/Leetcode","permalink":"https://littlemeemoon.cn/categories/Technology/Coding/Leetcode/"}],"tags":[{"name":"Leetcode","slug":"Leetcode","permalink":"https://littlemeemoon.cn/tags/Leetcode/"},{"name":"Python","slug":"Python","permalink":"https://littlemeemoon.cn/tags/Python/"},{"name":"Algorithm","slug":"Algorithm","permalink":"https://littlemeemoon.cn/tags/Algorithm/"}],"keywords":[{"name":"Technology","slug":"Technology","permalink":"https://littlemeemoon.cn/categories/Technology/"},{"name":"Coding","slug":"Technology/Coding","permalink":"https://littlemeemoon.cn/categories/Technology/Coding/"},{"name":"Leetcode","slug":"Technology/Coding/Leetcode","permalink":"https://littlemeemoon.cn/categories/Technology/Coding/Leetcode/"}]},{"title":"Leetcode Note in Apri 2020 | part 5 | day 29-30","slug":"Technology/Coding/Leetcode/Leetcode-Note-in-Apri-2020-part-5-day-29-30","date":"2020-04-30T14:15:42.000Z","updated":"2020-06-04T04:19:01.758Z","comments":true,"path":"2020/04/30/Technology/Coding/Leetcode/Leetcode-Note-in-Apri-2020-part-5-day-29-30/","link":"","permalink":"https://littlemeemoon.cn/2020/04/30/Technology/Coding/Leetcode/Leetcode-Note-in-Apri-2020-part-5-day-29-30/","excerpt":"","text":"&#x5199;&#x5728;&#x524D;&#x9762;&#x7684;&#x8BDD; &#x8FD9;&#x7BC7;&#x6587;&#x7AE0;&#x7684;&#x4E24;&#x9053;&#x9898;&#x90FD;&#x662F;&#x5173;&#x4E8E;&#x6811;&#x7684;&#xFF0C;&#x5176;&#x4E2D;&#x6709;&#x4E00;&#x9053;&#x5BF9;&#x6211;&#x6765;&#x8BF4;&#x5F88;&#x6709;&#x96BE;&#x5EA6;&#xFF08;/&#x5C0F;&#x58F0;&#xFF1A;&#x8FDE;&#x9898;&#x90FD;&#x6CA1;&#x8BFB;&#x61C2;&#x1F641;&#xFF09;&#x3002;&#x6765;&#x5427;&#xFF0C;&#x8D81;&#x6B64;&#x673A;&#x4F1A;&#x597D;&#x597D;&#x7406;&#x4E00;&#x7406; ~ &#x1F4AA; Check If a String Is a Valid Sequence from Root to Leaves Path in a Binary Tree Given a binary tree where each path going from the root to any leaf form a valid sequence, check if a given string is a valid sequence in such binary tree. We get the given string from the concatenation of an array of integers arr and the concatenation of all values of the nodes along a path results in a sequence in the given binary tree. Example 1: Input: root = [0,1,0,0,1,0,null,null,1,0,0], arr = [0,1,0,1] Output: true Explanation: The path 0 -&gt; 1 -&gt; 0 -&gt; 1 is a valid sequence (green color in the figure). Other valid sequences are: 0 -&gt; 1 -&gt; 1 -&gt; 0 0 -&gt; 0 -&gt; 0 even a sequence. Example 2: Input: root = [0,1,0,0,1,0,null,null,1,0,0], arr = [0,0,1] Output: false Explanation: The path 0 -&gt; 0 -&gt; 1 does not exist, therefore it is not even a sequence. Example 3: Input: root = [0,1,0,0,1,0,null,null,1,0,0], arr = [0,1,1] Output: false Explanation: The path 0 -&gt; 1 -&gt; 1 is a sequence, but it is not a valid sequence. Solution &#x8FD9;&#x4E2A;&#x9898;&#x5E94;&#x8BE5;&#x7B97;&#x662F;&#x5E38;&#x89C4;&#x9898;&#xFF0C;&#x76F4;&#x63A5;&#x7528;&#x6DF1;&#x5EA6;&#x4F18;&#x5148;&#x904D;&#x5386;&#x7B97;&#x6CD5;&#x904D;&#x5386;&#x6811;&#xFF0C;&#x6CE8;&#x610F;&#x4E00;&#x4E0B;&#x9012;&#x5F52;&#x505C;&#x6B62;&#x6761;&#x4EF6;&#x5C31;&#x53EF;&#x4EE5;&#x4E86;&#xFF0C;&#x5177;&#x4F53;&#x770B;&#x4EE3;&#x7801;&#x6CE8;&#x91CA;&#x5427;&#x3002; # Definition for a binary tree node. class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right class Solution: def isValidSequence(self, root: TreeNode, arr: List[int]) -&gt; bool: n = len(arr) - 1 def isValid(root, arr, i): # &#x82E5;&#x5F53;&#x524D;&#x5230;&#x8FBE;&#x53F6;&#x7ED3;&#x70B9;&#x5E76;&#x4E14;&#x904D;&#x5386;&#x5230;&#x6570;&#x7EC4;&#x7684;&#x6700;&#x540E;&#x4E00;&#x4E2A;&#x5143;&#x7D20;&#xFF0C;&#x5219;&#x6BD4;&#x8F83;&#x6700;&#x540E;&#x4E00;&#x4E2A;&#x5143;&#x7D20;&#x662F;&#x5426;&#x76F8;&#x7B49; if root and i == n and not(root.left) and not(root.right): return root.val == arr[i] # &#x82E5;&#x6570;&#x7EC4;&#x672A;&#x904D;&#x5386;&#x5230;&#x6700;&#x540E;&#x4E00;&#x4E2A;&#x5143;&#x7D20;&#x4E14;&#x6811;&#x904D;&#x5386;&#x5B8C;&#x6240;&#x6709;&#x7ED3;&#x70B9;&#xFF0C; # &#x6216;&#x8005;&#x6570;&#x7EC4;&#x904D;&#x5386;&#x5B8C;&#x6240;&#x6709;&#x5143;&#x7D20;&#xFF0C;&#x4F46;&#x6811;&#x8FD8;&#x6CA1;&#x5230;&#x53F6;&#x5B50;&#x8282;&#x70B9;&#xFF0C;&#x5219;&#x65E0;&#x6548; if (i &lt;= n and not(root)) or (i &gt; n and root): return False # &#x5F53;&#x524D;&#x8282;&#x70B9;&#x5BF9;&#x5E94;&#x7684;&#x6570;&#x5B57;&#x4E0D;&#x7B49;&#x4E8E;&#x6570;&#x7EC4;&#x76F8;&#x5E94;&#x4F4D;&#x7F6E;&#x7684;&#x6570;&#x5B57;&#xFF0C;&#x65E0;&#x6548; if root.val != arr[i]: return False # &#x5982;&#x679C;&#x6570;&#x7EC4;&#x672A;&#x904D;&#x5386;&#x5B8C;&#x6240;&#x6709;&#x5143;&#x7D20;&#xFF0C;&#x5219;&#x7EE7;&#x7EED;&#x6BD4;&#x8F83; left = isValid(root.left, arr, i+1) if i &lt; n else False # &#x5982;&#x679C;&#x5DE6;&#x5B50;&#x6811;&#x6EE1;&#x8DB3;&#x6761;&#x4EF6;&#xFF0C;&#x5219;&#x8FD4;&#x56DE;&#x7ED3;&#x679C;&#xFF0C;&#x5426;&#x5219;&#x904D;&#x5386;&#x53F3;&#x5B50;&#x6811;&#x662F;&#x5426;&#x6EE1;&#x8DB3;&#x6761;&#x4EF6; if left: return True right = isValid(root.right, arr, i+1) if i &lt; n else False return right return isValid(root, arr, 0) Binary Tree Maximum Path Sum Given a non-empty binary tree, find the maximum path sum. For this problem, a path is defined as any sequence of nodes from some starting node to any node in the tree along the parent-child connections. The path must contain at least one node and does not need to go through the root. Example 1: Input: [1,2,3] 1 / \\ 2 3 Output: 6 Example 2: Input: [-10,9,20,null,null,15,7] -10 / \\ 9 20 / \\ 15 7 Output: 42 Solution &#x5BF9;&#xFF0C;&#x5C31;&#x662F;&#x5B83;&#xFF0C;&#x4E0D;&#x77E5;&#x9053;&#x6765;&#x770B;&#x5230;&#x7684;&#x5C0F;&#x4F19;&#x4F34;&#x80FD;&#x4E0D;&#x80FD;&#x770B;&#x61C2;&#x8FD9;&#x9053;&#x9898;&#x7684;&#x610F;&#x601D;&#xFF0C;&#x5982;&#x679C;&#x4E00;&#x6B21;&#x5C31;&#x770B;&#x61C2;&#x4E86;&#xFF0C;&#x6211;&#x771F;&#x7684;&#x8981;&#x7ED9;&#x4F60;&#x70B9;&#x4E2A;&#x8D5E;&#x1F44D;&#xFF0C;&#x53CD;&#x6B63;&#x6211;&#x662F;&#x6CA1;&#x770B;&#x61C2;&#x3002;&#x3002;&#x6700;&#x540E;&#x53BB;&#x8BA8;&#x8BBA;&#x533A;&#x6C42;&#x52A9;&#xFF0C;&#x624D;&#x6162;&#x6162;&#x641E;&#x61C2;&#x662F;&#x8981;&#x6C42;&#x4E2A;&#x5565;&#x3002; &#x9898;&#x76EE;&#x5927;&#x610F;&#x662F;&#xFF1A;&#x6C42;&#x6700;&#x5927;&#x8DEF;&#x5F84;&#x548C;&#xFF0C;&#x4F46;&#x662F;&#x8DEF;&#x5F84;&#x7684;&#x8D77;&#x70B9;&#x548C;&#x7EC8;&#x70B9;&#x53EF;&#x4EE5;&#x662F;&#x4EFB;&#x610F;&#x8282;&#x70B9;&#xFF0C;&#x4F46;&#x4E0D;&#x53EF;&#x4EE5;&#x91CD;&#x590D;&#x8D70;&#x67D0;&#x4E00;&#x4E2A;&#x8282;&#x70B9;&#xFF0C;&#x6211;&#x4E5F;&#x4E0D;&#x77E5;&#x9053;&#x6211;&#x8BF4;&#x6E05;&#x695A;&#x6CA1;&#x1F923;&#x3002; &#x4F8B;&#x5982;&#xFF1A;&#x7B2C;&#x4E8C;&#x4E2A;&#x4F8B;&#x5B50;&#x6700;&#x5927;&#x8DEF;&#x5F84;&#x662F;&#xFF1A;15 + 7 + 20 = 42, &#x56E0;&#x4E3A;&#x5176;&#x4ED6;&#x8DEF;&#x5F84;&#x90FD;&#x6BD4;&#x5B83;&#x5C0F;&#xFF1A; - 9 - 10 + 20 + 15 = 34 - 9 - 10 + 20 + 7 = 26 - - 10 + 20 + 15 = 25 - - 10 + 20 + 7 = 17 - ... &#x73B0;&#x5728;&#x5E94;&#x8BE5;&#x80FD;&#x660E;&#x767D;&#x4E86;&#xFF0C;&#x8FD9;&#x9898;&#x641E;&#x660E;&#x767D;&#x9898;&#x610F;&#x4E4B;&#x540E;&#xFF0C;&#x53EF;&#x4EE5;&#x60F3;&#x5230;&#x7528;&#x6DF1;&#x5EA6;&#x4F18;&#x5148;&#x904D;&#x5386;&#x7B97;&#x6CD5;&#x6765;&#x5B9E;&#x73B0;&#x6700;&#x5927;&#x8DEF;&#x5F84;&#x548C;&#x7684;&#x7D2F;&#x52A0;&#xFF0C;&#x6700;&#x540E;&#x786E;&#x5B9E;&#x4E5F;&#x662F;&#x7528;&#x8FD9;&#x4E2A;&#x6CD5;&#x5B50;&#x3002; &#x6838;&#x5FC3;&#x601D;&#x60F3;&#x662F;&#xFF1A;&#x901A;&#x8FC7;&#x7D2F;&#x52A0;&#x5C40;&#x90E8;&#x6700;&#x5927;&#x8DEF;&#x5F84;&#x548C;&#x6765;&#x6C42;&#x89E3;&#x5168;&#x5C40;&#x6700;&#x5927;&#x8DEF;&#x5F84;&#x548C;&#xFF0C;&#x5177;&#x4F53;&#x770B;&#x4EE3;&#x7801;&#x6CE8;&#x91CA;&#x3002; # Definition for a binary tree node. class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right class Solution: def maxPathSum(self, root: TreeNode) -&gt; int: # &#x9012;&#x5F52;&#x95EE;&#x9898;&#xFF1A; # &#x5168;&#x5C40;&#x6700;&#x5927;&#x8DEF;&#x5F84;&#x548C; = &#x5404;&#x5C40;&#x90E8;&#x6700;&#x5927;&#x8DEF;&#x5F84;&#x548C;&#xFF08;&#x5DE6;&#x5B50;&#x6811;&#x6700;&#x5927;&#x8DEF;&#x5F84;+&#x6839;&#x8282;&#x70B9;&#x6743;&#x91CD;+&#x53F3;&#x5B50;&#x6811;&#x6700;&#x5927;&#x8DEF;&#x5F84;&#xFF09; self.max_path = float(&quot;-inf&quot;) # &#x9012;&#x5F52;&#x8BA1;&#x7B97;&#x5DE6;&#x53F3;&#x5B50;&#x6811;&#x4E2D;&#x7684;&#x6700;&#x5927;&#x8DEF;&#x5F84;&#xFF0C;&#x56E0;&#x4E3A;&#x8DEF;&#x5F84;&#x53EA;&#x80FD;&#x5305;&#x542B;&#x4E00;&#x6761;&#x5206;&#x652F;&#xFF0C;&#x5E76;&#x4E0E;&#x5176;&#x4ED6;&#x5206;&#x652F;&#x901A;&#x8FC7;&#x6839;&#x8282;&#x70B9;&#x8FDE;&#x63A5;&#xFF1B; # &#x6240;&#x4EE5;&#x8FD9;&#x91CC;&#x8FD4;&#x56DE;&#x7684;&#x503C;&#x6211;&#x4EEC;&#x53EF;&#x4EE5;&#x76F4;&#x63A5;&#x786E;&#x5B9A;&#x4E3A;&#xFF1A;max(0, max(left, right) + root.val)&#xFF1B; # &#x8FD9;&#x91CC;&#x5982;&#x679C;&#x8BA1;&#x7B97;&#x51FA;&#x8D1F;&#x503C;&#x7684;&#x53EF;&#x76F4;&#x63A5;&#x820D;&#x53BB;&#xFF0C;&#x56E0;&#x4E3A;&#x5B83;&#x53EA;&#x4F1A;&#x8BA9;&#x4E4B;&#x524D;&#x7D2F;&#x52A0;&#x7684;&#x6700;&#x5927;&#x8DEF;&#x5F84;&#x53D8;&#x5C0F;&#xFF1B; # &#x9012;&#x5F52;&#x7684;&#x7B2C;&#x4E00;&#x4E2A;&#x8FD4;&#x56DE;&#x6761;&#x4EF6;&#x662F;&#x5F53;&#x524D;&#x8282;&#x70B9;&#x4E3A;None&#xFF0C;None&#x8282;&#x70B9;&#x53EF;&#x8D21;&#x732E;&#x7684;&#x8DEF;&#x5F84;&#x4E3A;0&#xFF0C;&#x7136;&#x540E;&#x5F00;&#x59CB;&#x56DE;&#x6EAF;&#x3002; def count_path(root): # &#x5982;&#x679C;&#x5F53;&#x524D;node&#x4E3A;null&#xFF0C;&#x5219;&#x53EF;&#x56DE;&#x6EAF;&#x7684;&#x6700;&#x5927;&#x8DEF;&#x5F84;&#x4E3A;0 if not(root): return 0 # &#x8FD8;&#x662F;&#x6DF1;&#x5EA6;&#x4F18;&#x5148;&#x904D;&#x5386;&#x7B97;&#x6CD5;&#x7684;&#x601D;&#x60F3;&#xFF0C;&#x4F46;&#x662F;&#x4E0D;&#x540C;&#x7684;&#x662F;&#xFF0C;&#x6839;&#x636E;&#x9898;&#x76EE;&#x5B9A;&#x4E49;&#x6838;&#x8981;&#x6C42;&#x8BA1;&#x7B97;&#x5168;&#x5C40;&#x6700;&#x5927;&#x8DEF;&#x5F84;&#x548C;&#xFF0C; # &#x53EF;&#x901A;&#x8FC7;&#x8BA1;&#x7B97;&#x5DE6;&#x53F3;&#x6700;&#x5927;&#x8DEF;&#x5F84;&#xFF08;&#x5C40;&#x90E8;&#x6700;&#x5927;&#xFF09;&#xFF0C;&#x5E76;&#x901A;&#x8FC7;&#x6839;&#x8282;&#x70B9;&#x8FDE;&#x63A5;&#x6210;&#x5168;&#x5C40;&#x6700;&#x5927;&#x8DEF;&#x5F84;&#x548C; # &#x5C40;&#x90E8;&#x6700;&#x5927;&#xFF1A;&#x5DE6;&#x5B50;&#x6811;&#x6700;&#x5927;&#x8DEF;&#x5F84; left = count_path(root.left) # &#x5C40;&#x90E8;&#x6700;&#x5927;&#xFF1A;&#x53F3;&#x5B50;&#x6811;&#x6700;&#x5927;&#x8DEF;&#x5F84; right = count_path(root.right) # &#x5B9E;&#x65F6;&#x66F4;&#x65B0;&#x53EF;&#x80FD;&#x4EA7;&#x751F;&#x7684;&#x6700;&#x5927;&#x8DEF;&#x5F84;&#x548C;&#xFF1A;&#x5DE6;&#x5B50;&#x6811;&#x6700;&#x5927;&#x8DEF;&#x5F84;+&#x53F3;&#x5B50;&#x6811;&#x6700;&#x5927;&#x8DEF;&#x5F84;+&#x6839;&#x8282;&#x70B9;&#x6743;&#x503C; # &#x4E0E;&#x4E4B;&#x524D;&#x7684;&#x6700;&#x5927;&#x8DEF;&#x5F84;&#x6BD4;&#x8F83;&#xFF0C;&#x5982;&#x679C;&#x5927;&#x4E8E;&#x4E4B;&#x524D;&#x7684;&#x6700;&#x5927;&#x8DEF;&#x5F84;&#xFF0C;&#x5219;&#x5C06;&#x5F53;&#x524D;&#x6700;&#x5927;&#x8DEF;&#x5F84;&#x4F5C;&#x4E3A;&#x6700;&#x5927;&#x8DEF;&#x5F84; self.max_path = max(self.max_path, left + right + root.val) # &#x5C40;&#x90E8;&#x6700;&#x5927;&#x8DEF;&#x5F84;&#x548C;&#xFF08;&#x8DEF;&#x5F84;&#x548C;&#xFF1A;&#x53EA;&#x8D70;&#x4E00;&#x6761;&#x5206;&#x652F;-&gt;&#x9009;&#x6700;&#x5927;&#x5206;&#x652F;&#xFF09;&#xFF1A;&#x56DE;&#x6EAF;&#x5F53;&#x524D;&#x904D;&#x5386;&#x5230;&#x7684;&#x6700;&#x5927;&#x8DEF;&#x5F84;&#xFF0C; # &#x5982;&#x679C;&#x51FA;&#x73B0;&#x8D1F;&#x503C;&#x53EA;&#x4F1A;&#x8BA9;&#x5168;&#x5C40;&#x8DEF;&#x5F84;&#x548C;&#x66F4;&#x5C0F;&#xFF0C;&#x6545;&#x4E0D;&#x8BA1;&#xFF08;&#x820D;-&gt;0&#xFF09; return max(0, max(left, right) + root.val) count_path(root) return self.max_path &#x603B;&#x7ED3; &#x56DB;&#x6708;&#x7684;&#x6311;&#x6218;&#x7ED3;&#x675F;&#x4E86;&#xFF0C;&#x8FD9;&#x4E2A;&#x6708;&#x786E;&#x5B9E;&#x662F;&#x5F88;&#x5FD9;&#xFF0C;&#x4F46;&#x5F88;&#x5F00;&#x5FC3;&#x81EA;&#x5DF1;&#x8FD8;&#x662F;&#x575A;&#x6301;&#x4E0B;&#x6765;&#x4E86;&#xFF0C;&#x867D;&#x7136;&#x6BCF;&#x5929;&#x53EA;&#x505A;&#x4E00;&#x9053;&#x9898;&#xFF0C;&#x4F46;&#x662F;&#x6709;&#x7684;&#x9898;&#x8FD8;&#x662F;&#x633A;&#x78E8;&#x4EBA;&#x7684;&#x3002;&#x4F46;&#x597D;&#x5728;&#x6700;&#x540E;&#x6311;&#x6218;&#x6210;&#x529F;&#xFF0C;&#x4E5F;&#x62FF;&#x5230;&#x4E86;&#x6240;&#x6709;&#x7684;&#x5956;&#x52B1;&#x3002;&#x1F60A; &#x6211;&#x7684;&#x62D6;&#x5EF6;&#x75C7;&#x5F88;&#x4E25;&#x91CD;&#x8BF6;&#xFF0C;&#x867D;&#x7136;&#x6BCF;&#x5929;&#x4E8B;&#x5F88;&#x591A;&#xFF0C;&#x4F46;&#x4ED4;&#x7EC6;&#x60F3;&#x60F3;&#xFF0C;&#x6709;&#x65F6;&#x5019;&#x81EA;&#x5DF1;&#x8FD8;&#x662F;&#x6709;&#x5F88;&#x591A;&#x65F6;&#x95F4;&#x7684;&#xFF0C;&#x600E;&#x4E48;&#x5C31;&#x975E;&#x5F97;&#x8981;&#x62D6;&#x5230;deadline&#xFF0C;&#x7136;&#x540E;&#x7126;&#x8651;&#x4E0D;&#x5DF2;&#xFFE3;&#x25A1;&#xFFE3;&#xFF5C;&#xFF5C;&#x3002;&#x6162;&#x6162;&#x6539;&#x6389;&#x8FD9;&#x4E2A;&#x4E0D;&#x597D;&#x7684;&#x4E60;&#x60EF;&#x5427;&#xFF01; &#x7ACB;&#x4E2A;flag&#xFF0C;&#x4E94;&#x6708;&#x7EE7;&#x7EED;~ &#x1F60A;","categories":[{"name":"Technology","slug":"Technology","permalink":"https://littlemeemoon.cn/categories/Technology/"},{"name":"Coding","slug":"Technology/Coding","permalink":"https://littlemeemoon.cn/categories/Technology/Coding/"},{"name":"Leetcode","slug":"Technology/Coding/Leetcode","permalink":"https://littlemeemoon.cn/categories/Technology/Coding/Leetcode/"}],"tags":[{"name":"Leetcode","slug":"Leetcode","permalink":"https://littlemeemoon.cn/tags/Leetcode/"},{"name":"Python","slug":"Python","permalink":"https://littlemeemoon.cn/tags/Python/"},{"name":"Algorithm","slug":"Algorithm","permalink":"https://littlemeemoon.cn/tags/Algorithm/"}],"keywords":[{"name":"Technology","slug":"Technology","permalink":"https://littlemeemoon.cn/categories/Technology/"},{"name":"Coding","slug":"Technology/Coding","permalink":"https://littlemeemoon.cn/categories/Technology/Coding/"},{"name":"Leetcode","slug":"Technology/Coding/Leetcode","permalink":"https://littlemeemoon.cn/categories/Technology/Coding/Leetcode/"}]},{"title":"Leetcode Note in Apri 2020 | part 4 | day 22-28 | (二)","slug":"Technology/Coding/Leetcode/Leetcode-Note-in-Apri-2020-part-4-day-22-28-(二)","date":"2020-04-29T09:35:23.000Z","updated":"2020-06-04T04:19:01.758Z","comments":true,"path":"2020/04/29/Technology/Coding/Leetcode/Leetcode-Note-in-Apri-2020-part-4-day-22-28-(二)/","link":"","permalink":"https://littlemeemoon.cn/2020/04/29/Technology/Coding/Leetcode/Leetcode-Note-in-Apri-2020-part-4-day-22-28-(%E4%BA%8C)/","excerpt":"","text":"&#x5199;&#x5728;&#x524D;&#x9762;&#x7684;&#x8BDD; &#x8D85;&#x65F6;&#x4E86;&#x4E00;&#x5929;&#x3002;&#x3002;&#x8FD9;&#x6B21;&#x7684;&#x6587;&#x7AE0;&#x6709;&#x70B9;&#x70B9;&#x9EBB;&#x70E6;&#xFF0C;&#x592A;&#x591A;&#x516C;&#x5F0F;&#xFF0C;&#x8BA9;&#x6211;&#x4E00;&#x76F4;&#x90FD;&#x4E0D;&#x60F3;&#x5F00;&#x59CB;&#x5199;&#xFF0C;&#x54C8;&#x54C8;&#x54C8;&#x54C8;&#xFF0C;&#x4ECA;&#x5929;&#x4E0B;&#x5348;&#x8FD8;&#x662F;&#x51B3;&#x5B9A;&#x4E0D;&#x80FD;&#x518D;&#x62D6;&#x4E86;&#xFF0C;&#x90A3;&#x6211;&#x4EEC;&#x5F00;&#x59CB;&#x5427;~ First Unique Number You have a queue of integers, you need to retrieve the first unique integer in the queue. Implement the FirstUnique class: - FirstUnique(int[] nums) Initializes the object with the numbers in the queue. - int showFirstUnique() returns the value of the first unique integer of the queue, and returns -1 if there is no such integer. - void add(int value) insert value to the queue. Example 1: Input: [&quot;FirstUnique&quot;,&quot;showFirstUnique&quot;,&quot;add&quot;,&quot;showFirstUnique&quot;,&quot;add&quot;,&quot;showFirstUnique&quot;,&quot;add&quot;,&quot;showFirstUnique&quot;] [[[2,3,5]],[],[5],[],[2],[],[3],[]] Output: [null,2,null,2,null,3,null,-1] Explanation: FirstUnique firstUnique = new FirstUnique([2,3,5]); firstUnique.showFirstUnique(); // return 2 firstUnique.add(5); // the queue is now [2,3,5,5] firstUnique.showFirstUnique(); // return 2 firstUnique.add(2); // the queue is now [2,3,5,5,2] firstUnique.showFirstUnique(); // return 3 firstUnique.add(3); // the queue is now [2,3,5,5,2,3] firstUnique.showFirstUnique(); // return -1 &#x9898;&#x76EE;&#x5927;&#x610F;&#x662F;&#x5B9E;&#x73B0;&#x4E00;&#x4E2A;FirstUnique&#x7C7B;&#xFF0C;&#x5305;&#x542B;&#x4E24;&#x4E2A;&#x65B9;&#x6CD5;&#xFF1A; add: &#x5F80;&#x6570;&#x7EC4;&#x91CC;&#x9762;&#x589E;&#x52A0;&#x5143;&#x7D20;&#xFF1B; showFirstUnique: &#x8FD4;&#x56DE;&#x5F53;&#x524D;&#x6570;&#x7EC4;&#x91CC;&#x9762;&#x7B2C;&#x4E00;&#x4E2A;&#x552F;&#x4E00;&#x503C;&#x3002; Solution &#x8FD9;&#x4E2A;&#x9898;&#x5E94;&#x8BE5;&#x7B97;&#x662F;&#x6BD4;&#x8F83;&#x7B80;&#x5355;&#x7684;&#xFF0C;&#x89E3;&#x9898;&#x601D;&#x8DEF;&#x4E5F;&#x5F88;&#x5BB9;&#x6613;&#x60F3;&#x5230;&#xFF0C;&#x4E3B;&#x8981;&#x5C31;&#x662F;&#x770B;&#x600E;&#x4E48;&#x4F18;&#x5316;&#xFF0C;&#x4F7F;&#x65F6;&#x95F4;&#x590D;&#x6742;&#x5EA6;&#x548C;&#x7A7A;&#x95F4;&#x590D;&#x6742;&#x5EA6;&#x5C3D;&#x53EF;&#x80FD;&#x7684;&#x5C0F;&#x3002;&#x6211;&#x6700;&#x5F00;&#x59CB;&#x60F3;&#x5230;&#x7684;&#x601D;&#x8DEF;&#x662F;&#x7528;&#x4E00;&#x4E2A;dictionary&#x6765;&#x5B58;&#x653E;&#x552F;&#x4E00;&#x6570;&#xFF0C;&#x7136;&#x540E;&#x5E0C;&#x671B;&#x80FD;&#x6392;&#x5E8F;&#xFF0C;&#x6240;&#x4EE5;&#x5C31;&#x7528;&#x7684;OrderedDict&#xFF0C;&#x4F46;&#x662F;&#x540E;&#x9762;&#x6628;&#x665A;&#x770B;&#x8BA8;&#x8BBA;&#x7684;&#x65F6;&#x5019;&#xFF0C;&#x6709;&#x7684;&#x5C0F;&#x4F19;&#x4F34;&#x8BF4;python3.6&#x4EE5;&#x4E0A;&#x5DF2;&#x7ECF;&#x652F;&#x6301;dictionary&#x6392;&#x5E8F;&#x4E86;&#xFF0C;&#x6240;&#x4EE5;&#x5C31;&#x6CA1;&#x5FC5;&#x8981;&#x7528;OrderedDict&#x4E86;&#xFF0C;&#x7136;&#x540E;&#x6211;&#x5C31;&#x76F4;&#x63A5;&#x7528;&#x7684;dictionary&#x3002; &#x5BF9;&#x4E8E;&#x6240;&#x6709;&#x5143;&#x7D20;&#x6211;&#x6700;&#x5F00;&#x59CB;&#x8FD8;&#x662F;&#x60F3;&#x7740;&#x7528;&#x4E00;&#x4E2A;dictionary&#x6765;&#x5B58;&#x653E;&#xFF0C;&#x540E;&#x9762;&#x770B;&#x4E86;&#x5927;&#x5BB6;&#x7684;&#x8BA8;&#x8BBA;&#xFF0C;&#x5176;&#x5B9E;&#x6CA1;&#x5FC5;&#x8981;&#x7528;dictionary&#x5B58;&#x653E;&#xFF0C;&#x53EF;&#x4EE5;&#x7528;&#x4E00;&#x4E2A;set&#x5B58;&#x653E;&#x6240;&#x6709;&#x51FA;&#x73B0;&#x8FC7;&#x7684;&#x5143;&#x7D20;&#x3002; &#x56E0;&#x4E3A;&#x8FD9;&#x4E2A;&#x7C7B;&#x53EA;&#x6709;&#x589E;&#x52A0;&#x5143;&#x7D20;&#x7684;&#x65B9;&#x6CD5;&#xFF0C;&#x6CA1;&#x6709;&#x5220;&#x51CF;&#x5143;&#x7D20;&#x7684;&#x65B9;&#x6CD5;&#xFF0C;&#x6240;&#x4EE5;&#x53EA;&#x8981;&#x51FA;&#x73B0;&#x8FC7;&#xFF0C;&#x5C31;&#x4E00;&#x76F4;&#x5B58;&#x5728;&#x3002;&#x8FD9;&#x6837;&#x95EE;&#x9898;&#x5C31;&#x53D8;&#x5F97;&#x7B80;&#x5355;&#x4E86;&#xFF0C;&#x6211;&#x4EEC;&#x53EA;&#x9700;&#x8981;&#x8BB0;&#x5F55;&#x6BCF;&#x4E00;&#x4E2A;&#x552F;&#x4E00;&#x5143;&#x7D20;&#x548C;&#x4EE5;&#x524D;&#x51FA;&#x73B0;&#x8FC7;&#x7684;&#x5143;&#x7D20;&#xFF0C;&#x5982;&#x679C;&#x65B0;&#x589E;&#x52A0;&#x7684;&#x5143;&#x7D20;&#x662F;&#x4EE5;&#x524D;&#x7684;&#x552F;&#x4E00;&#x5143;&#x7D20;&#xFF0C;&#x90A3;&#x4E48;&#x5C31;&#x4ECE;&#x552F;&#x4E00;&#x5143;&#x7D20;&#x7684;dictionary&#x4E2D;&#x5220;&#x9664;&#x8FD9;&#x4E2A;&#x5143;&#x7D20;&#x3002;&#x5177;&#x4F53;&#x770B;&#x4EE3;&#x7801;&#x5B9E;&#x73B0;&#x3002; class FirstUnique: def __init__(self, nums: List[int]): self.uniq = {} self.num_set = set() for num in nums: self.add(num) def showFirstUnique(self) -&gt; int: for num in self.uniq.keys(): return num return -1 def add(self, value: int) -&gt; None: if value in self.num_set: self.uniq.pop(value, 1) else: self.num_set.add(value) self.uniq[value] = 1 # Your FirstUnique object will be instantiated and called as such: # obj = FirstUnique(nums) # param_1 = obj.showFirstUnique() # obj.add(value) Longest Common Subsequence Given two strings text1 and text2, return the length of their longest common subsequence. A subsequence of a string is a new string generated from the original string with some characters(can be none) deleted without changing the relative order of the remaining characters. (eg, &quot;ace&quot; is a subsequence of &quot;abcde&quot; while &quot;aec&quot; is not). A common subsequence of two strings is a subsequence that is common to both strings. If there is no common subsequence, return 0. Example 1: Input: text1 = &quot;abcde&quot;, text2 = &quot;ace&quot; Output: 3 Explanation: The longest common subsequence is &quot;ace&quot; and its length is 3. Example 2: Input: text1 = &quot;abc&quot;, text2 = &quot;abc&quot; Output: 3 Explanation: The longest common subsequence is &quot;abc&quot; and its length is 3. Example 3: Input: text1 = &quot;abc&quot;, text2 = &quot;def&quot; Output: 0 Explanation: There is no such common subsequence, so the result is 0. Solution &#x9898;&#x610F;&#x4E0D;&#x96BE;&#x7406;&#x89E3;&#xFF0C;&#x5C31;&#x662F;&#x627E;&#x4E24;&#x4E2A;&#x5B57;&#x7B26;&#x4E32;&#x4E2D;&#x7684;&#x6700;&#x5927;&#x5B50;&#x4E32;&#x957F;&#x5EA6;&#xFF0C;&#x4F46;&#x662F;&#x8FD9;&#x4E2A;&#x9898;&#x6211;&#x505A;&#x4E86;&#x5F88;&#x4E45;&#xFF08;&#x8FD8;&#x9700;&#x7EE7;&#x7EED;&#x52AA;&#x529B;&#x5440;&#x1F606;&#xFF09;&#xFF0C;&#x6700;&#x540E;&#x770B;&#x4E86;&#x5927;&#x5BB6;&#x7684;&#x8BA8;&#x8BBA;&#xFF0C;&#x7136;&#x540E;&#x6162;&#x6162;&#x627E;&#x5230;&#x4E86;&#x6BD4;&#x8F83;&#x597D;&#x7684;&#x89E3;&#x51B3;&#x65B9;&#x6848;&#x3002; &#x5173;&#x4E8E;&#x8FD9;&#x4E2A;&#x95EE;&#x9898;&#xFF0C;&#x5927;&#x5BB6;&#x53EF;&#x4EE5;&#x770B;&#x770B;&#x7EF4;&#x57FA;&#x767E;&#x79D1; &#x6700;&#x957F;&#x516C;&#x5171;&#x5B50;&#x5E8F;&#x5217;&#xFF08;LCS&#xFF09;&#x95EE;&#x9898;&#x662F;&#x5728;&#x4E00;&#x7EC4;&#x5E8F;&#x5217;&#xFF08;&#x901A;&#x5E38;&#x53EA;&#x6709;&#x4E24;&#x4E2A;&#x5E8F;&#x5217;&#xFF09;&#x4E2D;&#x627E;&#x5230;&#x6240;&#x6709;&#x5E8F;&#x5217;&#x5171;&#x6709;&#x7684;&#x6700;&#x957F;&#x5B50;&#x5E8F;&#x5217;&#x7684;&#x95EE;&#x9898;&#x3002;&#x5B83;&#x4E0D;&#x540C;&#x4E8E;&#x6700;&#x957F;&#x7684;&#x5E38;&#x89C1;&#x5B50;&#x5B57;&#x7B26;&#x4E32;&#x95EE;&#x9898;&#xFF1A;&#x4E0E;&#x5B50;&#x5B57;&#x7B26;&#x4E32;&#x4E0D;&#x540C;&#xFF0C;&#x5B50;&#x5E8F;&#x5217;&#x4E0D;&#x9700;&#x8981;&#x5360;&#x636E;&#x539F;&#x59CB;&#x5E8F;&#x5217;&#x4E2D;&#x7684;&#x8FDE;&#x7EED;&#x4F4D;&#x7F6E;&#x3002;&#x6700;&#x957F;&#x7684;&#x5E38;&#x89C1;&#x5B50;&#x5E8F;&#x5217;&#x95EE;&#x9898;&#x662F;&#x7ECF;&#x5178;&#x8BA1;&#x7B97;&#x673A;&#x79D1;&#x5B66;&#x95EE;&#x9898;&#xFF0C;&#x5B83;&#x662F;&#x6570;&#x636E;&#x6BD4;&#x8F83;&#x7A0B;&#x5E8F;&#xFF08;&#x4F8B;&#x5982;diff&#x5B9E;&#x7528;&#x7A0B;&#x5E8F;&#xFF09;&#x7684;&#x57FA;&#x7840;&#xFF0C;&#x5E76;&#x5DF2;&#x5728;&#x8BA1;&#x7B97;&#x8BED;&#x8A00;&#x5B66;&#x548C;&#x751F;&#x7269;&#x4FE1;&#x606F;&#x5B66;&#x4E2D;&#x5F97;&#x5230;&#x5E94;&#x7528;&#x3002;&#x5B83;&#x4E5F;&#x88AB;&#x4FEE;&#x8BA2;&#x63A7;&#x5236;&#x7CFB;&#x7EDF;&#xFF08;&#x4F8B;&#x5982;Git&#xFF09;&#x5E7F;&#x6CDB;&#x4F7F;&#x7528;&#xFF0C;&#x7528;&#x4E8E;&#x534F;&#x8C03;&#x5BF9;&#x4FEE;&#x8BA2;&#x63A7;&#x5236;&#x7684;&#x6587;&#x4EF6;&#x96C6;&#x5408;&#x6240;&#x505A;&#x7684;&#x591A;&#x9879;&#x66F4;&#x6539;&#x3002;&#x4F8B;&#x5982;&#xFF0C;&#x8003;&#x8651;&#x5E8F;&#x5217;&#xFF08;ABCD&#xFF09;&#x548C;&#xFF08;ACBAD&#xFF09;&#x3002;&#x5B83;&#x4EEC;&#x5177;&#x6709;5&#x4E2A;&#x957F;&#x5EA6;&#x4E3A;2&#x7684;&#x516C;&#x5171;&#x5B50;&#x5E8F;&#x5217;&#xFF1A;&#xFF08;AB&#xFF09;&#xFF0C;&#xFF08;AC&#xFF09;&#xFF0C;&#xFF08;AD&#xFF09;&#xFF0C;&#xFF08;BD&#xFF09;&#x548C;&#xFF08;CD&#xFF09;&#xFF1B;2&#x4E2A;&#x957F;&#x5EA6;&#x4E3A;3&#x7684;&#x5E38;&#x89C1;&#x5B50;&#x5E8F;&#x5217;&#xFF1A;&#xFF08;ABD&#xFF09;&#x548C;&#xFF08;ACD&#xFF09;&#xFF1B;&#x4E0D;&#x518D;&#x662F;&#x5E38;&#x89C1;&#x7684;&#x5B50;&#x5E8F;&#x5217;&#x3002;&#x56E0;&#x6B64;&#xFF08;ABD&#xFF09;&#x548C;&#xFF08;ACD&#xFF09;&#x662F;&#x5B83;&#x4EEC;&#x6700;&#x957F;&#x7684;&#x516C;&#x5171;&#x5B50;&#x5E8F;&#x5217;&#x3002; &#x89E3;&#x9898;&#x601D;&#x8DEF;&#xFF08;&#x52A8;&#x6001;&#x89C4;&#x5212;&#xFF09; LCS&#x95EE;&#x9898;&#x5177;&#x6709;&#x6700;&#x4F73;&#x5B50;&#x7ED3;&#x6784;&#xFF1A;&#x53EF;&#x4EE5;&#x5C06;&#x95EE;&#x9898;&#x5206;&#x89E3;&#x4E3A;&#x66F4;&#x5C0F;&#xFF0C;&#x66F4;&#x7B80;&#x5355;&#x7684;&#x5B50;&#x95EE;&#x9898;&#xFF0C;&#x518D;&#x5C06;&#x95EE;&#x9898;&#x5206;&#x89E3;&#x4E3A;&#x66F4;&#x7B80;&#x5355;&#x7684;&#x5B50;&#x95EE;&#x9898;&#xFF0C;&#x4F9D;&#x6B64;&#x7C7B;&#x63A8;&#xFF0C;&#x76F4;&#x5230;&#x6700;&#x7EC8;&#x89E3;&#x51B3;&#x65B9;&#x6848;&#x53D8;&#x5F97;&#x65E0;&#x5173;&#x7D27;&#x8981;&#x3002; LCS&#x5177;&#x6709;&#x91CD;&#x53E0;&#x7684;&#x5B50;&#x95EE;&#x9898;&#xFF1A;&#x9AD8;&#x7EA7;&#x522B;&#x5B50;&#x95EE;&#x9898;&#x7684;&#x89E3;&#x51B3;&#x65B9;&#x6848;&#x7ECF;&#x5E38;&#x91CD;&#x7528;&#x4F4E;&#x7EA7;&#x522B;&#x5B50;&#x95EE;&#x9898;&#x7684;&#x89E3;&#x51B3;&#x65B9;&#x6848;&#x3002;&#x5177;&#x6709;&#x8FD9;&#x4E24;&#x4E2A;&#x5C5E;&#x6027;&#x7684;&#x95EE;&#x9898;&#x9002;&#x5408;&#x4E8E;&#x52A8;&#x6001;&#x7F16;&#x7A0B;&#x65B9;&#x6CD5;&#xFF0C;&#x5728;&#x8FD9;&#x79CD;&#x65B9;&#x6CD5;&#x4E2D;&#xFF0C;&#x5B50;&#x95EE;&#x9898;&#x7684;&#x89E3;&#x51B3;&#x65B9;&#x6848;&#x5F97;&#x4EE5;&#x8BB0;&#x5FC6;&#xFF0C;&#x5373;&#x5B50;&#x95EE;&#x9898;&#x7684;&#x89E3;&#x51B3;&#x65B9;&#x6848;&#x88AB;&#x4FDD;&#x5B58;&#x4EE5;&#x4F9B;&#x91CD;&#x7528;&#x3002; Prefixes SSS&#x7684;&#x524D;&#x7F00;SnS_nSn&#x200B;&#x5B9A;&#x4E49;&#x4E3A;SSS&#x7684;&#x524D;n&#x4E2A;&#x5B57;&#x7B26;&#x3002; &#x4F8B;&#x5982;&#xFF0C;S=(AGCA)S =(AGCA)S=(AGCA)&#x7684;&#x524D;&#x7F00;&#x4E3A;&#xFF1A; S0=()S1=(A)S2=(AG)S3=(AGC)S4=(AGCA) S_0 = () \\\\ S_1 = (A) \\\\ S_2 = (AG) \\\\ S_3 = (AGC) \\\\ S_4 = (AGCA) S0&#x200B;=()S1&#x200B;=(A)S2&#x200B;=(AG)S3&#x200B;=(AGC)S4&#x200B;=(AGCA) &#x5C06;&#x51FD;&#x6570;LCS(X,Y)LCS(X, Y)LCS(X,Y)&#x5B9A;&#x4E49;&#x4E3A;X&#x548C;Y&#x5171;&#x6709;&#x7684;&#x6700;&#x957F;&#x5B50;&#x5E8F;&#x5217;&#x3002;&#x8BE5;&#x51FD;&#x6570;&#x5177;&#x6709;&#x4E24;&#x4E2A;&#x6709;&#x8DA3;&#x7684;&#x7279;&#x6027;: &#x7B2C;&#x4E00;&#x7279;&#x6027; &#x5047;&#x8BBE;&#x4E24;&#x4E2A;&#x5E8F;&#x5217;&#x90FD;&#x4EE5;&#x540C;&#x4E00;&#x5143;&#x7D20;&#x7ED3;&#x5C3E;&#x3002;&#x7136;&#x540E;&#xFF0C;&#x5B83;&#x4EEC;&#x7684;LCS&#x662F;&#x5E8F;&#x5217;&#x7684;LCS&#xFF0C;&#x5176;&#x4E2D;&#x6392;&#x9664;&#x4E86;&#x6700;&#x540E;&#x4E00;&#x4E2A;&#x5143;&#x7D20;&#xFF0C;&#x5E76;&#x6DFB;&#x52A0;&#x4E86;&#x516C;&#x5171;&#x7684;&#x6700;&#x540E;&#x4E00;&#x4E2A;&#x5143;&#x7D20;&#x3002; &#x4F8B;&#x5982;&#xFF0C; LCS((BANANA), (ATANA)) = LCS((BANAN),(ATAN))^(A)&#xFF0C;&#x5176;&#x4E2D;^&#x8868;&#x793A;&#x5B57;&#x7B26;&#x4E32;&#x8FDE;&#x63A5;&#x3002; &#x7EE7;&#x7EED;&#x5269;&#x4F59;&#x7684;&#x516C;&#x5171;&#x5143;&#x7D20;: LCS((BANANA), (ATANA)) = LCS((BAN), (AT))^(ANA)&#x3002; &#x901A;&#x5E38;&#xFF0C;&#x5BF9;&#x4E8E;&#x957F;&#x5EA6;&#x4E3A;n&#x548C;m&#x7684;&#x4EFB;&#x4F55;&#x5E8F;&#x5217;X&#x548C;Y&#xFF0C;&#x5982;&#x679C;&#x6211;&#x4EEC;&#x8868;&#x793A;&#x5B83;&#x4EEC;&#x7684;&#x5143;&#x7D20;x1x_1x1&#x200B;&#x81F3;xnx_nxn&#x200B;&#x548C;y1y_1y1&#x200B;&#x81F3;ymy_mym&#x200B;&#x4EE5;&#x53CA;&#x5B83;&#x4EEC;&#x7684;&#x524D;&#x7F00;X1X_1X1&#x200B;&#x81F3;Xn&#x2212;1X_{n-1}Xn&#x2212;1&#x200B;&#x548C;Y1Y_1Y1&#x200B;&#x81F3;Ym&#x2212;1Y_{m-1}Ym&#x2212;1&#x200B;&#xFF0C;&#x5219;&#xFF1A; If:xn=ymThen:LCS(Xn,Ym)=LCS(Xn&#x2212;1,Ym&#x2212;1)&#x2227;xn If: x_n = y_m \\\\ Then: LCS(X_n, Y_m) = LCS( X_{n-1}, Y_{m-1}) \\land x_n If:xn&#x200B;=ym&#x200B;Then:LCS(Xn&#x200B;,Ym&#x200B;)=LCS(Xn&#x2212;1&#x200B;,Ym&#x2212;1&#x200B;)&#x2227;xn&#x200B; &#x6CE8;&#x610F;:XnX_nXn&#x200B;&#x548C;YmY_mYm&#x200B;&#x7684;LCS&#x6D89;&#x53CA;&#x786E;&#x5B9A;&#x8F83;&#x77ED;&#x5E8F;&#x5217;Xn&#x2212;1X_{n-1}Xn&#x2212;1&#x200B;&#x548C;Ym&#x2212;1Y_{m-1}Ym&#x2212;1&#x200B;&#x7684;LCS&#x3002; &#x7B2C;&#x4E8C;&#x7279;&#x6027; &#x5047;&#x8BBE;&#x4E24;&#x4E2A;&#x5E8F;&#x5217;X&#x548C;Y&#x4E0D;&#x5728;&#x540C;&#x4E00;&#x7B26;&#x53F7;&#x4E2D;&#x3002;&#x90A3;&#x4E48;X&#x548C;Y&#x7684;LCS&#x662F;LCS(Xn,Ym&#x2212;1)LCS(X_n, Y_{m-1})LCS(Xn&#x200B;,Ym&#x2212;1&#x200B;)&#x548C;LCS(Xn&#x2212;1,Ym)LCS(X_{n-1}, Y_m)LCS(Xn&#x2212;1&#x200B;,Ym&#x200B;)&#x4E2D;&#x7684;&#x8F83;&#x957F;&#x8005;&#x3002; &#x4E3A;&#x4E86;&#x65B9;&#x4FBF;&#x7406;&#x89E3;&#xFF0C;&#x53EF;&#x8003;&#x8651;&#x4EE5;&#x4E0B;&#x4E24;&#x4E2A;&#x5E8F;&#x5217;&#xFF1A; sequence X: (ABCDEFG) (n elements) sequence Y: (BCDGK) (m elements) &#x8FD9;&#x4E24;&#x4E2A;&#x5E8F;&#x5217;&#x7684;LCS&#x8981;&#x4E48;&#x4EE5;G&#xFF08;&#x5E8F;&#x5217;X&#x7684;&#x6700;&#x540E;&#x4E00;&#x4E2A;&#x5143;&#x7D20;&#xFF09;&#x7ED3;&#x5C3E;&#xFF0C;&#x8981;&#x4E48;&#x4E0D;&#x4EE5;G&#x7ED3;&#x5C3E;&#x3002; &#x60C5;&#x51B5;1&#xFF1A;LCS&#x4EE5;G&#x7ED3;&#x5C3E;&#x8FD9;&#x6837;&#x5B83;&#x5C31;&#x4E0D;&#x80FD;&#x4EE5;K&#x7ED3;&#x5C3E; &#x56E0;&#x6B64;&#xFF0C;&#x4ECE;&#x5E8F;&#x5217;Y&#x4E2D;&#x5220;&#x9664;K&#x4E0D;&#x4F1A;&#x53D7;&#x5230;&#x635F;&#x5BB3;&#xFF1A;&#x5982;&#x679C;K&#x5728;LCS&#x4E2D;&#xFF0C;&#x5B83;&#x5C06;&#x662F;&#x5B83;&#x7684;&#x6700;&#x540E;&#x4E00;&#x4E2A;&#x5B57;&#x7B26;&#xFF1B;&#x7ED3;&#x679C;&#xFF0C;K&#x4E0D;&#x5728;LCS&#x4E2D;&#x3002;&#x6240;&#x4EE5;:LCS(Xn,Ym)=LCS(Xn,Ym&#x2212;1)LCS(X_n, Y_m) = LCS(X_n, Y_{m-1})LCS(Xn&#x200B;,Ym&#x200B;)=LCS(Xn&#x200B;,Ym&#x2212;1&#x200B;). &#x60C5;&#x51B5;2&#xFF1A;LCS&#x4E0D;&#x4EE5;G&#x7ED3;&#x5C3E; &#x6211;&#x4EEC;&#x53EF;&#x4EE5;&#x4ECE;&#x5E8F;&#x5217;X&#x4E2D;&#x5220;&#x9664;G&#xFF08;&#x4E0E;&#x4E0A;&#x8FF0;&#x76F8;&#x540C;&#x7684;&#x539F;&#x56E0;&#xFF09;&#x3002;&#x6240;&#x4EE5;:LCS(Xn,Ym)=LCS(Xn&#x2212;1,Ym)LCS(X_n,Y_m) = LCS(X_{n-1}, Y_m)LCS(Xn&#x200B;,Ym&#x200B;)=LCS(Xn&#x2212;1&#x200B;,Ym&#x200B;) &#x65E0;&#x8BBA;&#x5982;&#x4F55;&#xFF0C;&#x6211;&#x4EEC;&#x6B63;&#x5728;&#x5BFB;&#x627E;&#x7684;LCS&#x662F;LCS(Xn,Ym&#x2212;1)LCS(X_n, Y_{m-1})LCS(Xn&#x200B;,Ym&#x2212;1&#x200B;)&#x6216;LCS(Xn&#x2212;1,Ym)LCS(X_{n-1}, Y_m)LCS(Xn&#x2212;1&#x200B;,Ym&#x200B;)&#x4E4B;&#x4E00;&#x3002;&#x6700;&#x540E;&#x4E24;&#x4E2A;LCS&#x90FD;&#x662F;X&#x548C;Y&#x7684;&#x516C;&#x5171;&#x5B50;&#x5E8F;&#x5217;&#x3002;LCS(X, Y)&#x6700;&#x957F;&#x3002;&#x56E0;&#x6B64;&#xFF0C;&#x5B83;&#x7684;&#x503C;&#x662F;LCS(Xn,Ym&#x2212;1)LCS(X_n, Y_{m-1})LCS(Xn&#x200B;,Ym&#x2212;1&#x200B;)&#x548C;LCS(Xn&#x2212;1,Ym)LCS(X_{n-1}, Y_m)LCS(Xn&#x2212;1&#x200B;,Ym&#x200B;)&#x7684;&#x6700;&#x957F;&#x5E8F;&#x5217;&#x3002; LCS&#x65B9;&#x6CD5; &#x4E24;&#x4E2A;&#x5E8F;&#x5217;&#x5B9A;&#x4E49;&#x5982;&#x4E0B;&#xFF1A;X=(x1x2&#x22EF;xm)X=(x_{1}x_{2}\\cdots x_{m})X=(x1&#x200B;x2&#x200B;&#x22EF;xm&#x200B;)&#x548C;Y=(y1y2&#x22EF;yn)Y=(y_{1}y_{2}\\cdots y_{n})Y=(y1&#x200B;y2&#x200B;&#x22EF;yn&#x200B;)&#x3002;XXX&#x7684;&#x524D;&#x7F00;&#x4E3A;X1,2,&#x22EF;&#x2009;,mX_{1, 2,\\cdots, m}X1,2,&#x22EF;,m&#x200B;,YYY&#x7684;&#x524D;&#x7F00;&#x4E3A;Y1,2,&#x22EF;&#x2009;,nY_{1, 2, \\cdots, n}Y1,2,&#x22EF;,n&#x200B;&#x3002;&#x4EE4;LCS(Xi,Yj)LCS(X_{i}, Y_{j})LCS(Xi&#x200B;,Yj&#x200B;)&#x4EE3;&#x8868;&#x524D;&#x7F00;XiX_iXi&#x200B;&#x548C;YjY_jYj&#x200B;&#x7684;&#x6700;&#x957F;&#x516C;&#x5171;&#x5B50;&#x5E8F;&#x5217;&#x96C6;&#x3002;&#x8FD9;&#x7EC4;&#x5E8F;&#x5217;&#x7531;&#x4EE5;&#x4E0B;&#x7ED9;&#x51FA;&#xFF1A; LCS(Xi,Yj)={&#xD8;if&#xA0;i=0orj=0LCS(Xi&#x2212;1,Yj&#x2212;1)if&#xA0;i,j&gt;0andxi=yjmax&#x2061;LCS(Xi,Yj&#x2212;1),LCS(Xi&#x2212;1,Yj)if&#xA0;i,j&gt;0andxi&#x2260;yj LCS(X_i, Y_j) = \\begin{cases} \\text{\\O} &amp;\\text{if } i = 0 or j = 0 \\\\ LCS(X_{i-1}, Y_{j-1}) &amp;\\text{if } i,j &gt; 0 and x_i = y_j \\\\ \\max {LCS(X_i, Y_{j-1}), LCS(X_{i-1}, Y_j)} &amp;\\text{if } i,j &gt; 0 and x_i \\neq y_j \\\\ \\end{cases} LCS(Xi&#x200B;,Yj&#x200B;)=&#x23A9;&#x23AA;&#x23A8;&#x23AA;&#x23A7;&#x200B;&#xD8;LCS(Xi&#x2212;1&#x200B;,Yj&#x2212;1&#x200B;)maxLCS(Xi&#x200B;,Yj&#x2212;1&#x200B;),LCS(Xi&#x2212;1&#x200B;,Yj&#x200B;)&#x200B;if&#xA0;i=0orj=0if&#xA0;i,j&gt;0andxi&#x200B;=yj&#x200B;if&#xA0;i,j&gt;0andxi&#x200B;&#xE020;&#x200B;=yj&#x200B;&#x200B; &#x8981;&#x67E5;&#x627E;XiX_{i}Xi&#x200B;&#x548C;YjY_{j}Yj&#x200B;&#x7684;LCSLCSLCS&#xFF0C;&#x9700;&#x6BD4;&#x8F83;xix_{i}xi&#x200B;&#x548C;yjy_{j}yj&#x200B;&#x3002;&#x5982;&#x679C;&#x5B83;&#x4EEC;&#x76F8;&#x7B49;&#xFF0C;&#x5219;&#x5E8F;&#x5217;LCS(Xi&#x2212;1,Yj&#x2212;1)LCS(X_{i-1}, Y_{j-1})LCS(Xi&#x2212;1&#x200B;,Yj&#x2212;1&#x200B;)&#x7531;&#x8BE5;&#x5143;&#x7D20;xix_{i}xi&#x200B;&#x6269;&#x5C55;&#x3002;&#x5982;&#x679C;&#x5B83;&#x4EEC;&#x4E0D;&#x76F8;&#x7B49;&#xFF0C;&#x5219;&#x4E24;&#x4E2A;&#x5E8F;&#x5217;&#x4E2D;&#x7684;&#x8F83;&#x957F;&#x8005;&#xFF0C;LCS(Xi,Yj&#x2212;1)LCS(X_{i}, Y_{j-1})LCS(Xi&#x200B;,Yj&#x2212;1&#x200B;)&#x548C;LCS(Xi&#x2212;1,Yj)LCS(X_{i-1}, Y_{j})LCS(Xi&#x2212;1&#x200B;,Yj&#x200B;)&#xFF0C;&#x5C06;&#x4FDD;&#x7559;&#x3002;&#xFF08;&#x5982;&#x679C;&#x5B83;&#x4EEC;&#x7684;&#x957F;&#x5EA6;&#x76F8;&#x540C;&#xFF0C;&#x4F46;&#x4E0D;&#x76F8;&#x540C;&#xFF0C;&#x5219;&#x5C06;&#x4E24;&#x8005;&#x90FD;&#x4FDD;&#x7559;&#x3002;&#xFF09; Example &#x5C06;&#x627E;&#x5230;R=(GAC)R = (GAC)R=(GAC)&#x548C;C=(AGCAT)C = (AGCAT)C=(AGCAT)&#x5171;&#x6709;&#x7684;&#x6700;&#x957F;&#x5B50;&#x5E8F;&#x5217;&#x3002;&#x56E0;&#x4E3A;LCSLCSLCS&#x51FD;&#x6570;&#x4F7F;&#x7528;&#x201C;zeroth&#x201D;&#x5143;&#x7D20;&#xFF0C;&#x6240;&#x4EE5;&#x4E3A;&#x8FD9;&#x4E9B;&#x5E8F;&#x5217;&#x5B9A;&#x4E49;&#x96F6;&#x524D;&#x7F00;&#x5F88;&#x65B9;&#x4FBF;&#xFF1A;R0=&#xD8;R_0 = \\text{\\O}R0&#x200B;=&#xD8;; &#x5E76;&#x4E14;C0=&#xD8;C_0 =\\text{\\O}C0&#x200B;=&#xD8;&#x3002;&#x6240;&#x6709;&#x524D;&#x7F00;&#x90FD;&#x653E;&#x5728;&#x4E00;&#x4E2A;&#x8868;&#x4E2D;&#xFF0C;&#x7B2C;&#x4E00;&#x884C;&#x4E3A;CCC&#xFF08;&#x4F7F;&#x5B83;&#x6210;&#x4E3A;&#x5217;&#x6807;&#x9898;&#xFF09;&#xFF0C;&#x7B2C;&#x4E00;&#x5217;&#x4E3A;RRR&#xFF08;&#x4F7F;&#x5B83;&#x6210;&#x4E3A;&#x884C;&#x6807;&#x9898;&#xFF09;&#x3002; 01 &#x8BE5;&#x8868;&#x7528;&#x4E8E;&#x5B58;&#x50A8;&#x8BA1;&#x7B97;&#x7684;&#x6BCF;&#x4E2A;&#x6B65;&#x9AA4;&#x7684;LCSLCSLCS&#x5E8F;&#x5217;&#x3002;&#x7B2C;&#x4E8C;&#x5217;&#x548C;&#x7B2C;&#x4E8C;&#x884C;&#x5DF2;&#x7528;&#xD8;\\text{\\O}&#xD8;&#x586B;&#x5145;&#xFF0C;&#x56E0;&#x4E3A;&#x5C06;&#x7A7A;&#x5E8F;&#x5217;&#x4E0E;&#x975E;&#x7A7A;&#x5E8F;&#x5217;&#x8FDB;&#x884C;&#x6BD4;&#x8F83;&#x65F6;&#xFF0C;&#x6700;&#x957F;&#x7684;&#x516C;&#x5171;&#x5B50;&#x5E8F;&#x5217;&#x59CB;&#x7EC8;&#x4E3A;&#x7A7A;&#x5E8F;&#x5217;&#x3002; &#x901A;&#x8FC7;&#x6BD4;&#x8F83;&#x6BCF;&#x4E2A;&#x5E8F;&#x5217;&#x4E2D;&#x7684;&#x7B2C;&#x4E00;&#x4E2A;&#x5143;&#x7D20;&#x6765;&#x786E;&#x5B9A;LCS(R1,C1)LCS(R1, C1)LCS(R1,C1)&#x3002;G&#x548C;A&#x4E0D;&#x76F8;&#x540C;&#xFF0C;&#x56E0;&#x6B64;&#x8BE5;LCSLCSLCS&#xFF08;&#x4F7F;&#x7528;&#x201C;&#x7B2C;&#x4E8C;&#x7279;&#x6027;&#x201D;&#xFF09;&#x83B7;&#x5F97;&#x4E24;&#x4E2A;&#x5E8F;&#x5217;LCS(R1,C0)LCS(R_1, C_0)LCS(R1&#x200B;,C0&#x200B;)&#x548C;LCS(R0,C1)LCS(R_0, C_1)LCS(R0&#x200B;,C1&#x200B;)&#x4E2D;&#x6700;&#x957F;&#x7684;&#x4E00;&#x4E2A;&#x3002;&#x6839;&#x636E;&#x8BE5;&#x8868;&#xFF0C;&#x8FD9;&#x4E24;&#x4E2A;&#x90FD;&#x662F;&#x7A7A;&#x7684;&#xFF0C;&#x56E0;&#x6B64;LCS(R1,C0)LCS(R_1, C_0)LCS(R1&#x200B;,C0&#x200B;)&#x4E5F;&#x4E3A;&#x7A7A;&#xFF0C;&#x5982;&#x4E0B;&#x8868;&#x6240;&#x793A;&#x3002;&#x7BAD;&#x5934;&#x8868;&#x793A;&#x8BE5;&#x5E8F;&#x5217;&#x6765;&#x81EA;&#x4E0A;&#x65B9;&#x7684;&#x5355;&#x5143;LCS(R0,C1)LCS(R_0, C_1)LCS(R0&#x200B;,C1&#x200B;)&#x548C;&#x5DE6;&#x4FA7;&#x7684;&#x5355;&#x5143;LCS(R1,C0)LCS(R_1, C_0)LCS(R1&#x200B;,C0&#x200B;)&#x3002; &#x901A;&#x8FC7;&#x6BD4;&#x8F83;G&#x548C;G&#x6765;&#x786E;&#x5B9A;LCS(R1,C2)LCS(R_1, C_2)LCS(R1&#x200B;,C2&#x200B;)&#x3002;&#x5B83;&#x4EEC;&#x5339;&#x914D;&#xFF0C;&#x56E0;&#x6B64;&#x5C06;G&#x9644;&#x52A0;&#x5230;&#x5DE6;&#x4E0A;&#x5E8F;&#x5217;LCS(R0,C1)LCS(R_0, C_1)LCS(R0&#x200B;,C1&#x200B;)&#xFF08;&#x5373;(&#xD8;)(\\text{\\O})(&#xD8;)&#xFF09;&#xFF0C;&#x5F97;&#x5230;(&#xD8;G)(\\text{\\O}G)(&#xD8;G)&#xFF0C;&#x5373;(G)(G)(G)&#x3002; &#x5BF9;&#x4E8E;LCS(R1,C3)LCS(R_1, C_3)LCS(R1&#x200B;,C3&#x200B;)&#xFF0C;G&#x548C;C&#x4E0D;&#x5339;&#x914D;&#x3002;&#x4E0A;&#x9762;&#x7684;&#x5E8F;&#x5217;&#x4E3A;&#x7A7A;&#xFF1B;LCS(R1,C3)LCS(R_1, C_3)LCS(R1&#x200B;,C3&#x200B;)&#x4E2D;&#x7684;&#x6700;&#x957F;&#x8005;&#x4E3A;(G)(G)(G)&#x3002;&#x7BAD;&#x5934;&#x6307;&#x5411;&#x5DE6;&#x4FA7;&#xFF0C;&#x56E0;&#x4E3A;&#x90A3;&#x662F;&#x4E24;&#x4E2A;&#x5E8F;&#x5217;&#x4E2D;&#x6700;&#x957F;&#x7684;&#x5E8F;&#x5217;&#x3002; 4.LCS(R1,C4)LCS(R_1, C_4)LCS(R1&#x200B;,C4&#x200B;)&#x540C;&#x6837;&#x662F;(G)(G)(G)&#x3002; 5.LCS(R1,C5)LCS(R_1, C_5)LCS(R1&#x200B;,C5&#x200B;)&#x540C;&#x6837;&#x662F;(G)(G)(G)&#x3002; 02 &#x5BF9;&#x4E8E;LCS(R2,C1)LCS(R_2, C_1)LCS(R2&#x200B;,C1&#x200B;)&#xFF0C;&#x5C06;A&#x4E0E;A&#x8FDB;&#x884C;&#x6BD4;&#x8F83;&#x3002;&#x8FD9;&#x4E24;&#x4E2A;&#x5143;&#x7D20;&#x5339;&#x914D;&#xFF0C;&#x56E0;&#x6B64;&#x5C06;A&#x9644;&#x52A0;&#x5230;&#xFF0C;&#x5F97;&#x5230;(A)(A)(A)&#x3002; &#x5BF9;&#x4E8E;LCS(R2,C2)LCS(R_2, C_2)LCS(R2&#x200B;,C2&#x200B;)&#xFF0C;A&#x548C;G&#x4E0D;&#x5339;&#x914D;&#xFF0C;&#x56E0;&#x6B64;&#x4F7F;&#x7528;LCS(R1,C2)LCS(R_1, C_2)LCS(R1&#x200B;,C2&#x200B;)&#x4E2D;&#x6700;&#x957F;&#x7684;(G)(G)(G)&#x548C;LCS(R2,C1)LCS(R_2, C_1)LCS(R2&#x200B;,C1&#x200B;)&#x4E2D;&#x6700;&#x957F;&#x7684;(A)(A)(A)&#x3002;&#x5728;&#x8FD9;&#x79CD;&#x60C5;&#x51B5;&#x4E0B;&#xFF0C;&#x5B83;&#x4EEC;&#x5404;&#x81EA;&#x5305;&#x542B;&#x4E00;&#x4E2A;&#x5143;&#x7D20;&#xFF0C;&#x56E0;&#x6B64;&#x6B64;LCS&#x5177;&#x6709;&#x4E24;&#x4E2A;&#x5B50;&#x5E8F;&#x5217;&#xFF1A;(A)(A)(A)&#x548C;(G)(G)(G)&#x3002; &#x5BF9;&#x4E8E;LCS(R2,C3)LCS(R_2, C_3)LCS(R2&#x200B;,C3&#x200B;)&#xFF0C;A&#x4E0E;C&#x4E0D;&#x5339;&#x914D;&#x3002;LCS(R2,C2)LCS(R_2, C_2)LCS(R2&#x200B;,C2&#x200B;)&#x5305;&#x542B;&#x5E8F;&#x5217;(A)(A)(A)&#x548C;(G)(G)(G)&#xFF1B;LCS(R1,C3)LCS(R_1, C_3)LCS(R1&#x200B;,C3&#x200B;)&#x662F;(G)(G)(G)&#xFF0C;&#x5DF2;&#x7ECF;&#x5305;&#x542B;&#x5728;LCS(R2,C2)LCS(R_2, C_2)LCS(R2&#x200B;,C2&#x200B;)&#x4E2D;&#x3002;&#x7ED3;&#x679C;&#x662F;LCS(R2,C3)LCS(R_2, C_3)LCS(R2&#x200B;,C3&#x200B;)&#x8FD8;&#x5305;&#x542B;&#x4E24;&#x4E2A;&#x5B50;&#x5E8F;&#x5217;(A)(A)(A)&#x548C;(G)(G)(G)&#x3002; &#x5BF9;&#x4E8E;LCS(R2,C4)LCS(R_2, C_4)LCS(R2&#x200B;,C4&#x200B;)&#xFF0C;A&#x5339;&#x914D;A&#xFF0C;&#x8BE5;A&#x9644;&#x52A0;&#x5728;&#x5DE6;&#x4E0A;&#x65B9;&#x7684;&#x5355;&#x5143;&#x683C;&#x4E0A;&#xFF0C;&#x7ED9;&#x51FA;(GA)(GA)(GA)&#x3002; &#x5BF9;&#x4E8E;LCS(R2,C5)LCS(R_2, C_5)LCS(R2&#x200B;,C5&#x200B;)&#xFF0C;A&#x4E0E;T&#x4E0D;&#x5339;&#x914D;&#x3002;&#x6BD4;&#x8F83;&#x4E24;&#x4E2A;&#x5E8F;&#x5217;(GA)(GA)(GA)&#x548C;(G)(G)(G)&#xFF0C;&#x6700;&#x957F;&#x7684;&#x662F;(GA)(GA)(GA)&#xFF0C;&#x56E0;&#x6B64;LCS(R2,C5)LCS(R_2, C_5)LCS(R2&#x200B;,C5&#x200B;)&#x662F;(GA)(GA)(GA)&#x3002; 03 &#x5BF9;&#x4E8E;LCS(R3,C1)LCS(R_3, C_1)LCS(R3&#x200B;,C1&#x200B;)&#xFF0C;C&#x548C;A&#x4E0D;&#x5339;&#x914D;&#xFF0C;&#x56E0;&#x6B64;LCS(R3,C1)LCS(R_3, C_1)LCS(R3&#x200B;,C1&#x200B;)&#x83B7;&#x5F97;&#x4E24;&#x4E2A;&#x5E8F;&#x5217;&#x4E2D;&#x6700;&#x957F;&#x7684;(A)(A)(A)&#x3002; &#x5BF9;&#x4E8E;LCS(R3,C2)LCS(R_3, C_2)LCS(R3&#x200B;,C2&#x200B;)&#xFF0C;C&#x548C;G&#x4E0D;&#x5339;&#x914D;&#x3002;LCS(R3,C1)LCS(R_3, C_1)LCS(R3&#x200B;,C1&#x200B;)&#x548C;LCS(R3,C2)LCS(R_3, C_2)LCS(R3&#x200B;,C2&#x200B;)&#x90FD;&#x6709;&#x4E00;&#x4E2A;&#x5143;&#x7D20;&#x3002;&#x7ED3;&#x679C;&#x662F;LCS(R3,C2)LCS(R_3, C_2)LCS(R3&#x200B;,C2&#x200B;)&#x5305;&#x542B;&#x4E24;&#x4E2A;&#x5B50;&#x5E8F;&#x5217;(A)(A)(A)&#x548C;(G)(G)(G)&#x3002; &#x5BF9;&#x4E8E;LCS(R3,C3)LCS(R_3, C_3)LCS(R3&#x200B;,C3&#x200B;)&#xFF0C;C&#x548C;C&#x5339;&#x914D;&#xFF0C;&#x56E0;&#x6B64;C&#x9644;&#x52A0;&#x5230;LCS(R2,C2)LCS(R_2, C_2)LCS(R2&#x200B;,C2&#x200B;)&#xFF0C;&#x540E;&#x8005;&#x5305;&#x542B;&#x4E24;&#x4E2A;&#x5B50;&#x5E8F;&#x5217;(A)(A)(A)&#x548C;(G)(G)(G)&#xFF0C;&#x7ED9;&#x51FA;(AC)(AC)(AC)&#x548C;(GC)(GC)(GC)&#x3002; &#x5BF9;&#x4E8E;LCS(R3,C4)LCS(R_3, C_4)LCS(R3&#x200B;,C4&#x200B;)&#xFF0C;C&#x548C;A&#x4E0D;&#x5339;&#x914D;&#x3002;&#x5C06;&#x5305;&#x542B;(AC)(AC)(AC)&#x548C;(GC)(GC)(GC)&#x7684;LCS(R3,C3)LCS(R_3, C_3)LCS(R3&#x200B;,C3&#x200B;)&#x4E0E;&#x5305;&#x542B;(GA)(GA)(GA)&#x7684;LCS(R2,C4)LCS(R_2, C_4)LCS(R2&#x200B;,C4&#x200B;)&#x7EC4;&#x5408;&#x5728;&#x4E00;&#x8D77;&#xFF0C;&#x603B;&#x5171;&#x5F97;&#x5230;&#x4E09;&#x4E2A;&#x5E8F;&#x5217;&#xFF1A;(AC)(AC)(AC)&#xFF0C;(GC)(GC)(GC)&#x548C;(GA)(GA)(GA)&#x3002; &#x6700;&#x540E;&#xFF0C;&#x5BF9;&#x4E8E;LCS(R3,C5)LCS(R_3, C_5)LCS(R3&#x200B;,C5&#x200B;)&#xFF0C;C&#x548C;T&#x4E0D;&#x5339;&#x914D;&#x3002;&#x7ED3;&#x679C;&#x662F;LCS(R3,C5)LCS(R_3, C_5)LCS(R3&#x200B;,C5&#x200B;)&#x8FD8;&#x5305;&#x542B;&#x4E09;&#x4E2A;&#x5E8F;&#x5217;&#xFF0C;(AC)(AC)(AC)&#xFF0C;(GC)(GC)(GC)&#x548C;(GA)(GA)(GA)&#x3002; 04 &#x6700;&#x7EC8;&#x7ED3;&#x679C;&#x662F;&#x6700;&#x540E;&#x4E00;&#x4E2A;&#x5355;&#x5143;&#x683C;&#x5305;&#x542B;(AGCAT)(AGCAT)(AGCAT)&#x548C;(GAC)(GAC)(GAC)&#x5171;&#x6709;&#x7684;&#x6240;&#x6709;&#x6700;&#x957F;&#x5B50;&#x5E8F;&#x5217;&#xFF1B;&#x5B83;&#x4EEC;&#x662F;(AC)(AC)(AC)&#xFF0C;(GC)(GC)(GC)&#x548C;(GA)(GA)(GA)&#x3002;&#x8BE5;&#x8868;&#x8FD8;&#x663E;&#x793A;&#x4E86;&#x6BCF;&#x5BF9;&#x53EF;&#x80FD;&#x7684;&#x524D;&#x7F00;&#x6700;&#x957F;&#x7684;&#x516C;&#x5171;&#x5B50;&#x5E8F;&#x5217;&#x3002;&#x4F8B;&#x5982;&#xFF0C;&#x5BF9;&#x4E8E;(AGC)(AGC)(AGC)&#x548C;(GA)(GA)(GA)&#xFF0C;&#x6700;&#x957F;&#x7684;&#x516C;&#x5171;&#x5B50;&#x5E8F;&#x5217;&#x662F;(A)(A)(A)&#x548C;(G)(G)(G)&#x3002; Traceback approach &#x8BA1;&#x7B97;LCS&#x8868;&#x7684;&#x4E00;&#x884C;&#x7684;LCS&#x4EC5;&#x9700;&#x8981;&#x5F53;&#x524D;&#x884C;&#x548C;&#x4E0A;&#x4E00;&#x884C;&#x7684;&#x89E3;&#x51B3;&#x65B9;&#x6848;&#x3002;&#x4F46;&#x662F;&#xFF0C;&#x5BF9;&#x4E8E;&#x957F;&#x5E8F;&#x5217;&#xFF0C;&#x8FD9;&#x4E9B;&#x5E8F;&#x5217;&#x53EF;&#x80FD;&#x4F1A;&#x53D8;&#x5F97;&#x5F88;&#x957F;&#x800C;&#x4E14;&#x5F88;&#x957F;&#xFF0C;&#x9700;&#x8981;&#x5927;&#x91CF;&#x7684;&#x5B58;&#x50A8;&#x7A7A;&#x95F4;&#x3002;&#x5982;&#x4E0B;&#x8868;&#x6240;&#x793A;&#xFF0C;&#x4E0D;&#x4FDD;&#x5B58;&#x5B9E;&#x9645;&#x7684;&#x5B50;&#x5E8F;&#x5217;&#xFF0C;&#x800C;&#x662F;&#x4FDD;&#x5B58;&#x5B50;&#x5E8F;&#x5217;&#x7684;&#x957F;&#x5EA6;&#x548C;&#x7BAD;&#x5934;&#x7684;&#x65B9;&#x5411;&#xFF0C;&#x53EF;&#x4EE5;&#x8282;&#x7701;&#x5B58;&#x50A8;&#x7A7A;&#x95F4;&#x3002; 05 &#x4ECE;&#x8868;&#x4E2D;&#x7684;&#x6700;&#x540E;&#x4E00;&#x4E2A;&#x5355;&#x5143;&#x683C;&#x5F00;&#x59CB;&#xFF0C;&#x901A;&#x8FC7;&#x5411;&#x540E;&#x8DDF;&#x968F;&#x7BAD;&#x5934;&#x7684;&#x201C;&#x56DE;&#x6EAF;&#x201D;&#x8FC7;&#x7A0B;&#x63A8;&#x5BFC;&#x51FA;&#x5B9E;&#x9645;&#x7684;&#x5B50;&#x5E8F;&#x5217;&#x3002;&#x5F53;&#x957F;&#x5EA6;&#x51CF;&#x5C0F;&#x65F6;&#xFF0C;&#x5E8F;&#x5217;&#x5FC5;&#x987B;&#x5177;&#x6709;&#x4E00;&#x4E2A;&#x516C;&#x5171;&#x5143;&#x7D20;&#x3002;&#x5F53;&#x5355;&#x5143;&#x683C;&#x4E2D;&#x663E;&#x793A;&#x4E24;&#x4E2A;&#x7BAD;&#x5934;&#x65F6;&#xFF0C;&#x53EF;&#x80FD;&#x6709;&#x51E0;&#x79CD;&#x8DEF;&#x5F84;&#x3002;&#x4E0B;&#x8868;&#x662F;&#x8FDB;&#x884C;&#x6B64;&#x7C7B;&#x5206;&#x6790;&#x7684;&#x8868;&#x683C;&#xFF0C;&#x5176;&#x4E2D;&#x957F;&#x5EA6;&#x5C06;&#x8981;&#x51CF;&#x5C11;&#x7684;&#x5355;&#x5143;&#x683C;&#x4E2D;&#x5E26;&#x6709;&#x6570;&#x5B57;&#x3002;&#x7C97;&#x4F53;&#x6570;&#x5B57;&#x8868;&#x793A;&#x5E8F;&#x5217;(GA)(GA)(GA)&#x3002; 06 &#x4F2A;&#x4EE3;&#x7801; &#x8BA1;&#x7B97;LCS&#x7684;&#x957F;&#x5EA6; function LCSLength(X[1..m], Y[1..n]) C = array(0..m, 0..n) for i := 0..m C[i, 0] = 0 for j := 0..n C[0, j] = 0 for i := 1..m for j := 1..n if X[i] = Y[j] //i-1 and j-1 if reading X &amp; Y from zero C[i, j] := C[i-1, j-1] + 1 else C[i, j] := max(C[i, j-1], C[i-1, j]) return C[m, n] &#x8BFB;&#x51FA;LCS function backtrack(C[0..m,0..n], X[1..m], Y[1..n], i, j) if i = 0 or j = 0 return &quot;&quot; if X[i] = Y[j] return backtrack(C, X, Y, i-1, j-1) + X[i] if C[i, j-1] &gt; C[i-1, j] return backtrack(C, X, Y, i, j-1) return backtrack(C, X, Y, i-1, j) &#x8BFB;&#x51FA;&#x6240;&#x6709;LCS function backtrackAll(C[0..m,0..n], X[1..m], Y[1..n], i, j) if i = 0 or j = 0 return {&quot;&quot;} if X[i] = Y[j] return {Z + X[i] for all Z in backtrackAll(C, X, Y, i-1, j-1)} R := {} if C[i,j-1] &#x2265; C[i-1,j] R := R &#x222A; backtrackAll(C, X, Y, i, j-1) if C[i-1,j] &#x2265; C[i,j-1] R := R &#x222A; backtrackAll(C, X, Y, i-1, j) return R &#x6253;&#x5370;&#x5DEE;&#x5F02; function printDiff(C[0..m,0..n], X[1..m], Y[1..n], i, j) if i &gt; 0 and j &gt; 0 and X[i] = Y[j] printDiff(C, X, Y, i-1, j-1) print &quot; &quot; + X[i] else if j &gt; 0 and (i = 0 or C[i,j-1] &#x2265; C[i-1,j]) printDiff(C, X, Y, i, j-1) print &quot;+ &quot; + Y[j] else if i &gt; 0 and (j = 0 or C[i,j-1] &lt; C[i-1,j]) printDiff(C, X, Y, i-1, j) print &quot;- &quot; + X[i] else print &quot;&quot; &#x51CF;&#x5C11;&#x5B58;&#x50A8;&#x7A7A;&#x95F4; &#x7B97;&#x6CD5;&#x4E2D;&#x7684;C&#x77E9;&#x9635;&#x968F;&#x7740;&#x5E8F;&#x5217;&#x7684;&#x957F;&#x5EA6;&#x5E73;&#x65B9;&#x589E;&#x957F;&#x3002;&#x5BF9;&#x4E8E;&#x4E24;&#x4E2A;100&#x4E2A;&#x9879;&#x76EE;&#x7684;&#x5E8F;&#x5217;&#xFF0C;&#x5C06;&#x9700;&#x8981;10,000&#x4E2A;&#x9879;&#x76EE;&#x7684;&#x77E9;&#x9635;&#xFF0C;&#x5E76;&#x4E14;&#x9700;&#x8981;&#x8FDB;&#x884C;10,000&#x4E2A;&#x6BD4;&#x8F83;&#x3002;&#x5728;&#x5927;&#x591A;&#x6570;&#x5B9E;&#x9645;&#x60C5;&#x51B5;&#x4E0B;&#xFF0C;&#x5C24;&#x5176;&#x662F;&#x6E90;&#x4EE3;&#x7801;&#x5DEE;&#x5F02;&#x548C;&#x8865;&#x4E01;&#xFF0C;&#x6587;&#x4EF6;&#x7684;&#x5F00;&#x5934;&#x548C;&#x7ED3;&#x5C3E;&#x5F88;&#x5C11;&#x66F4;&#x6539;&#xFF0C;&#x5E76;&#x4E14;&#x51E0;&#x4E4E;&#x53EF;&#x4EE5;&#x80AF;&#x5B9A;&#x4E0D;&#x4F1A;&#x540C;&#x65F6;&#x66F4;&#x6539;&#x3002;&#x5982;&#x679C;&#x5E8F;&#x5217;&#x4E2D;&#x95F4;&#x4EC5;&#x66F4;&#x6539;&#x4E86;&#x51E0;&#x9879;&#xFF0C;&#x5219;&#x53EF;&#x4EE5;&#x6D88;&#x9664;&#x5F00;&#x59CB;&#x548C;&#x7ED3;&#x675F;&#x3002;&#x8FD9;&#x4E0D;&#x4EC5;&#x51CF;&#x5C11;&#x4E86;&#x77E9;&#x9635;&#x7684;&#x5B58;&#x50A8;&#x8981;&#x6C42;&#xFF0C;&#x800C;&#x4E14;&#x51CF;&#x5C11;&#x4E86;&#x5FC5;&#x987B;&#x8FDB;&#x884C;&#x7684;&#x6BD4;&#x8F83;&#x6B21;&#x6570;&#x3002; function LCS(X[1..m], Y[1..n]) start := 1 m_end := m n_end := n trim off the matching items at the beginning while start &#x2264; m_end and start &#x2264; n_end and X[start] = Y[start] start := start + 1 trim off the matching items at the end while start &#x2264; m_end and start &#x2264; n_end and X[m_end] = Y[n_end] m_end := m_end - 1 n_end := n_end - 1 C = array(start-1..m_end, start-1..n_end) only loop over the items that have changed for i := start..m_end for j := start..n_end the algorithm continues as before ... &#x5728;&#x6700;&#x4F73;&#x60C5;&#x51B5;&#x4E0B;&#xFF0C;&#x5373;&#x5E8F;&#x5217;&#x65E0;&#x53D8;&#x5316;&#xFF0C;&#x8FD9;&#x79CD;&#x4F18;&#x5316;&#x5C06;&#x5B8C;&#x5168;&#x6D88;&#x9664;&#x5BF9;C&#x77E9;&#x9635;&#x7684;&#x9700;&#x6C42;&#x3002;&#x5728;&#x6700;&#x574F;&#x7684;&#x60C5;&#x51B5;&#x4E0B;&#xFF0C;&#x5982;&#x679C;&#x66F4;&#x6539;&#x5E8F;&#x5217;&#x4E2D;&#x7684;&#x7B2C;&#x4E00;&#x4E2A;&#x548C;&#x6700;&#x540E;&#x4E00;&#x4E2A;&#x9879;&#x76EE;&#xFF0C;&#x5219;&#x4EC5;&#x6267;&#x884C;&#x4E24;&#x4E2A;&#x9644;&#x52A0;&#x6BD4;&#x8F83;&#x3002; &#x5982;&#x679C;&#x4EC5;&#x9700;&#x8981;LCS&#x7684;&#x957F;&#x5EA6;&#xFF0C;&#x5219;&#x77E9;&#x9635;&#x53EF;&#x4EE5;&#x8F7B;&#x677E;&#x5730;&#x7B80;&#x5316;&#x4E3A;2&#xD7;min&#x2061;(n,m)2 \\times \\min(n, m)2&#xD7;min(n,m)&#x77E9;&#x9635;&#xFF0C;&#x4E5F;&#x53EF;&#x4EE5;&#x7B80;&#x5316;&#x4E3A;min&#x2061;(n,m)\\min(n, m)min(n,m)+ 1&#x5411;&#x91CF;&#xFF08;&#x66F4;&#x667A;&#x80FD;&#xFF09;&#x4F5C;&#x4E3A;&#x52A8;&#x6001;&#x7F16;&#x7A0B;&#x65B9;&#x6CD5;&#xFF0C;&#x4EC5;&#x9700;&#x8981;&#x77E9;&#x9635;&#x7684;&#x5F53;&#x524D;&#x5217;&#x548C;&#x524D;&#x4E00;&#x5217;&#x3002;Hirschberg&#x7684;&#x7B97;&#x6CD5;&#x5141;&#x8BB8;&#x5728;&#x76F8;&#x540C;&#x7684;&#x4E8C;&#x6B21;&#x65F6;&#x95F4;&#x548C;&#x7EBF;&#x6027;&#x7A7A;&#x95F4;&#x8303;&#x56F4;&#x5185;&#x6784;&#x9020;&#x6700;&#x4F73;&#x5E8F;&#x5217;&#x672C;&#x8EAB;&#x3002; &#x53C2;&#x8003;&#x8D44;&#x6599; https://en.m.wikipedia.org/wiki/Longest_common_subsequence_problem https://leetcode.com/problems/longest-common-subsequence/discuss/351689/JavaPython-3-Two-DP-codes-of-O(mn)-and-O(min(m-n))-spaces-w-picture-and-analysis &#x4EE3;&#x7801;&#x5B9E;&#x73B0; class Solution: def longestCommonSubsequence(self, text1: str, text2: str) -&gt; int: m, n = len(text1), len(text2) if m &lt; n: return self.longestCommonSubsequence(text2, text1) dp = [[0] * (n + 1) for _ in range(2)] for i, c in enumerate(text1): for j, d in enumerate(text2): if c == d: dp[1-i%2][j+1] = 1 + dp[i%2][j] else: dp[1-i%2][j+1] = max(dp[i%2][j+1], dp[1-i%2][j]) return dp[m%2][-1] &#x65F6;&#x95F4;&#x590D;&#x6742;&#x5EA6;&#xFF1A; O(m * n) &#x7A7A;&#x95F4;&#x590D;&#x6742;&#x5EA6;&#xFF1A; O(min(m, n)) &#x603B;&#x7ED3; &#x597D;&#x591A;&#x516C;&#x5F0F;&#xFF0C;&#x624B;&#x90FD;&#x8981;&#x5E9F;&#x4E86;&#xFF0C;&#x773C;&#x775B;&#x4E5F;&#x8981;&#x770B;&#x778E;&#x4E86;&#x3002;&#x3002;&#x3002;&#x9700;&#x8981;&#x597D;&#x597D;&#x6D88;&#x5316;&#x4E00;&#x4E0B;&#xFF0C;&#x91CD;&#x70B9;&#x662F;&#x8981;&#x52A8;&#x624B;&#xFF0C;&#x800C;&#x4E0D;&#x662F;&#x7528;&#x773C;&#x775B;&#x770B;&#x770B;&#x5C31;&#x597D;&#xFF01;","categories":[{"name":"Technology","slug":"Technology","permalink":"https://littlemeemoon.cn/categories/Technology/"},{"name":"Coding","slug":"Technology/Coding","permalink":"https://littlemeemoon.cn/categories/Technology/Coding/"},{"name":"Leetcode","slug":"Technology/Coding/Leetcode","permalink":"https://littlemeemoon.cn/categories/Technology/Coding/Leetcode/"}],"tags":[{"name":"Leetcode","slug":"Leetcode","permalink":"https://littlemeemoon.cn/tags/Leetcode/"},{"name":"Python","slug":"Python","permalink":"https://littlemeemoon.cn/tags/Python/"},{"name":"Algorithm","slug":"Algorithm","permalink":"https://littlemeemoon.cn/tags/Algorithm/"}],"keywords":[{"name":"Technology","slug":"Technology","permalink":"https://littlemeemoon.cn/categories/Technology/"},{"name":"Coding","slug":"Technology/Coding","permalink":"https://littlemeemoon.cn/categories/Technology/Coding/"},{"name":"Leetcode","slug":"Technology/Coding/Leetcode","permalink":"https://littlemeemoon.cn/categories/Technology/Coding/Leetcode/"}]},{"title":"Leetcode Note in Apri 2020 | part 4 | day 22-28 | (一)","slug":"Technology/Coding/Leetcode/Leetcode-Note-in-Apri-2020-part-4-day-22-28-(一)","date":"2020-04-28T14:29:47.000Z","updated":"2020-06-04T04:19:01.758Z","comments":true,"path":"2020/04/28/Technology/Coding/Leetcode/Leetcode-Note-in-Apri-2020-part-4-day-22-28-(一)/","link":"","permalink":"https://littlemeemoon.cn/2020/04/28/Technology/Coding/Leetcode/Leetcode-Note-in-Apri-2020-part-4-day-22-28-(%E4%B8%80)/","excerpt":"","text":"&#x5199;&#x5728;&#x524D;&#x9762;&#x7684;&#x8BDD; &#x8FD9;&#x5468;&#x786C;&#x662F;&#x62D6;&#x5230;&#x4E86;&#x6700;&#x540E;&#x4E00;&#x5929;&#xFF0C;&#x54C8;&#x54C8;&#x54C8;&#x54C8;&#x1F606;&#x3002; Bitwise AND of Numbers Range Given a range [m, n] where 0 &lt;= m &lt;= n &lt;= 2147483647, return the bitwise AND of all numbers in this range, inclusive. Example 1: Input: [5,7] Output: 4 Example 2: Input: [0,1] Output: 0 &#x9898;&#x76EE;&#x5927;&#x610F;&#x662F;&#x7ED9;&#x5B9A;&#x4E00;&#x4E2A;&#x6570;&#x503C;&#x8303;&#x56F4;&#xFF1A;[m, n]&#xFF0C;&#x8FD4;&#x56DE;&#x8FD9;&#x4E2A;&#x8303;&#x56F4;&#x5185;&#x7684;&#x6240;&#x6709;&#x6570;&#x7684;&#x6309;&#x4F4D;&#x4E0E;&#x7ED3;&#x679C;&#x3002; Solution &#x6211;&#x505A;&#x8FD9;&#x4E2A;&#x9898;&#x7684;&#x7B2C;&#x4E00;&#x601D;&#x8DEF;&#x662F;&#x76F4;&#x63A5;&#x6328;&#x4E2A;&#x6309;&#x4F4D;&#x4E0E;&#x1F923;&#xFF0C;&#x5982;&#x679C;m&#xFF0C;n&#x8303;&#x56F4;&#x5C0F;&#xFF0C;&#x8FD9;&#x4E2A;&#x65B9;&#x6CD5;&#x662F;&#x53EF;&#x884C;&#x7684;&#xFF0C;&#x4F46;&#x662F;&#x5982;&#x679C;&#x8303;&#x56F4;&#x5F88;&#x5927;&#xFF0C;&#x8FD9;&#x4E2A;&#x65B9;&#x6CD5;&#x4F1A;&#x7279;&#x522B;&#x8017;&#x65F6;&#xFF0C;&#x751A;&#x81F3;&#x51FA;&#x73B0; time out &#x7684;&#x60C5;&#x51B5;&#x3002;&#x6240;&#x4EE5;&#x8FD9;&#x4E2A;&#x65B9;&#x6CD5;&#x4E0D;&#x53EF;&#x53D6;&#xFF01;&#x274C; &#x540E;&#x9762;&#x6211;&#x53BB;&#x770B;&#x4E86;&#x770B;&#x5176;&#x4ED6;&#x5C0F;&#x4F19;&#x4F34;&#x7684;&#x89E3;&#x9898;&#x65B9;&#x6CD5;&#xFF0C;&#x6211;&#x89C9;&#x5F97;&#x5F88;&#x68D2;&#xFF0C;&#x6700;&#x591A;&#x7684;&#x5C31;&#x662F;&#x627E;&#x89C4;&#x5F8B;&#xFF1A; &#x7531;&#x4E8E;&#x4EFB;&#x4F55;&#x4E00;&#x4E2A;&#x6570;&#x7684;&#x4E8C;&#x8FDB;&#x5236;&#x6570;+1&#x4E4B;&#x540E;&#xFF0C;&#x5176;&#x5728;&#x67D0;&#x4E00;&#x4F4D;&#x4E4B;&#x540E;&#x7684;&#x6570;&#x5B57;&#x5168;&#x90E8;&#x53D6;&#x76F8;&#x53CD;&#x6570;&#xFF0C;&#x4F8B;&#x5982;&#xFF1A; 5 (0101) + 1 = 6 (0110) &#x800C;5&#x548C;6&#x6309;&#x4F4D;&#x4E0E;&#x7684;&#x7ED3;&#x679C;&#x4E3A;&#xFF1A;5 &amp; 6 = 0100&#xFF0C;&#x53EF;&#x4EE5;&#x770B;&#x51FA;&#x4ECE;01&#x4E4B;&#x540E;&#xFF0C;&#x5168;&#x4E3A;0&#x3002; &#x6CBF;&#x7740;&#x8FD9;&#x4E2A;&#x601D;&#x8DEF;&#xFF0C;&#x6211;&#x4EEC;&#x53EF;&#x4EE5;&#x901A;&#x8FC7;&#x627E;&#x516C;&#x5171;&#x524D;&#x7F00;&#x6765;&#x4F18;&#x5316;&#x89E3;&#x9898;&#x65B9;&#x6CD5;&#xFF0C;&#x5177;&#x4F53;&#x770B;&#x4EE3;&#x7801;&#x5B9E;&#x73B0;&#x3002; class Solution: def rangeBitwiseAnd(self, m: int, n: int) -&gt; int: l_m = 0 # m&#x548C;n&#x4F4D;&#x53F3;&#x79FB;&#xFF0C;&#x76F4;&#x5230;&#x627E;&#x5230;&#x5171;&#x540C;&#x524D;&#x7F00; while m != n: m &gt;&gt;= 1 n &gt;&gt;= 1 l_m += 1 return m &lt;&lt; l_m Jump Game Given an array of non-negative integers, you are initially positioned at the first index of the array. Each element in the array represents your maximum jump length at that position. Determine if you are able to reach the last index. Example 1: Input: [2,3,1,1,4] Output: true Explanation: Jump 1 step from index 0 to 1, then 3 steps to the last index. Example 2: Input: [3,2,1,0,4] Output: false Explanation: You will always arrive at index 3 no matter what. Its maximum jump length is 0, which makes it impossible to reach the last index. Solution &#x9898;&#x76EE;&#x5927;&#x610F;&#x662F;&#xFF0C;&#x7ED9;&#x5B9A;&#x4E00;&#x4E2A;&#x6570;&#x7EC4;&#xFF0C;&#x6BCF;&#x4E2A;&#x4F4D;&#x7F6E;&#x7684;&#x6570;&#x5B57;&#x4EE3;&#x8868;&#x5F53;&#x524D;&#x5904;&#x4E8E;&#x8BE5;&#x4F4D;&#x7F6E;&#x65F6;&#x80FD;&#x5F80;&#x524D;&#x8DF3;&#x5F97;&#x6700;&#x5927;&#x6B65;&#x6570;&#xFF0C;&#x8D77;&#x8DF3;&#x4F4D;&#x7F6E;&#x4E3A;0&#xFF0C;&#x6700;&#x540E;&#x5224;&#x65AD;&#x80FD;&#x5426;&#x8DF3;&#x5230;&#x6700;&#x540E;&#x4E00;&#x4E2A;&#x4F4D;&#x7F6E;(len(nums)-1)&#x3002; &#x8FD9;&#x9053;&#x9898;&#x6211;&#x521A;&#x5F00;&#x59CB;&#x6709;&#x70B9;&#x6CA1;&#x641E;&#x6E05;&#x695A;&#x9898;&#x610F;&#xFF0C;&#x6211;&#x4EE5;&#x4E3A;&#x6BCF;&#x6B21;&#x5C31;&#x8DF3;&#x5BF9;&#x5E94;&#x4F4D;&#x7F6E;&#x6240;&#x6307;&#x5B9A;&#x7684;&#x6B65;&#x6570;&#xFF0C;&#x8FD9;&#x6837;&#x7684;&#x8BDD;&#x8FD9;&#x4E2A;&#x9898;&#x5C31;&#x663E;&#x5F97;&#x7279;&#x522B;&#x7B80;&#x5355;&#x4E86;&#x3002;&#x4F46;&#x662F;&#x5176;&#x5B9E;&#x4E0D;&#x662F;&#xFF0C;&#x662F;&#x4F60;&#x8981;&#x5728;&#x6BCF;&#x4E2A;&#x4F4D;&#x7F6E;&#x6700;&#x5927;&#x8DF3;&#x6570;&#x7684;&#x7EA6;&#x675F;&#x4E0B;&#xFF0C;&#x60F3;&#x65B9;&#x8BBE;&#x6CD5;&#x770B;&#x80FD;&#x4E0D;&#x80FD;&#x8DF3;&#x5230;&#x6700;&#x540E;&#x4E00;&#x4E2A;&#x4F4D;&#x7F6E;&#x3002; &#x641E;&#x6E05;&#x695A;&#x9898;&#x610F;&#x4E4B;&#x540E;&#xFF0C;&#x6211;&#x4EEC;&#x53EF;&#x4EE5;&#x60F3;&#x5230;&#x7684;&#x7B97;&#x6CD5;&#x6709;&#xFF1A;&#x52A8;&#x6001;&#x89C4;&#x5212;&#xFF0C;&#x548C;&#x8D2A;&#x5FC3;&#x7B97;&#x6CD5;&#x3002;&#x6211;&#x8FD9;&#x91CC;&#x91C7;&#x7528;&#x7684;&#x662F;&#x8D2A;&#x5FC3;&#x7B97;&#x6CD5;&#xFF0C;&#x5C31;&#x6BCF;&#x6B21;&#x90FD;&#x5E0C;&#x671B;&#x5C3D;&#x53EF;&#x80FD;&#x8DF3;&#x5F97;&#x8FDC;&#xFF0C;&#x8FD9;&#x6837;&#x624D;&#x6709;&#x53EF;&#x80FD;&#x8DF3;&#x5230;&#x6700;&#x540E;&#x4E00;&#x4E2A;&#x4F4D;&#x7F6E;&#x3002;&#x4E3B;&#x8981;&#x601D;&#x8DEF;&#xFF1A; &#x91C7;&#x7528;&#x4E00;&#x4E2A;&#x53D8;&#x91CF;&#x8BB0;&#x5F55;(max_i)&#x5F53;&#x524D;&#x80FD;&#x5230;&#x8FBE;&#x7684;&#x6700;&#x8FDC;&#x4F4D;&#x7F6E;&#xFF1B; &#x7136;&#x540E;&#x904D;&#x5386;&#x6570;&#x7EC4;&#xFF0C;&#x5982;&#x679C;&#x4E4B;&#x524D;&#x8BA1;&#x7B97;&#x7684;&#x6700;&#x5927;&#x8DF3;&#x6570;&#x80FD;&#x5230;&#x8FBE;&#x5F53;&#x524D;&#x4F4D;&#x7F6E;&#xFF0C;&#x5373; max_i &gt;= i&#xFF0C;&#x5E76;&#x4E14;&#x52A0;&#x4E0A;&#x5F53;&#x524D;&#x4F4D;&#x7F6E;&#x7684;&#x8DF3;&#x6570;&#x5927;&#x4E8E;&#x4E4B;&#x524D;&#x80FD;&#x5230;&#x8FBE;&#x7684;&#x6700;&#x8FDC;&#x4F4D;&#x7F6E;&#xFF0C;&#x5219;&#x66F4;&#x65B0;&#x6700;&#x8FDC;&#x53EF;&#x5230;&#x8FBE;&#x7684;&#x4F4D;&#x7F6E;&#xFF1B; &#x6700;&#x540E;&#x5982;&#x679C;&#x6700;&#x8FDC;&#x80FD;&#x5230;&#x8FBE;&#x7684;&#x4F4D;&#x7F6E;index&#x5927;&#x4E8E;&#x7B49;&#x4E8E;&#x6700;&#x540E;&#x4E00;&#x4E2A;&#x4F4D;&#x7F6E;&#xFF0C;&#x5219;&#x53EF;&#x5230;&#x8FBE;&#x6700;&#x540E;&#x4E00;&#x4E2A;&#x4F4D;&#x7F6E;&#x3002; &#x601D;&#x60F3;&#x5F88;&#x7B80;&#x5355;&#xFF0C;&#x5177;&#x4F53;&#x770B;&#x4EE3;&#x7801;&#x5B9E;&#x73B0;&#x3002; class Solution: def canJump(self, nums: List[int]) -&gt; bool: # &#x8BB0;&#x5F55;&#x80FD;&#x5230;&#x8FBE;&#x7684;&#x6700;&#x8FDC;&#x4F4D;&#x7F6E; max_i = 0 for i, jump in enumerate(nums): # &#x8D2A;&#x5FC3;&#x7B97;&#x6CD5;&#x601D;&#x60F3;&#xFF1A;&#x5C3D;&#x53EF;&#x80FD;&#x7684;&#x8DF3;&#x5F97;&#x8FDC; # &#x5982;&#x679C;&#x5F53;&#x524D;&#x4F4D;&#x7F6E;&#x80FD;&#x5230;&#x8FBE;&#xFF0C;&#x5E76;&#x4E14;&#x5F53;&#x524D;&#x4F4D;&#x7F6E; + &#x5F53;&#x524D;&#x4F4D;&#x7F6E;&#x7684;&#x6700;&#x5927;&#x8DF3;&#x6570; &gt; &#x4E4B;&#x524D;&#x53EF;&#x4EE5;&#x5230;&#x8FBE;&#x7684;&#x6700;&#x8FDC;&#x4F4D;&#x7F6E; if max_i &gt;= i and i + jump &gt; max_i: # &#x66F4;&#x65B0;&#x6700;&#x8FDC;&#x80FD;&#x5230;&#x8FBE;&#x7684;&#x4F4D;&#x7F6E; max_i = i + jump return max_i &gt;= i Maximal Square Given a 2D binary matrix filled with 0&apos;s and 1&apos;s, find the largest square containing only 1&apos;s and return its area. Example: Input: 1 0 1 0 0 1 0 1 1 1 1 1 1 1 1 1 0 0 1 0 Output: 4 Solution &#x9898;&#x76EE;&#x5927;&#x610F;&#x662F;&#xFF0C;&#x4ECE;&#x7ED9;&#x5B9A;&#x7684;&#x4E00;&#x4E2A;&#x4E8C;&#x7EF4;&#x4E8C;&#x8FDB;&#x5236;&#x77E9;&#x9635;&#x627E;&#x51FA;&#x53EA;&#x5305;&#x542B;1&#x7684;&#x6700;&#x5927;&#x6B63;&#x65B9;&#x5F62;&#xFF0C;&#x5E76;&#x8FD4;&#x56DE;&#x5176;&#x9762;&#x79EF;&#x3002; &#x8FD9;&#x9053;&#x9898;&#x5F88;&#x5BB9;&#x6613;&#x60F3;&#x5230;&#x7528;&#x52A8;&#x6001;&#x89C4;&#x5212;&#x7684;&#x601D;&#x60F3;&#x6765;&#x89E3;&#x7B54;&#xFF1A; dp[i][j]&#x8868;&#x793A;&#x4EE5;&#x7B2C;i&#x884C;&#xFF0C;&#x7B2C;j&#x5217;&#x5904;&#x4E3A;&#x53F3;&#x4E0B;&#x89D2;&#x7684;&#x6700;&#x5927;&#x6B63;&#x65B9;&#x5F62;&#x7684;&#x8FB9;&#x957F;&#x3002;&#x4EC5;&#x5F53;&#x8BE5;&#x4F4D;&#x7F6E;&#x4E3A;1&#x65F6;&#xFF0C;&#x624D;&#x6709;&#x53EF;&#x80FD;&#x5B58;&#x5728;&#x6B63;&#x65B9;&#x5F62;&#x3002;&#x4E14;&#x9012;&#x63A8;&#x516C;&#x5F0F;&#x4E3A;&#xFF1A; dp[i][j]=min(dp[i&#x2212;1][j&#x2212;1],dp[i&#x2212;1][j],dp[i][j&#x2212;1])+1 dp[i][j]=min(dp[i-1][j-1], dp[i-1][j], dp[i][j-1]) + 1 dp[i][j]=min(dp[i&#x2212;1][j&#x2212;1],dp[i&#x2212;1][j],dp[i][j&#x2212;1])+1 &#x7531;&#x4E0A;&#x8FF0;&#x516C;&#x5F0F;&#x53EF;&#x4EE5;&#x5F97;&#x51FA;&#x5F53;&#x524D;&#x4F4D;&#x7F6E;&#x7684;&#x6700;&#x5927;&#x8FB9;&#x957F;&#x4EC5;&#x53D6;&#x51B3;&#x4E8E;&#x4E0A;&#x4E00;&#x884C;&#x548C;&#x5DE6;&#x4FA7;&#x6700;&#x5927;&#x8FB9;&#x957F;&#xFF0C;&#x56E0;&#x6B64;&#x53EF;&#x5C06;&#x7A7A;&#x95F4;&#x4F18;&#x5316;&#x5230;O(n) &#x501F;&#x52A9;pre&#x6765;&#x4FDD;&#x5B58;&#x5F53;&#x524D;&#x4F4D;&#x7F6E;&#x7684;&#x5DE6;&#x4E0A;&#x65B9;&#x6700;&#x5927;&#x8FB9;&#x957F;&#x3002;&#x5177;&#x4F53;&#x5B9E;&#x73B0;&#x770B;&#x4EE3;&#x7801;&#x3002; class Solution: def maximalSquare(self, matrix: List[List[str]]) -&gt; int: # &#x7279;&#x5224; if not(matrix): return 0 m = len(matrix) n = len(matrix[0]) res = 0 pre = 0 # &#x8BB0;&#x5F55;&#x5F53;&#x524D;&#x4F4D;&#x7F6E;&#x7684;&#x6700;&#x5927;&#x8FB9;&#x957F;&#xFF1A;&#x53D6;&#x51B3;&#x4E8E;&#x4E0A;&#x4E00;&#x884C;&#x548C;&#x5DE6;&#x4FA7;&#x6700;&#x5927;&#x8FB9;&#x957F; dp = [0] * (n + 1) for i in range(0, m): for j in range(1, n + 1): tmp = dp[j] # &#x4EC5;&#x5F53;&#x8BE5;&#x4F4D;&#x7F6E;&#x4E3A;1&#x65F6;&#xFF0C;&#x624D;&#x6709;&#x53EF;&#x80FD;&#x5B58;&#x5728;&#x6B63;&#x65B9;&#x5F62;&#xFF0C;&#x5426;&#x5219;&#x8FB9;&#x957F;&#x4E3A;0 if matrix[i][j-1] == &quot;1&quot;: # &#x82E5;&#x5F53;&#x524D;&#x4F4D;&#x7F6E;&#x4E3A;1&#xFF0C;&#x5219;&#x6B64;&#x5904;&#x53EF;&#x4EE5;&#x6784;&#x6210;&#x7684;&#x6700;&#x5927;&#x6B63;&#x65B9;&#x5F62;&#x7684;&#x8FB9;&#x957F;&#xFF0C; # &#x662F;&#x5176;&#x6B63;&#x4E0A;&#x65B9;&#xFF08;dp[j]&#xFF09;&#xFF0C;&#x5DE6;&#x4FA7;&#xFF08;dp[j-1]&#xFF09;&#xFF0C;&#x548C;&#x5DE6;&#x4E0A;&#x65B9;&#xFF08;pre&#xFF09;&#x4E09;&#x8005;&#x5171;&#x540C;&#x7EA6;&#x675F;&#x7684;&#xFF0C; # &#x4E14;&#x4E3A;&#x4E09;&#x8005;&#x4E2D;&#x7684;&#x6700;&#x5C0F;&#x503C;&#x52A0;1&#x3002; dp[j] = min(pre, dp[j-1], dp[j]) + 1 # &#x8BB0;&#x5F55;&#x5F53;&#x524D;&#x6700;&#x5927;&#x6B63;&#x65B9;&#x5F62;&#x8FB9;&#x957F; res = max(dp[j], res) else: dp[j] = 0 # print(dp) # &#x501F;&#x52A9;pre&#x6765;&#x4FDD;&#x5B58;&#x5F53;&#x524D;&#x4F4D;&#x7F6E;&#x7684;&#x5DE6;&#x4FA7;&#x6700;&#x5927;&#x8FB9;&#x957F; # &#x7B49;&#x5F00;&#x59CB;&#x4E0B;&#x4E00;&#x884C;&#x904D;&#x5386;&#x65F6;&#xFF0C;pre&#x4FBF;&#x662F;&#x8BB0;&#x5F55;&#x4E86;&#x76F8;&#x5BF9;&#x4E8E;&#x5F53;&#x524D;&#x4F4D;&#x7F6E;&#x7684;&#x5DE6;&#x4E0A;&#x4FA7;&#x6700;&#x5927;&#x8FB9;&#x957F; pre = tmp pre = 0 return res * res &#x603B;&#x7ED3; &#x8FD8;&#x6709;&#x4E24;&#x9053;&#x9898;&#x4E0B;&#x6B21;&#x66F4;&#x65B0;~","categories":[{"name":"Technology","slug":"Technology","permalink":"https://littlemeemoon.cn/categories/Technology/"},{"name":"Coding","slug":"Technology/Coding","permalink":"https://littlemeemoon.cn/categories/Technology/Coding/"},{"name":"Leetcode","slug":"Technology/Coding/Leetcode","permalink":"https://littlemeemoon.cn/categories/Technology/Coding/Leetcode/"}],"tags":[{"name":"Leetcode","slug":"Leetcode","permalink":"https://littlemeemoon.cn/tags/Leetcode/"},{"name":"Python","slug":"Python","permalink":"https://littlemeemoon.cn/tags/Python/"},{"name":"Algorithm","slug":"Algorithm","permalink":"https://littlemeemoon.cn/tags/Algorithm/"}],"keywords":[{"name":"Technology","slug":"Technology","permalink":"https://littlemeemoon.cn/categories/Technology/"},{"name":"Coding","slug":"Technology/Coding","permalink":"https://littlemeemoon.cn/categories/Technology/Coding/"},{"name":"Leetcode","slug":"Technology/Coding/Leetcode","permalink":"https://littlemeemoon.cn/categories/Technology/Coding/Leetcode/"}]},{"title":"Leetcode Note in Apri 2020 | part 3 | day 15-21 | (三).","slug":"Technology/Coding/Leetcode/Leetcode-Note-in-Apri-2020-part-3-day-15-21-(三)","date":"2020-04-21T15:54:32.000Z","updated":"2020-06-04T04:19:01.758Z","comments":true,"path":"2020/04/21/Technology/Coding/Leetcode/Leetcode-Note-in-Apri-2020-part-3-day-15-21-(三)/","link":"","permalink":"https://littlemeemoon.cn/2020/04/21/Technology/Coding/Leetcode/Leetcode-Note-in-Apri-2020-part-3-day-15-21-(%E4%B8%89)/","excerpt":"","text":"&#x5199;&#x5728;&#x524D;&#x9762;&#x7684;&#x8BDD; &#x8FD9;&#x5468;&#x592A;&#x5FD9;&#x4E86;&#xFF0C;&#x8BFE;&#x7A0B;&#x4F5C;&#x4E1A;&#x90FD;&#x5806;&#x6210;&#x5C71;&#x5566;&#xFF0C;&#x54C8;&#x54C8;&#x54C8;&#xFF0C;&#x8FD8;&#x662F;&#x8981;&#x9762;&#x5E26;&#x5FAE;&#x7B11;&#x1F642;&#x3002; Minimum Path Sum Given a m x n grid filled with non-negative numbers, find a path from top left to bottom right which minimizes the sum of all numbers along its path. Note: You can only move either down or right at any point in time. Example: Input: [ [1,3,1], [1,5,1], [4,2,1] ] Output: 7 Explanation: Because the path 1&#x2192;3&#x2192;1&#x2192;1&#x2192;1 minimizes the sum. &#x9898;&#x76EE;&#x5927;&#x610F;&#x662F;&#x627E;&#x5230;&#x4ECE;&#x5DE6;&#x4E0A;&#x89D2;&#x5230;&#x53F3;&#x4E0B;&#x89D2;&#x7684;&#x6700;&#x77ED;&#x8DEF;&#x5F84;&#x957F;&#x5EA6;&#x3002;&#x8FD9;&#x9053;&#x9898;&#x5F88;&#x660E;&#x663E;&#x662F;&#x4E2A;&#x52A8;&#x6001;&#x89C4;&#x5212;&#x95EE;&#x9898;&#xFF0C;&#x4F46;&#x662F;&#x6211;&#x4E00;&#x5F00;&#x59CB;&#x5E76;&#x6CA1;&#x6709;&#x60F3;&#x5230;&#x8FD9;&#x4E2A;&#x95EE;&#x9898;&#xFF0C;&#x8FD8;&#x662F;&#x7EC3;&#x592A;&#x5C11;&#x4E86;&#x3002;&#x9996;&#x5148;&#x6211;&#x4EEC;&#x5148;&#x56DE;&#x987E;&#x4E00;&#x4E0B;&#x52A8;&#x6001;&#x89C4;&#x5212;&#x7B97;&#x6CD5;&#x3002; &#x52A8;&#x6001;&#x89C4;&#x5212; &#x52A8;&#x6001;&#x89C4;&#x5212;&#xFF08;&#x82F1;&#x8BED;&#xFF1A;Dynamic programming&#xFF0C;&#x7B80;&#x79F0;DP&#xFF09;&#x662F;&#x4E00;&#x79CD;&#x5728;&#x6570;&#x5B66;&#x3001;&#x7BA1;&#x7406;&#x79D1;&#x5B66;&#x3001;&#x8BA1;&#x7B97;&#x673A;&#x79D1;&#x5B66;&#x3001;&#x7ECF;&#x6D4E;&#x5B66;&#x548C;&#x751F;&#x7269;&#x4FE1;&#x606F;&#x5B66;&#x4E2D;&#x4F7F;&#x7528;&#x7684;&#xFF0C;&#x901A;&#x8FC7;&#x628A;&#x539F;&#x95EE;&#x9898;&#x5206;&#x89E3;&#x4E3A;&#x76F8;&#x5BF9;&#x7B80;&#x5355;&#x7684;&#x5B50;&#x95EE;&#x9898;&#x7684;&#x65B9;&#x5F0F;&#x6C42;&#x89E3;&#x590D;&#x6742;&#x95EE;&#x9898;&#x7684;&#x65B9;&#x6CD5;&#x3002; &#x52A8;&#x6001;&#x89C4;&#x5212;&#x5E38;&#x5E38;&#x9002;&#x7528;&#x4E8E;&#x6709;&#x91CD;&#x53E0;&#x5B50;&#x95EE;&#x9898;&#x548C;&#x6700;&#x4F18;&#x5B50;&#x7ED3;&#x6784;&#x6027;&#x8D28;&#x7684;&#x95EE;&#x9898;&#xFF0C;&#x52A8;&#x6001;&#x89C4;&#x5212;&#x65B9;&#x6CD5;&#x6240;&#x8017;&#x65F6;&#x95F4;&#x5F80;&#x5F80;&#x8FDC;&#x5C11;&#x4E8E;&#x6734;&#x7D20;&#x89E3;&#x6CD5;&#x3002; &#x52A8;&#x6001;&#x89C4;&#x5212;&#x80CC;&#x540E;&#x7684;&#x57FA;&#x672C;&#x601D;&#x60F3;&#x975E;&#x5E38;&#x7B80;&#x5355;&#x3002;&#x5927;&#x81F4;&#x4E0A;&#xFF0C;&#x82E5;&#x8981;&#x89E3;&#x4E00;&#x4E2A;&#x7ED9;&#x5B9A;&#x95EE;&#x9898;&#xFF0C;&#x6211;&#x4EEC;&#x9700;&#x8981;&#x89E3;&#x5176;&#x4E0D;&#x540C;&#x90E8;&#x5206;&#xFF08;&#x5373;&#x5B50;&#x95EE;&#x9898;&#xFF09;&#xFF0C;&#x518D;&#x6839;&#x636E;&#x5B50;&#x95EE;&#x9898;&#x7684;&#x89E3;&#x4EE5;&#x5F97;&#x51FA;&#x539F;&#x95EE;&#x9898;&#x7684;&#x89E3;&#x3002; &#x901A;&#x5E38;&#x8BB8;&#x591A;&#x5B50;&#x95EE;&#x9898;&#x975E;&#x5E38;&#x76F8;&#x4F3C;&#xFF0C;&#x4E3A;&#x6B64;&#x52A8;&#x6001;&#x89C4;&#x5212;&#x6CD5;&#x8BD5;&#x56FE;&#x4EC5;&#x4EC5;&#x89E3;&#x51B3;&#x6BCF;&#x4E2A;&#x5B50;&#x95EE;&#x9898;&#x4E00;&#x6B21;&#xFF0C;&#x4ECE;&#x800C;&#x51CF;&#x5C11;&#x8BA1;&#x7B97;&#x91CF;&#xFF1A;&#x4E00;&#x65E6;&#x67D0;&#x4E2A;&#x7ED9;&#x5B9A;&#x5B50;&#x95EE;&#x9898;&#x7684;&#x89E3;&#x5DF2;&#x7ECF;&#x7B97;&#x51FA;&#xFF0C;&#x5219;&#x5C06;&#x5176;&#x8BB0;&#x5FC6;&#x5316;&#x5B58;&#x50A8;&#xFF0C;&#x4EE5;&#x4FBF;&#x4E0B;&#x6B21;&#x9700;&#x8981;&#x540C;&#x4E00;&#x4E2A;&#x5B50;&#x95EE;&#x9898;&#x89E3;&#x4E4B;&#x65F6;&#x76F4;&#x63A5;&#x67E5;&#x8868;&#x3002;&#x8FD9;&#x79CD;&#x505A;&#x6CD5;&#x5728;&#x91CD;&#x590D;&#x5B50;&#x95EE;&#x9898;&#x7684;&#x6570;&#x76EE;&#x5173;&#x4E8E;&#x8F93;&#x5165;&#x7684;&#x89C4;&#x6A21;&#x5448;&#x6307;&#x6570;&#x589E;&#x957F;&#x65F6;&#x7279;&#x522B;&#x6709;&#x7528;&#x3002; &#x9002;&#x7528;&#x60C5;&#x51B5; &#x6700;&#x4F18;&#x5B50;&#x7ED3;&#x6784;&#x6027;&#x8D28;&#x3002;&#x5982;&#x679C;&#x95EE;&#x9898;&#x7684;&#x6700;&#x4F18;&#x89E3;&#x6240;&#x5305;&#x542B;&#x7684;&#x5B50;&#x95EE;&#x9898;&#x7684;&#x89E3;&#x4E5F;&#x662F;&#x6700;&#x4F18;&#x7684;&#xFF0C;&#x6211;&#x4EEC;&#x5C31;&#x79F0;&#x8BE5;&#x95EE;&#x9898;&#x5177;&#x6709;&#x6700;&#x4F18;&#x5B50;&#x7ED3;&#x6784;&#x6027;&#x8D28;&#xFF08;&#x5373;&#x6EE1;&#x8DB3;&#x6700;&#x4F18;&#x5316;&#x539F;&#x7406;&#xFF09;&#x3002;&#x6700;&#x4F18;&#x5B50;&#x7ED3;&#x6784;&#x6027;&#x8D28;&#x4E3A;&#x52A8;&#x6001;&#x89C4;&#x5212;&#x7B97;&#x6CD5;&#x89E3;&#x51B3;&#x95EE;&#x9898;&#x63D0;&#x4F9B;&#x4E86;&#x91CD;&#x8981;&#x7EBF;&#x7D22;&#x3002; &#x65E0;&#x540E;&#x6548;&#x6027;&#x3002;&#x5373;&#x5B50;&#x95EE;&#x9898;&#x7684;&#x89E3;&#x4E00;&#x65E6;&#x786E;&#x5B9A;&#xFF0C;&#x5C31;&#x4E0D;&#x518D;&#x6539;&#x53D8;&#xFF0C;&#x4E0D;&#x53D7;&#x5728;&#x8FD9;&#x4E4B;&#x540E;&#x3001;&#x5305;&#x542B;&#x5B83;&#x7684;&#x66F4;&#x5927;&#x7684;&#x95EE;&#x9898;&#x7684;&#x6C42;&#x89E3;&#x51B3;&#x7B56;&#x5F71;&#x54CD;&#x3002; &#x5B50;&#x95EE;&#x9898;&#x91CD;&#x53E0;&#x6027;&#x8D28;&#x3002;&#x5B50;&#x95EE;&#x9898;&#x91CD;&#x53E0;&#x6027;&#x8D28;&#x662F;&#x6307;&#x5728;&#x7528;&#x9012;&#x5F52;&#x7B97;&#x6CD5;&#x81EA;&#x9876;&#x5411;&#x4E0B;&#x5BF9;&#x95EE;&#x9898;&#x8FDB;&#x884C;&#x6C42;&#x89E3;&#x65F6;&#xFF0C;&#x6BCF;&#x6B21;&#x4EA7;&#x751F;&#x7684;&#x5B50;&#x95EE;&#x9898;&#x5E76;&#x4E0D;&#x603B;&#x662F;&#x65B0;&#x95EE;&#x9898;&#xFF0C;&#x6709;&#x4E9B;&#x5B50;&#x95EE;&#x9898;&#x4F1A;&#x88AB;&#x91CD;&#x590D;&#x8BA1;&#x7B97;&#x591A;&#x6B21;&#x3002;&#x52A8;&#x6001;&#x89C4;&#x5212;&#x7B97;&#x6CD5;&#x6B63;&#x662F;&#x5229;&#x7528;&#x4E86;&#x8FD9;&#x79CD;&#x5B50;&#x95EE;&#x9898;&#x7684;&#x91CD;&#x53E0;&#x6027;&#x8D28;&#xFF0C;&#x5BF9;&#x6BCF;&#x4E00;&#x4E2A;&#x5B50;&#x95EE;&#x9898;&#x53EA;&#x8BA1;&#x7B97;&#x4E00;&#x6B21;&#xFF0C;&#x7136;&#x540E;&#x5C06;&#x5176;&#x8BA1;&#x7B97;&#x7ED3;&#x679C;&#x4FDD;&#x5B58;&#x5728;&#x4E00;&#x4E2A;&#x8868;&#x683C;&#x4E2D;&#xFF0C;&#x5F53;&#x518D;&#x6B21;&#x9700;&#x8981;&#x8BA1;&#x7B97;&#x5DF2;&#x7ECF;&#x8BA1;&#x7B97;&#x8FC7;&#x7684;&#x5B50;&#x95EE;&#x9898;&#x65F6;&#xFF0C;&#x53EA;&#x662F;&#x5728;&#x8868;&#x683C;&#x4E2D;&#x7B80;&#x5355;&#x5730;&#x67E5;&#x770B;&#x4E00;&#x4E0B;&#x7ED3;&#x679C;&#xFF0C;&#x4ECE;&#x800C;&#x83B7;&#x5F97;&#x8F83;&#x9AD8;&#x7684;&#x6548;&#x7387;&#x3002; &#x5B9E;&#x4F8B; &#x80CC;&#x5305;&#x95EE;&#x9898; &#x80CC;&#x5305;&#x95EE;&#x9898;&#xFF08;Knapsack problem&#xFF09;&#x662F;&#x4E00;&#x79CD;&#x7EC4;&#x5408;&#x4F18;&#x5316;&#x7684;NP&#x5B8C;&#x5168;&#x95EE;&#x9898;&#x3002;&#x95EE;&#x9898;&#x53EF;&#x4EE5;&#x63CF;&#x8FF0;&#x4E3A;&#xFF1A;&#x7ED9;&#x5B9A;&#x4E00;&#x7EC4;&#x7269;&#x54C1;&#xFF0C;&#x6BCF;&#x79CD;&#x7269;&#x54C1;&#x90FD;&#x6709;&#x81EA;&#x5DF1;&#x7684;&#x91CD;&#x91CF;&#x548C;&#x4EF7;&#x683C;&#xFF0C;&#x5728;&#x9650;&#x5B9A;&#x7684;&#x603B;&#x91CD;&#x91CF;&#x5185;&#xFF0C;&#x6211;&#x4EEC;&#x5982;&#x4F55;&#x9009;&#x62E9;&#xFF0C;&#x624D;&#x80FD;&#x4F7F;&#x5F97;&#x7269;&#x54C1;&#x7684;&#x603B;&#x4EF7;&#x683C;&#x6700;&#x9AD8;&#x3002;&#x95EE;&#x9898;&#x7684;&#x540D;&#x79F0;&#x6765;&#x6E90;&#x4E8E;&#x5982;&#x4F55;&#x9009;&#x62E9;&#x6700;&#x5408;&#x9002;&#x7684;&#x7269;&#x54C1;&#x653E;&#x7F6E;&#x4E8E;&#x7ED9;&#x5B9A;&#x80CC;&#x5305;&#x4E2D;&#x3002; &#x4F2A;&#x4EE3;&#x7801; #define max(x,y) (x)&gt;(y)?(x):(y) //max&#x5B8F;&#x51FD;&#x6570; for(int i = 1; i &lt;= n; i++) for (v = totv; v &gt;= v[i]; v--) f[v] = max(f[v], f[v-v[i]] + p[i]); printf(&quot;%d&quot;, f[totv]); Solution &#x8FD9;&#x9053;&#x9898;&#x7684;&#x89E3;&#x9898;&#x601D;&#x8DEF;&#x7C7B;&#x4F3C;&#x4E8E;&#x80CC;&#x5305;&#x95EE;&#x9898;&#xFF0C;&#x53EA;&#x4E0D;&#x8FC7;&#x6211;&#x4EEC;&#x662F;&#x627E;&#x6700;&#x77ED;&#x8DEF;&#x5F84;&#x3002; &#x5047;&#x8BBE;&#x7528;&#x4E00;&#x4E2A;path&#x53D8;&#x91CF;&#x8BB0;&#x5F55;&#x5F53;&#x524D;&#x7684;&#x6700;&#x77ED;&#x8DEF;&#x5F84;&#xFF0C;i, j&#x4E3A;&#x6307;&#x5411;&#x5F53;&#x524D;&#x904D;&#x5386;&#x70B9;&#x7684;index &#x6211;&#x4EEC;&#x53EF;&#x4EE5;&#x901A;&#x8FC7;&#x4EE5;&#x4E0B;&#x56DB;&#x79CD;&#x60C5;&#x51B5;&#x6765;&#x8BA8;&#x8BBA;&#xFF1A; 1. i=0, j=0: &#x662F;&#x8D77;&#x70B9; 2. i=0, j&gt;0: &#x7531;&#x4E8E;&#x6211;&#x4EEC;&#x53EA;&#x80FD;&#x5F80;&#x4E0B;&#x548C;&#x5F80;&#x53F3;&#x79FB;&#x52A8;&#xFF0C;&#x90A3;&#x4E48;&#x4E0A;&#x4E00;&#x6B65;&#x53EA;&#x80FD;&#x4ECE;&#x5DE6;&#x8FB9;&#x6765;&#xFF0C;&#x6240;&#x4EE5;&#x7ECF;&#x8FC7;&#x8BE5;&#x70B9;&#x7684;&#x6700;&#x77ED;&#x8DEF;&#x5F84;&#x53EA;&#x80FD;&#x662F;: path += grid[i][j-1]; 3. i&gt;0, j=0: &#x540C;&#x7406;&#xFF0C;&#x4E0A;&#x4E00;&#x6B65;&#x53EA;&#x80FD;&#x4ECE;&#x4E0A;&#x8FB9;&#x6765;&#xFF0C;&#x6240;&#x4EE5;&#x7ECF;&#x8FC7;&#x6539;&#x70B9;&#x7684;&#x6700;&#x77ED;&#x8DEF;&#x5F84;&#x662F;: path += grid[i-1][j]; 4. i&gt;0, j&gt;0: &#x4E0A;&#x4E00;&#x6B65;&#x65E2;&#x53EF;&#x4EE5;&#x4ECE;&#x5DE6;&#x8FB9;&#x6765;&#xFF0C;&#x4E5F;&#x53EF;&#x4EE5;&#x4ECE;&#x4E0A;&#x8FB9;&#x6765;&#xFF0C;&#x8FD9;&#x65F6;&#x9700;&#x8981;&#x5224;&#x65AD;&#x4ECE;&#x54EA;&#x8FB9;&#x8FC7;&#x6765;&#x52A0;&#x4E0A;&#x5F53;&#x524D;&#x7684;&#x503C;&#x4F1A;&#x662F;&#x6700;&#x5C0F;&#xFF0C;&#x5C31;&#x80FD;&#x5F97;&#x5230;&#x7ECF;&#x8FC7;&#x5F53;&#x524D;&#x70B9;&#x7684;&#x6700;&#x77ED;&#x8DEF;&#x5F84;&#x662F;&#x591A;&#x5C11;&#xFF0C;&#x6545;&#x53EF;&#x8868;&#x793A;&#x4E3A;: path = min(grid[i][j-1], grid[i-1][j]). &#x7B49;&#x5230;&#x904D;&#x5386;&#x5230;&#x53F3;&#x4E0B;&#x89D2;&#x7684;&#x90A3;&#x4E2A;&#x70B9;&#xFF0C;&#x6211;&#x4EEC;&#x5C31;&#x53EF;&#x4EE5;&#x5F97;&#x5230;&#x4ECE;&#x5DE6;&#x4E0A;&#x89D2;&#x5230;&#x53F3;&#x4E0B;&#x89D2;&#x7684;&#x6700;&#x77ED;&#x8DEF;&#x5F84;&#x4E86;&#x3002;&#x8FD9;&#x91CC;&#x5C31;&#x662F;&#x7528;&#x52A8;&#x6001;&#x89C4;&#x5212;&#x7684;&#x601D;&#x8DEF;&#xFF0C;&#x8BB2;&#x4E00;&#x4E2A;&#x590D;&#x6742;&#x7684;&#x5927;&#x95EE;&#x9898;&#xFF08;&#x4ECE;&#x5DE6;&#x4E0A;&#x89D2;&#x5230;&#x53F3;&#x4E0B;&#x89D2;&#x7684;&#x6700;&#x77ED;&#x8DEF;&#x5F84;&#xFF09;&#x5212;&#x5206;&#x4E3A;&#x5C0F;&#x7684;&#x95EE;&#x9898;&#xFF08;&#x5230;&#x6BCF;&#x4E00;&#x4E2A;&#x70B9;&#x7684;&#x6700;&#x77ED;&#x8DEF;&#x5F84;&#xFF09;&#xFF0C;&#x7136;&#x540E;&#x901A;&#x8FC7;&#x4E0D;&#x65AD;&#x8FED;&#x4EE3;&#x89E3;&#x51B3;&#x5C0F;&#x95EE;&#x9898;&#x5F97;&#x5230;&#x5927;&#x95EE;&#x9898;&#x7684;&#x89E3;&#xFF08;&#x6240;&#x6709;&#x6700;&#x77ED;&#x8DEF;&#x5F84;&#x52A0;&#x8D77;&#x6765;&#x5C31;&#x662F;&#x6700;&#x7EC8;&#x8981;&#x6C42;&#x7684;&#x6700;&#x77ED;&#x8DEF;&#x5F84;&#xFF09;&#x3002;&#x5177;&#x4F53;&#x5B9E;&#x73B0;&#x8BF7;&#x770B;&#x4EE3;&#x7801;&#x3002; class Solution: def minPathSum(self, grid: List[List[int]]) -&gt; int: len_0 = len(grid) len_1 = len(grid[0]) for i in range(len_0): for j in range(len_1): if i == 0 and j == 0: continue elif i == 0: grid[i][j] += grid[i][j-1] elif j == 0: grid[i][j] += grid[i-1][j] else: grid[i][j] = min(grid[i][j-1], grid[i-1][j]) + grid[i][j] return grid[-1][-1] Search in Rotated Sorted Array Suppose an array sorted in ascending order is rotated at some pivot unknown to you beforehand. (i.e., [0,1,2,4,5,6,7] might become [4,5,6,7,0,1,2]). You are given a target value to search. If found in the array return its index, otherwise return -1. You may assume no duplicate exists in the array. Your algorithm&apos;s runtime complexity must be in the order of O(log n). Example 1: Input: nums = [4,5,6,7,0,1,2], target = 0 Output: 4 Example 2: Input: nums = [4,5,6,7,0,1,2], target = 3 Output: -1 Solution &#x8FD9;&#x9053;&#x9898;&#x6709;&#x4E00;&#x4E2A;&#x9650;&#x5236;&#xFF0C;&#x5C31;&#x662F;&#x65F6;&#x95F4;&#x590D;&#x6742;&#x5EA6;&#x5FC5;&#x987B;&#x4E3A;O(logn)&#xFF0C;&#x90A3;&#x6211;&#x7684;&#x7B2C;&#x4E00;&#x60F3;&#x6CD5;&#x8FD8;&#x662F;&#x7528;&#x4E8C;&#x5206;&#x6CD5;&#x3002;&#x867D;&#x7136;&#x539F;&#x6570;&#x7EC4;&#x5E76;&#x4E0D;&#x662F;&#x6709;&#x5E8F;&#x7684;&#xFF0C;&#x4F46;&#x662F;&#x5B58;&#x5728;&#x5C40;&#x90E8;&#x6709;&#x5E8F;&#xFF0C;&#x6211;&#x4EEC;&#x53EF;&#x4EE5;&#x7528;&#x4E8C;&#x5206;&#x6CD5;&#x6765;&#x63A2;&#x6D4B;&#x54EA;&#x4E00;&#x90E8;&#x5206;&#x6709;&#x5E8F;&#xFF0C;&#x5982;&#x679C;&#x6240;&#x8981;&#x627E;&#x7684;taget&#x5728;&#x6709;&#x5E8F;&#x7684;&#x90E8;&#x5206;&#xFF0C;&#x90A3;&#x4E48;&#x6211;&#x4EEC;&#x53EF;&#x4EE5;&#x76F4;&#x63A5;&#x5728;&#x8BE5;&#x90E8;&#x5206;&#x4F7F;&#x7528;&#x4E8C;&#x5206;&#x6CD5;&#x67E5;&#x627E;&#x3002;&#x5982;&#x679C;&#x4E0D;&#x5728;&#xFF0C;&#x90A3;&#x4E48;&#x7EE7;&#x7EED;&#x91CD;&#x590D;&#x4E0A;&#x8FF0;&#x6B65;&#x9AA4;&#xFF0C;&#x76F4;&#x5230;&#x627E;&#x5230;target&#x6240;&#x5728;&#x7684;&#x6709;&#x5E8F;&#x7684;&#x90E8;&#x5206;&#x3002;&#x5982;&#x679C;&#x627E;&#x4E0D;&#x5230;&#x5219;&#x8FD4;&#x56DE;-1&#x3002; class Solution: def search(self, nums: List[int], target: int) -&gt; int: size = len(nums) if size == 0: return -1 left = 0 right = size - 1 while left &lt; right: # &#x53D6;&#x5DE6;&#x4E2D;&#x4F4D;&#x6570; mid = left + (right-left) // 2 # &#x5982;&#x679C;&#x5DE6;&#x534A;&#x90E8;&#x5206;&#x6709;&#x5E8F; if nums[left] &lt; nums[mid]: # &#x5982;&#x679C;target&#x53EF;&#x80FD;&#x5728;&#x8BE5;&#x6BB5;&#x6709;&#x5E8F;&#x6570;&#x5B57;&#x5185;&#xFF0C;&#x5219;&#x76F4;&#x63A5;&#x5728;&#x8BE5;&#x6BB5;&#x6709;&#x5E8F;&#x5E8F;&#x5217;&#x4E2D;&#x4F7F;&#x7528;&#x4E8C;&#x5206;&#x67E5;&#x627E; if nums[left] &lt;= target &lt;= nums[mid]: right = mid # &#x5982;&#x679C;target&#x4E0D;&#x5728;&#x5DE6;&#x8FB9;&#x6709;&#x5E8F;&#x5E8F;&#x5217;&#xFF0C;&#x5219;&#x53EF;&#x80FD;&#x5728;&#x53F3;&#x534A;&#x90E8;&#x5206;&#xFF08;&#x90A3;&#x4E48;left=mid+1&#xFF09; # &#x5728;&#x53F3;&#x534A;&#x90E8;&#x5206;&#x7EE7;&#x7EED;&#x627E;target&#x53EF;&#x80FD;&#x5B58;&#x5728;&#x7684;&#x6709;&#x5E8F;&#x5E8F;&#x5217; else: left = mid + 1 # &#x5982;&#x679C;&#x5DE6;&#x534A;&#x90E8;&#x5206;&#x65E0;&#x5E8F;&#xFF0C;&#x90A3;&#x4E48;&#x53F3;&#x534A;&#x90E8;&#x5206;&#x4E00;&#x5B9A;&#x6709;&#x5E8F; else: # &#x4E3A;&#x4E86;&#x4F7F;&#x8FD9;&#x91CC;left&#x548C;right&#x7684;&#x66F4;&#x65B0;&#x548C;&#x4E0A;&#x9762;&#x4E00;&#x6837;&#xFF0C;&#x6240;&#x4EE5;&#x4F7F;&#x7528;nums[mid+1] if nums[mid+1] &lt;= target &lt;= nums[right]: left = mid + 1 # &#x5982;&#x679C;target&#x4E0D;&#x5728;&#x53F3;&#x8FB9;&#x6709;&#x5E8F;&#x5E8F;&#x5217;&#xFF0C;&#x5219;&#x53EF;&#x80FD;&#x5728;&#x5DE6;&#x534A;&#x90E8;&#x5206;&#xFF08;&#x90A3;&#x4E48;right=mid&#xFF09; # &#x5728;&#x5DE6;&#x534A;&#x90E8;&#x5206;&#x7EE7;&#x7EED;&#x627E;target&#x53EF;&#x80FD;&#x5B58;&#x5728;&#x7684;&#x6709;&#x5E8F;&#x5E8F;&#x5217; else: right = mid return left if nums[left] == target else -1 Construct Binary Search Tree from Preorder Traversal Return the root node of a binary search tree that matches the given preorder traversal. (Recall that a binary search tree is a binary tree where for every node, any descendant of node.left has a value &lt; node.val, and any descendant of node.right has a value &gt; node.val. Also recall that a preorder traversal displays the value of the node first, then traverses node.left, then traverses node.right.) Example 1: Input: [8,5,1,7,10,12] Output: [8,5,10,1,7,null,12] Solution &#x9898;&#x76EE;&#x662F;&#x8981;&#x6C42;&#x662F;&#xFF0C;&#x6211;&#x4EEC;&#x6839;&#x636E;&#x7ED9;&#x5B9A;&#x7684;&#x6570;&#x636E;&#xFF0C;&#x6784;&#x9020;&#x4E8C;&#x53C9;&#x641C;&#x7D22;&#x6811;&#x3002;&#x53EF;&#x4EE5;&#x91C7;&#x7528;&#x9012;&#x5F52;&#x7684;&#x65B9;&#x6CD5;&#x8FDB;&#x884C;&#x4E8C;&#x53C9;&#x641C;&#x7D22;&#x6811;&#x7684;&#x6784;&#x5EFA;&#x3002; &#x8FD9;&#x91CC;&#x7684;&#x6838;&#x5FC3;&#x601D;&#x8DEF;&#x662F;&#xFF1A;&#x6307;&#x5B9A;&#x4E00;&#x4E2A;bound&#x53D8;&#x91CF;&#xFF0C;&#x8BB0;&#x5F55;&#x5F53;&#x524D;&#x9700;&#x8981;&#x5904;&#x7406;&#x7684;&#x6700;&#x5927;&#x503C;&#xFF0C;&#x521D;&#x59CB;&#x5316;&#x4E3A;inf&#xFF0C;&#x4F7F;&#xFF1A; &#x5DE6;&#x9012;&#x5F52;&#x7684;&#x6240;&#x6709;&#x5143;&#x7D20;&#x90FD;&#x5C0F;&#x4E8E;&#x5F53;&#x524D;node&#x7684;value&#xFF1B; &#x53F3;&#x9012;&#x5F52;&#x7684;&#x6240;&#x6709;&#x5143;&#x7D20;&#x90FD;&#x5C0F;&#x4E8E;&#x5F53;&#x524D;&#x8FD9;&#x4E2A;bound&#x503C;&#x3002; # Definition for a binary tree node. class TreeNode: def __init__(self, x): self.val = x self.left = None self.right = None class Solution: i = 0 # &#x6307;&#x5B9A;&#x4E00;&#x4E2A;&#x6700;&#x5927;&#x6570;&#x636E;&#xFF1A;bound=float(&apos;inf&apos;) def bstFromPreorder(self, A, bound=float(&apos;inf&apos;)): # &#x5DE6;&#x9012;&#x5F52;&#x5C06;&#x91C7;&#x7528;&#x5C0F;&#x4E8E;root.val&#x7684;&#x5143;&#x7D20; # &#x53F3;&#x9012;&#x5F52;&#x5C06;&#x91C7;&#x7528;&#x5176;&#x4F59;&#x5C0F;&#x4E8E;bound&#x7684;&#x5143;&#x7D20; if self.i == len(A) or A[self.i] &gt; bound: return None root = TreeNode(A[self.i]) self.i += 1 root.left = self.bstFromPreorder(A, root.val) root.right = self.bstFromPreorder(A, bound) return root &#x603B;&#x7ED3; &#x6700;&#x8FD1;&#x786E;&#x5B9E;&#x662F;&#x6709;&#x70B9;&#x5FD9;&#xFF0C;&#x66F4;&#x65B0;&#x4E5F;&#x62D6;&#x4E86;&#x597D;&#x51E0;&#x5929;&#x3002;&#x4E0B;&#x5468;&#x5F00;&#x59CB;&#x6211;&#x7684;&#x8BFE;&#x7A0B;&#x9646;&#x9646;&#x7EED;&#x7EED;&#x7ED3;&#x8BFE;&#x4E86;&#xFF0C;&#x7136;&#x540E;&#x5C31;&#x6709;&#x4E00;&#x5806;&#x62A5;&#x544A;&#x5927;&#x4F5C;&#x4E1A;&#x8981;&#x505A;&#xFF0C;&#x53EF;&#x80FD;&#x66F4;&#x65B0;&#x4F1A;&#x66F4;&#x6162;&#x3002;&#x4F46;&#x662F;&#x66F4;&#x65B0;&#x53EF;&#x80FD;&#x4F1A;&#x8FDF;&#x5230;&#xFF0C;&#x4F46;&#x4E0D;&#x4F1A;&#x7F3A;&#x5E2D;&#xFF0C;&#x575A;&#x6301;&#xFF01;","categories":[{"name":"Technology","slug":"Technology","permalink":"https://littlemeemoon.cn/categories/Technology/"},{"name":"Coding","slug":"Technology/Coding","permalink":"https://littlemeemoon.cn/categories/Technology/Coding/"},{"name":"Leetcode","slug":"Technology/Coding/Leetcode","permalink":"https://littlemeemoon.cn/categories/Technology/Coding/Leetcode/"}],"tags":[{"name":"Leetcode","slug":"Leetcode","permalink":"https://littlemeemoon.cn/tags/Leetcode/"},{"name":"Python","slug":"Python","permalink":"https://littlemeemoon.cn/tags/Python/"},{"name":"Algorithm","slug":"Algorithm","permalink":"https://littlemeemoon.cn/tags/Algorithm/"}],"keywords":[{"name":"Technology","slug":"Technology","permalink":"https://littlemeemoon.cn/categories/Technology/"},{"name":"Coding","slug":"Technology/Coding","permalink":"https://littlemeemoon.cn/categories/Technology/Coding/"},{"name":"Leetcode","slug":"Technology/Coding/Leetcode","permalink":"https://littlemeemoon.cn/categories/Technology/Coding/Leetcode/"}]},{"title":"Blockchain | Consensus Mechanisms","slug":"Repost/Consensus_Mechanisms","date":"2020-04-18T16:42:36.000Z","updated":"2020-04-18T16:51:32.486Z","comments":true,"path":"2020/04/19/Repost/Consensus_Mechanisms/","link":"","permalink":"https://littlemeemoon.cn/2020/04/19/Repost/Consensus_Mechanisms/","excerpt":"","text":"Consensus Mechanisms (&#x5171;&#x8BC6;&#x673A;&#x5236;) &#x5728;&#x5BC6;&#x7801;&#x5B66;&#x4E2D;&#xFF0C;&#x6709;&#x4E00;&#x79CD;&#x7406;&#x8BBA;&#x6307;&#x51FA;&#xFF0C;&#x4EFB;&#x4F55;&#x53EF;&#x4EE5;&#x7531;&#x4E2D;&#x592E;&#x653F;&#x515A;&#x5B8C;&#x6210;&#x7684;&#x4E8B;&#x60C5;&#xFF0C;&#x4E5F;&#x53EF;&#x4EE5;&#x5728;&#x6CA1;&#x6709;&#x4E2D;&#x592E;&#x653F;&#x515A;&#x7684;&#x60C5;&#x51B5;&#x4E0B;&#x5B8C;&#x6210;&#x3002;&#x8FD9;&#x6307;&#x7684;&#x662F;&#x6295;&#x7968;&#xFF0C;&#x62CD;&#x5356;&#xFF0C;&#x94F6;&#x884C;&#x4E1A;&#x52A1;&#x7B49;&#x3002;&#x4F8B;&#x5982;&#xFF0C;OpenBazaar&#x662F;eBay&#x7684;&#x53BB;&#x4E2D;&#x5FC3;&#x5316;&#x7248;&#x672C;&#xFF0C;Bisq&#x662F;Coinbase&#x7684;&#x53BB;&#x4E2D;&#x5FC3;&#x5316;&#x7248;&#x672C;&#xFF0C;&#x800C;&#x6BD4;&#x7279;&#x5E01;&#x672C;&#x8EAB;&#x662F;&#x6CD5;&#x5B9A;&#x8D27;&#x5E01;&#x7684;&#x53BB;&#x4E2D;&#x5FC3;&#x5316;&#x7248;&#x672C;&#x3002; &#x5728;&#x5206;&#x6563;&#x7F51;&#x7EDC;&#x4E2D;&#xFF0C;&#x6CA1;&#x6709;&#x6807;&#x5C3A;&#x53EF;&#x4EE5;&#x786E;&#x4FDD;&#x6BCF;&#x4E2A;&#x4EBA;&#x90FD;&#x9075;&#x5B88;&#x89C4;&#x5219;&#x3002;&#x76F8;&#x53CD;&#xFF0C;&#x5206;&#x6563;&#x7F51;&#x7EDC;&#x4F9D;&#x8D56;&#x5171;&#x8BC6;&#x673A;&#x5236;&#x3002; &#x5171;&#x8BC6;&#x673A;&#x5236;&#x662F;&#x4E00;&#x7FA4;&#x4EBA;&#x505A;&#x51FA;&#x51B3;&#x5B9A;&#x7684;&#x65B9;&#x5F0F;&#x3002;&#x4F8B;&#x5982;&#xFF0C;&#x6BD4;&#x7279;&#x5E01;&#x7528;&#x6237;&#x9700;&#x8981;&#x4E0D;&#x65AD;&#x66F4;&#x65B0;&#x5176;&#x4EA4;&#x6613;&#x5386;&#x53F2;&#xFF0C;&#x4EE5;&#x53CD;&#x6620;&#x65B0;&#x7684;&#x4EA4;&#x6613;&#x548C;&#x94B1;&#x5305;(wallets)&#x4F59;&#x989D;&#x3002;&#x5171;&#x8BC6;&#x673A;&#x5236;&#x4F7F;&#x964C;&#x751F;&#x4EBA;&#x53EF;&#x4EE5;&#x901A;&#x8FC7;&#x7ED9;&#x4E88;&#x7ECF;&#x6D4E;&#x5956;&#x52B1;&#x6216;&#x7ECF;&#x6D4E;&#x60E9;&#x7F5A;&#x6765;&#x8FBE;&#x6210;&#x534F;&#x8BAE;&#x3002;&#x5171;&#x8BC6;&#x673A;&#x5236;&#x7684;&#x4E3B;&#x8981;&#x76EE;&#x6807;&#x662F;&#x963B;&#x6B62;&#x7528;&#x6237;&#x91CD;&#x590D;&#x82B1;&#x8D39;(double-spending)&#x76F8;&#x540C;&#x7684;&#x786C;&#x5E01;&#x3002;&#x5982;&#x679C;&#x7528;&#x6237;&#x53EF;&#x4EE5;&#x5C06;&#x540C;&#x4E00;&#x6BD4;&#x7279;&#x5E01;&#x53D1;&#x9001;&#x5230;&#x4E24;&#x4E2A;&#x4E0D;&#x540C;&#x7684;&#x94B1;&#x5305;&#xFF0C;&#x90A3;&#x4E48;&#x6BD4;&#x7279;&#x5E01;&#x7684;&#x4F9B;&#x5E94;&#x53EF;&#x80FD;&#x4F1A;&#x65E0;&#x9650;&#x81A8;&#x80C0;&#xFF0C;&#x8FD9;&#x5C06;&#x5BFC;&#x81F4;&#x8BE5;&#x8D27;&#x5E01;&#x7684;&#x8D2D;&#x4E70;&#x529B;&#x4E0B;&#x964D;&#x3002;&#x4E3A;&#x4E86;&#x963B;&#x6B62;&#x53CC;&#x91CD;&#x652F;&#x51FA;&#xFF0C;&#x7EF4;&#x62A4;&#x6BD4;&#x7279;&#x5E01;&#x533A;&#x5757;&#x94FE;&#x7684;&#x6BCF;&#x53F0;&#x8BA1;&#x7B97;&#x673A;&#x90FD;&#x5FC5;&#x987B;&#x5177;&#x6709;&#x5173;&#x4E8E;&#x54EA;&#x4E9B;&#x94B1;&#x5305;&#x62E5;&#x6709;&#x591A;&#x5C11;&#x4EF7;&#x503C;&#x7684;&#x76F8;&#x540C;&#x4FE1;&#x606F;&#x3002; &#x6392;&#x540D;&#x524D;100&#x4F4D;&#x7684;&#x52A0;&#x5BC6;&#x8D27;&#x5E01;&#x5171;&#x8BC6;&#x673A;&#x5236; &#x5982;&#x8868;1&#x6240;&#x793A;&#xFF0C;&#x5927;&#x7EA6;&#x6709;17&#x79CD;&#x4E0D;&#x540C;&#x7684;&#x5171;&#x8BC6;&#x673A;&#x5236;&#x3002;&#x4F46;&#x662F;&#xFF0C;&#x5B83;&#x4EEC;&#x90FD;&#x4E0D;&#x662F;&#x5B8C;&#x7F8E;&#x7684;&#x3002;&#x5230;&#x76EE;&#x524D;&#x4E3A;&#x6B62;&#xFF0C;&#x6700;&#x5B89;&#x5168;&#x7684;&#x5171;&#x8BC6;&#x673A;&#x5236;&#x4ECD;&#x7136;&#x662F;&#x6BD4;&#x7279;&#x5E01;&#x4F7F;&#x7528;&#x7684;&#x539F;&#x59CB;&#x673A;&#x5236;&#xFF1A;&#x5DE5;&#x4F5C;&#x8BC1;&#x660E;(proof of work)&#x3002; &#x4F46;&#x662F;&#xFF0C;&#x5DE5;&#x4F5C;&#x8BC1;&#x660E;(proof of work)&#x4F9D;&#x8D56;&#x4E8E;&#x77FF;&#x5DE5;&#xFF0C;&#x8FD9;&#x53EF;&#x80FD;&#x5BFC;&#x81F4;&#x96C6;&#x4E2D;&#x5316;&#x3002;&#x5F00;&#x53D1;&#x4EBA;&#x5458;&#x4E00;&#x76F4;&#x5728;&#x52AA;&#x529B;&#x6253;&#x8D25;&#x5DE5;&#x4F5C;&#x91CF;&#x8BC1;&#x660E;&#xFF0C;&#x56E0;&#x4E3A;&#x6D88;&#x9664;&#x77FF;&#x5DE5;&#x548C;&#x4ED6;&#x4EEC;&#x7684;&#x7535;&#x529B;&#x6D88;&#x8017;&#x7684;&#x786C;&#x5E01;&#x4F1A;&#x5728;ICO&#x5E02;&#x573A;&#x4E0A;&#x5927;&#x6D6A;&#x3002; &#x8868;1 Visa&#x548C;PayPal&#x7B49;&#x516C;&#x53F8;&#x65E0;&#x9700;&#x91C7;&#x7528;&#x5171;&#x8BC6;&#x673A;&#x5236;&#xFF0C;&#x56E0;&#x4E3A;&#x5B83;&#x4EEC;&#x53EF;&#x4EE5;&#x63A7;&#x5236;&#x6574;&#x4E2A;&#x7F51;&#x7EDC;&#x3002;&#x5982;&#x679C;&#x6709;&#x4EBA;&#x4F7F;&#x7528;&#x4ED6;&#x4EEC;&#x7684;Visa&#x4FE1;&#x7528;&#x5361;&#xFF0C;&#x5219;&#x4FE1;&#x606F;&#x5C06;&#x53D1;&#x9001;&#x5230;Visa&#x7EF4;&#x62A4;&#x7684;&#x96C6;&#x4E2D;&#x5F0F;&#x6570;&#x636E;&#x5E93;&#x3002;&#x6211;&#x4EEC;&#x4FE1;&#x4EFB;&#x8FD9;&#x4E9B;&#x516C;&#x53F8;&#x6765;&#x4FDD;&#x62A4;&#x6211;&#x4EEC;&#x7684;&#x654F;&#x611F;&#x4FE1;&#x606F;&#x5E76;&#x7ED3;&#x7B97;&#x6211;&#x4EEC;&#x7684;&#x4EA4;&#x6613;&#x3002;&#x7531;&#x4E8E;Visa&#x63A7;&#x5236;&#x7740;&#x7F51;&#x7EDC;&#xFF0C;&#x56E0;&#x6B64;&#x4ED6;&#x4EEC;&#x53EF;&#x4EE5;&#x64A4;&#x6D88;&#x548C;&#x5BA1;&#x67E5;&#x4EA4;&#x6613;&#x3002;&#x5728;1970&#x5E74;&#x4EE3;&#xFF0C;&#x8BA1;&#x7B97;&#x673A;&#x4E13;&#x5BB6;&#x5F00;&#x59CB;&#x63A2;&#x7D22;&#x5176;&#x4ED6;&#x65B9;&#x6CD5;&#x6765;&#x89E3;&#x51B3;&#x6B64;&#x95EE;&#x9898;&#xFF0C;&#x56E0;&#x4E3A;&#x4ED6;&#x4EEC;&#x610F;&#x8BC6;&#x5230;&#xFF0C;&#x5373;&#x4F7F;&#x662F;&#x4E2D;&#x592E;&#x6743;&#x5A01;&#x4E5F;&#x53EF;&#x80FD;&#x906D;&#x5230;&#x5BF9;&#x624B;&#x7684;&#x653B;&#x51FB;&#x6216;&#x4ECE;&#x5185;&#x90E8;&#x88AB;&#x7834;&#x574F;&#x3002;&#x5728;&#x52A0;&#x5BC6;&#x8D27;&#x5E01;&#x7F51;&#x7EDC;&#x4E2D;&#x8FDB;&#x884C;&#x5206;&#x6563;&#x51B3;&#x7B56;&#x7684;&#x4E24;&#x79CD;&#x6700;&#x6D41;&#x884C;&#x7684;&#x65B9;&#x6CD5;&#x79F0;&#x4E3A;&#x201C;&#x5DE5;&#x4F5C;&#x91CF;&#x8BC1;&#x660E;(proof of work)&#x201D;&#x548C;&#x201C;&#x6743;&#x76CA;&#x8BC1;&#x660E;(proof of stake)&#x201D;&#x3002; &#x4F46;&#x662F;&#xFF0C;&#x5B58;&#x5728;&#x8BB8;&#x591A;&#x5171;&#x8BC6;&#x673A;&#x5236;&#xFF0C;&#x5305;&#x62EC;&#x6743;&#x9650;&#x8BC1;&#x660E;&#xFF0C;&#x7A7A;&#x95F4;&#x8BC1;&#x660E;&#x548C;&#x91CD;&#x8981;&#x6027;&#x8BC1;&#x660E;&#x3002;&#x6240;&#x6709;&#x8FD9;&#x4E9B;&#x4E0D;&#x540C;&#x7684;&#x65B9;&#x6CD5;&#x90FD;&#x662F;&#x9488;&#x5BF9;Byzantine Generals&#x2019; Problem&#x7684;&#x63D0;&#x8BAE;&#x89E3;&#x51B3;&#x65B9;&#x6848;&#x3002; &#x56FE;1 Byzantine Generals&#x2019; Problem&#x2019; Problem &#x60F3;&#x8C61;&#x4E00;&#x4E0B;&#xFF0C;&#x57CE;&#x5821;&#x4E2D;&#x6709;&#x4E00;&#x4F4D;&#x56FD;&#x738B;&#xFF0C;&#x7531;300&#x540D;&#x58EB;&#x5175;&#x634D;&#x536B;&#x3002;&#x57CE;&#x5821;&#x5468;&#x56F4;&#x6709;&#x4E94;&#x652F;&#x519B;&#x961F;&#xFF0C;&#x6BCF;&#x652F;100&#x4EBA;&#x3002;&#x6BCF;&#x652F;&#x519B;&#x961F;&#x5728;&#x5468;&#x56F4;&#x7684;&#x5C71;&#x4E18;&#x90FD;&#x6709;&#x81EA;&#x5DF1;&#x7684;&#x8425;&#x5730;&#xFF0C;&#x8FD8;&#x6709;&#x81EA;&#x5DF1;&#x7684;&#x5C06;&#x519B;&#x3002;&#x5C06;&#x519B;&#x4EEC;&#x9700;&#x8981;&#x76F8;&#x4E92;&#x4EA4;&#x6D41;&#xFF0C;&#x4EE5;&#x4FBF;&#x5C31;&#x653B;&#x51FB;&#x7B56;&#x7565;&#x8FBE;&#x6210;&#x5171;&#x8BC6;&#x3002;&#x4F46;&#x662F;&#xFF0C;&#x5C06;&#x519B;&#x4EEC;&#x4E0D;&#x5BB9;&#x6613;&#x5F7C;&#x6B64;&#x4FE1;&#x4EFB;&#xFF0C;&#x56E0;&#x4E3A;&#x4ED6;&#x4EEC;&#x6000;&#x7591;&#x5176;&#x4E2D;&#x4E00;&#x4E9B;&#x5C06;&#x519B;&#x662F;&#x53DB;&#x5F92;&#x3002;&#x5982;&#x679C;&#x4ED6;&#x4EEC;&#x5728;&#x8FDB;&#x653B;&#x548C;&#x91C7;&#x53D6;&#x7B56;&#x7565;&#x7684;&#x65F6;&#x5019;&#x4ECE;&#x4E00;&#x4E2A;&#x8425;&#x5730;&#x5411;&#x53E6;&#x4E00;&#x4E2A;&#x8425;&#x5730;&#x53D1;&#x9001;&#x6D88;&#x606F;&#xFF0C;&#x90A3;&#x4E48;&#x4E0D;&#x5FE0;&#x7684;&#x5C06;&#x9886;&#x4EEC;&#x53EF;&#x4EE5;&#x8F7B;&#x677E;&#x5730;&#x66F4;&#x6539;&#x6B64;&#x6D88;&#x606F;&#x5E76;&#x5C06;&#x865A;&#x5047;&#x4FE1;&#x606F;&#x4F20;&#x9012;&#x7ED9;&#x4E0B;&#x4E00;&#x4E2A;&#x8425;&#x5730;&#x3002;&#x53D1;&#x9001;&#x7B80;&#x5355;&#x7684;&#x6D88;&#x606F;&#x5E76;&#x4E0D;&#x5B89;&#x5168;&#xFF0C;&#x56E0;&#x4E3A;&#x4E66;&#x9762;&#x6587;&#x672C;&#x5F88;&#x5BB9;&#x6613;&#x66F4;&#x6539;&#x3002;&#x9519;&#x8BEF;&#x7684;&#x4FE1;&#x606F;&#x53EF;&#x80FD;&#x4F1A;&#x5BFC;&#x81F4;&#x53DB;&#x5F92;&#x8D62;&#x5F97;&#x8FD9;&#x573A;&#x6218;&#x6597;&#xFF0C;&#x56E0;&#x4E3A;&#x4E0D;&#x540C;&#x7684;&#x9635;&#x8425;&#x4F1A;&#x5728;&#x9519;&#x8BEF;&#x7684;&#x65F6;&#x95F4;&#x53D1;&#x52A8;&#x8FDB;&#x653B;&#xFF0C;&#x751A;&#x81F3;&#x6839;&#x672C;&#x4E0D;&#x4F1A;&#x53D1;&#x52A8;&#x8FDB;&#x653B;&#x3002; &#x5982;&#x4ECA;&#xFF0C;&#x7535;&#x8BDD;&#x4F1A;&#x8BAE;&#x53EF;&#x4EE5;&#x4EE3;&#x66FF;&#x9A6C;&#x80CC;&#x4E0A;&#x7684;&#x4FE1;&#x4F7F;&#xFF0C;&#x4F46;&#x95EE;&#x9898;&#x4ECD;&#x7136;&#x5B58;&#x5728;&#x3002;&#x60A8;&#x5982;&#x4F55;&#x786E;&#x5B9A;&#x90AE;&#x4EF6;&#x662F;&#x771F;&#x5B9E;&#x7684;&#x800C;&#x4E0D;&#x88AB;&#x7BE1;&#x6539;&#xFF1F;&#x771F;&#x5B9E;&#x6027;&#x662F;&#x6307;&#x5BF9;&#x624B;&#x4F2A;&#x88C5;&#x6210;&#x522B;&#x4EBA;&#x53EF;&#x4EE5;&#x4F2A;&#x9020;&#x7535;&#x8BDD;&#x6216;&#x7535;&#x5B50;&#x90AE;&#x4EF6;&#x7684;&#x95EE;&#x9898;&#x3002;&#x7BE1;&#x6539;&#x662F;&#x6307;&#x653B;&#x51FB;&#x8005;&#x66F4;&#x6539;&#xFF0C;&#x5220;&#x9664;&#x6216;&#x9605;&#x8BFB;&#x6D88;&#x606F;&#x7684;&#x5185;&#x5BB9;&#x3002; &#x4E3A;&#x4E86;&#x89E3;&#x51B3;&#x62DC;&#x5360;&#x5EAD;&#x5C06;&#x519B;(Byzantine Generals&#x2019; Problem)&#x7684;&#x95EE;&#x9898;&#xFF0C;&#x5171;&#x8BC6;&#x7B97;&#x6CD5;&#x4F9D;&#x8D56;&#x4E24;&#x4E2A;&#x6982;&#x5FF5;: &#x9996;&#x5148;&#xFF0C;&#x6BCF;&#x4E2A;&#x5C06;&#x519B;&#x90FD;&#x9700;&#x8981;&#x5728;&#x7F51;&#x7EDC;&#x4E0A;&#x6295;&#x5165;&#x8D44;&#x6E90;&#xFF0C;&#x5373;&#x4ED6;&#x4EEC;&#x9700;&#x8981;&#x62E5;&#x6709;&#x201C;&#x6E38;&#x620F;&#x4E2D;&#x7684;&#x76AE;&#x80A4;&#x201D;&#x3002;&#x4F8B;&#x5982;&#xFF0C;&#x5047;&#x8BBE;&#x6709;&#x4E24;&#x4E2A;&#x5546;&#x4EBA;&#x51B3;&#x5B9A;&#x5171;&#x540C;&#x521B;&#x5EFA;&#x4E00;&#x5BB6;&#x5408;&#x8D44;&#x4F01;&#x4E1A;&#xFF0C;&#x800C;&#x4E00;&#x4E2A;&#x5546;&#x4EBA;&#x62D2;&#x7EDD;&#x5411;&#x8BE5;&#x5408;&#x8D44;&#x4F01;&#x4E1A;&#x6295;&#x5165;&#x4EFB;&#x4F55;&#x65F6;&#x95F4;&#x6216;&#x8D44;&#x91D1;&#x3002;&#x88AB;&#x6295;&#x8D44;&#x7684;&#x5408;&#x4F19;&#x4EBA;&#x4F1A;&#x5BF9;&#x5408;&#x4F19;&#x4EBA;&#x5BF9;&#x9879;&#x76EE;&#x7684;&#x5FE0;&#x8BDA;&#x5EA6;&#x611F;&#x5230;&#x6000;&#x7591;&#x3002;&#x5206;&#x6563;&#x7F51;&#x7EDC;&#x4E2D;&#x4E5F;&#x5B58;&#x5728;&#x76F8;&#x540C;&#x7684;&#x60F3;&#x6CD5;&#x3002; &#x7B2C;&#x4E8C;&#x4E2A;&#x6982;&#x5FF5;&#x662F;&#x5FC5;&#x987B;&#x5B58;&#x5728;&#x6240;&#x6709;&#x4EE5;&#x524D;&#x7684;&#x201C;&#x9632;&#x7BE1;&#x6539;&#x201D;&#x901A;&#x4FE1;&#x7684;&#x5206;&#x7C7B;&#x5E10;&#x3002;&#x9632;&#x7BE1;&#x6539;&#x662F;&#x6307;&#x8BA1;&#x7B97;&#x673A;&#x80FD;&#x591F;&#x7ACB;&#x5373;&#x68C0;&#x6D4B;&#x5230;&#x901A;&#x4FE1;&#x5386;&#x53F2;&#x8BB0;&#x5F55;&#x5DF2;&#x88AB;&#x66F4;&#x6539;&#x6216;&#x5220;&#x9664;&#x7684;&#x80FD;&#x529B;&#x3002;&#x5206;&#x7C7B;&#x8D26;&#x7684;&#x6570;&#x5B57;&#x7248;&#x672C;&#x662F;&#x4E00;&#x4E2A;&#x533A;&#x5757;&#x94FE;&#xFF0C;&#x53EF;&#x8DDF;&#x8E2A;&#x6BCF;&#x4E2A;&#x7528;&#x6237;&#x7684;&#x4EA4;&#x6613;&#xFF0C;&#x5E76;&#x4F7F;&#x7528;&#x6563;&#x5217;&#x51FD;&#x6570;&#x5C06;&#x5176;&#x94FE;&#x63A5;&#xFF0C;&#x4EE5;&#x786E;&#x4FDD;&#x6570;&#x636E;&#x7684;&#x771F;&#x5B9E;&#x6027;. &#x56DE;&#x5230;&#x62DC;&#x5360;&#x5EAD;&#x5C06;&#x519B;(Byzantine Generals&#x2019; Problem)&#x7684;&#x95EE;&#x9898;&#x4E0A;&#xFF0C;&#x4ED6;&#x4EEC;&#x53EF;&#x4EE5;&#x786E;&#x4FDD;&#x540C;&#x5FD7;&#x5FE0;&#x8BDA;&#x7684;&#x4E00;&#x79CD;&#x65B9;&#x6CD5;&#x662F;&#xFF0C;&#x4F7F;&#x6BCF;&#x4E2A;&#x5C06;&#x519B;&#x5C06;&#x5927;&#x91CF;&#x8D44;&#x91D1;&#x6295;&#x5165;&#x65E0;&#x6CD5;&#x6E17;&#x900F;&#x7684;&#x4EE3;&#x7BA1;&#x8D26;&#x6237;&#x3002;&#x5728;&#x5C06;&#x519B;&#x53D1;&#x9001;&#x4FE1;&#x606F;&#x4E4B;&#x524D;&#xFF0C;&#x4ED6;&#x5FC5;&#x987B;&#x4F7F;&#x7528;&#x80FD;&#x8BC1;&#x660E;&#x81EA;&#x5DF1;&#x8EAB;&#x4EFD;&#x7684;&#x52A0;&#x5BC6;&#x5B89;&#x5168;&#x7B7E;&#x540D;&#x6765;&#x7B7E;&#x540D;&#x81EA;&#x5DF1;&#x7684;&#x540D;&#x5B57;&#x3002;&#x5982;&#x679C;&#x5C06;&#x519B;&#x6709;&#x4EFB;&#x4F55;&#x4E0D;&#x5F53;&#x884C;&#x4E3A;&#xFF0C;&#x5219;&#x519B;&#x961F;&#x5C06;&#x67E5;&#x770B;&#x901A;&#x8BAF;&#x7C3F;&#x5E76;&#x67E5;&#x770B;&#x53DB;&#x5F92;&#x7684;&#x7B7E;&#x540D;&#x3002;&#x53DB;&#x5F92;&#x4ECD;&#x7136;&#x53EF;&#x4EE5;&#x4E3E;&#x6B62;&#x5F97;&#x4F53;&#xFF0C;&#x4F46;&#x662F;&#x73B0;&#x5728;&#x4ED6;&#x5C06;&#x906D;&#x53D7;&#x7ECF;&#x6D4E;&#x635F;&#x5931;&#xFF0C;&#x56E0;&#x4E3A;&#x519B;&#x961F;&#x4E0D;&#x4F1A;&#x5C06;&#x4ED6;&#x7684;&#x62BC;&#x91D1;&#x8FD8;&#x7ED9;&#x4ED6;&#x3002;&#x8FD9;&#x79CD;&#x8FBE;&#x6210;&#x5206;&#x6563;&#x5F0F;&#x5171;&#x8BC6;&#x7684;&#x65B9;&#x6CD5;&#x79F0;&#x4E3A;&#x201C;&#x6743;&#x76CA;&#x8BC1;&#x660E;&#x201D;&#xFF0C;&#x56E0;&#x4E3A;&#x6BCF;&#x4E2A;&#x666E;&#x901A;&#x4EBA;&#x6216;&#x73B0;&#x4EE3;&#x8BA1;&#x7B97;&#x673A;&#x7528;&#x6237;&#x90FD;&#x5BF9;&#x7F51;&#x7EDC;&#x7684;&#x6210;&#x529F;&#x8FDB;&#x884C;&#x4E86;&#x6295;&#x8D44;&#x3002;&#x7F51;&#x7EDC;&#x7684;&#x53E6;&#x4E00;&#x79CD;&#x9009;&#x62E9;&#x662F;&#x8BA9;&#x7F51;&#x7EDC;&#x8FEB;&#x4F7F;&#x6BCF;&#x4E2A;&#x5C06;&#x519B;&#x5728;&#x4ED6;&#x4EEC;&#x6210;&#x529F;&#x7B7E;&#x540D;&#x5E76;&#x53D1;&#x9001;&#x6D88;&#x606F;&#x4E4B;&#x524D;&#x89E3;&#x51B3;&#x4E00;&#x4E2A;&#x6781;&#x5176;&#x590D;&#x6742;&#x7684;&#x6570;&#x5B66;&#x95EE;&#x9898;&#x3002;&#x4E3A;&#x4E86;&#x5FEB;&#x901F;&#x89E3;&#x51B3;&#x6570;&#x5B66;&#x95EE;&#x9898;&#xFF0C;&#x4E00;&#x822C;&#x5C06;&#x9700;&#x8981;&#x5411;&#x6602;&#x8D35;&#x7684;&#x6570;&#x5B66;&#x5BB6;&#x6295;&#x5165;&#x5927;&#x91CF;&#x8D44;&#x91D1;&#x3002;&#x8FD9;&#x79CD;&#x5171;&#x8BC6;&#x65B9;&#x6CD5;&#x88AB;&#x79F0;&#x4E3A;&#x201C;&#x5DE5;&#x4F5C;&#x91CF;&#x8BC1;&#x660E;&#x201D;&#xFF0C;&#x56E0;&#x4E3A;&#x5C06;&#x519B;&#x8BC1;&#x660E;&#x4ED6;&#x6295;&#x5165;&#x4E86;&#x8BF8;&#x5982;&#x65F6;&#x95F4;&#x548C;&#x8D44;&#x672C;&#x4E4B;&#x7C7B;&#x7684;&#x7A00;&#x7F3A;&#x8D44;&#x6E90;&#x6765;&#x89E3;&#x51B3;&#x6570;&#x5B66;&#x95EE;&#x9898;&#x3002; &#x5171;&#x8BC6;&#x673A;&#x5236;&#x6982;&#x8FF0; &#x5982;&#x56FE;2&#x6240;&#x793A;&#xFF0C;&#x5171;&#x8BC6;&#x673A;&#x5236;&#x6CBF;&#x7740;&#x4E24;&#x4E2A;&#x4E3B;&#x8F74;&#x5B58;&#x5728;&#xFF0C;&#x5373;&#x96C6;&#x4E2D;&#x7A0B;&#x5EA6;&#x548C;&#x5916;&#x90E8;&#x951A;&#x70B9;&#x7A0B;&#x5EA6;&#x3002;&#x5782;&#x76F4;&#x8F74;&#x7684;&#x8303;&#x56F4;&#x4ECE;&#x96C6;&#x4E2D;&#x5F0F;(&#x9700;&#x8981;&#x4FE1;&#x4EFB;&#x4E00;&#x4E2A;&#x4EBA;&#x6216;&#x7EC4;&#x7EC7;&#x624D;&#x80FD;&#x6B63;&#x786E;&#x5730;&#x8FDB;&#x884C;&#x4EA4;&#x6613;)&#x5230;&#x5206;&#x6563;&#x5F0F;(&#x964C;&#x751F;&#x4EBA;&#x7ED3;&#x7B97;&#x4EA4;&#x6613;&#x7684;&#x5730;&#x65B9;). &#x4F8B;&#x5982;&#xFF0C;&#x6BD4;&#x7279;&#x5E01;&#x7684;&#x5DE5;&#x4F5C;&#x91CF;&#x8BC1;&#x660E;&#x5171;&#x8BC6;&#x673A;&#x5236;&#x5C31;&#x662F;&#x4E00;&#x4E2A;&#x672A;&#x7ECF;&#x8BB8;&#x53EF;&#x7684;&#x516C;&#x5171;&#x533A;&#x5757;&#x94FE;&#x7684;&#x4F8B;&#x5B50;&#xFF0C;&#x56E0;&#x4E3A;&#x4E0D;&#x53D7;&#x4FE1;&#x4EFB;&#x7684;&#x964C;&#x751F;&#x4EBA;&#x53EF;&#x4EE5;&#x6210;&#x4E3A;&#x4EA4;&#x6613;&#x9A8C;&#x8BC1;&#x8005;&#xFF0C;&#x5E76;&#x4E14;&#x65E0;&#x9700;&#x900F;&#x9732;&#x5176;&#x8EAB;&#x4EFD;&#x3002;&#x53E6;&#x4E00;&#x4E2A;&#x4F8B;&#x5B50;&#x662F;&#x95E8;&#x7F57;&#x5E01;(Monero)&#x3002; &#x56FE;2 &#x6A2A;&#x8F74;&#x662F;&#x6307;&#x7528;&#x6237;&#x9700;&#x8981;&#x8FDB;&#x884C;&#x54EA;&#x79CD;&#x6295;&#x8D44;&#x624D;&#x80FD;&#x5728;&#x7CFB;&#x7EDF;&#x4E2D;&#x83B7;&#x5F97;&#x80FD;&#x91CF;&#x3002;&#x4F8B;&#x5982;&#xFF0C;&#x6BD4;&#x7279;&#x5E01;&#x8981;&#x6C42;&#x7528;&#x6237;&#x5728;&#x73B0;&#x5B9E;&#x4E16;&#x754C;&#x4E2D;&#x627F;&#x8BFA;&#x7A00;&#x7F3A;&#x8D44;&#x6E90;&#xFF0C;&#x4EE5;&#x4FBF;&#x5728;&#x6BD4;&#x7279;&#x5E01;&#x7F51;&#x7EDC;&#x4E2D;&#x505A;&#x51FA;&#x51B3;&#x5B9A;, &#x8FD9;&#x79F0;&#x4E3A;&#x5916;&#x90E8;&#x951A;&#x3002;&#x76F8;&#x53CD;&#xFF0C;&#x843D;&#x5165;&#x53F3;&#x4E0A;&#x8C61;&#x9650;&#x7684;&#x5171;&#x8BC6;&#x673A;&#x5236;&#xFF08;&#x4F8B;&#x5982;&#xFF0C;&#x80A1;&#x6743;&#x8BC1;&#x660E;&#xFF09;&#x4E0D;&#x9700;&#x8981;&#x5916;&#x90E8;&#x8D44;&#x6E90;&#x5373;&#x53EF;&#x5728;&#x7F51;&#x7EDC;&#x5185;&#x505A;&#x51FA;&#x51B3;&#x7B56;&#x3002;&#x8BE5;&#x8C61;&#x9650;&#x5305;&#x62EC;NXT&#x548C;Peercoin&#x7B49;&#x786C;&#x5E01;&#x3002;&#x4EE5;&#x592A;&#x574A;&#x8BA1;&#x5212;&#x5728;19&#x5E74;&#x4ECE;&#x5DE6;&#x4E0A;&#x8C61;&#x9650;&#x5207;&#x6362;&#x5230;&#x53F3;&#x4E0A;&#x8C61;&#x9650;&#x3002; &#x5728;&#x53F3;&#x4E0B;&#x8C61;&#x9650;&#x7684;&#x9891;&#x8C31;&#x7684;&#x53E6;&#x4E00;&#x4FA7;&#xFF0C;&#x5141;&#x8BB8;&#x4F7F;&#x7528;&#x79C1;&#x6709;&#x534F;&#x5546;&#x673A;&#x5236;&#xFF0C;&#x4F8B;&#x5982;&#x62DC;&#x5360;&#x5EAD;&#x5F0F;&#x5BB9;&#x9519;(byzantine fault tolerance)&#x3002;IBM&#x7684;Hyperledger&#x662F;&#x6570;&#x636E;&#x7ED3;&#x6784;&#x7684;&#x793A;&#x4F8B;&#xFF0C;&#x5141;&#x8BB8;&#x521B;&#x5EFA;&#x8005;&#x6307;&#x5B9A;&#x8C01;&#x6765;&#x7ED3;&#x7B97;&#x4EA4;&#x6613;&#x3002;&#x4F7F;&#x7528;Hyperledger&#x6216;Microsoft&#x7684;Blockchain&#x4F5C;&#x4E3A;&#x670D;&#x52A1;&#x7684;&#x516C;&#x53F8;&#x5C06;&#x77E5;&#x9053;&#x4ED6;&#x4EEC;&#x9009;&#x62E9;&#x63A7;&#x5236;&#x7F51;&#x7EDC;&#x7684;&#x4EBA;&#x5458;&#x7684;&#x8EAB;&#x4EFD;&#xFF0C;&#x5E76;&#x4E14;&#x7F51;&#x7EDC;&#x7528;&#x6237;&#x5C06;&#x9700;&#x8981;&#x4FE1;&#x4EFB;&#x8FD9;&#x4E9B;&#x4EBA;&#x5458;&#x3002;&#x8FD9;&#x4E9B;&#x7CFB;&#x7EDF;&#x662F;&#x96C6;&#x4E2D;&#x5F0F;&#x7684;&#xFF0C;&#x6CA1;&#x6709;&#x5916;&#x90E8;&#x951A;&#x70B9;&#x3002;&#x5DE6;&#x4E0B;&#x8C61;&#x9650;&#x4E2D;&#x7684;&#x786C;&#x5E01;&#x662F;IOTA&#xFF0C;Byteball&#x548C;Hashgraph&#x4E4B;&#x7C7B;&#x7684;&#x3002;&#x8FD9;&#x4E9B;&#x786C;&#x5E01;&#x6709;&#x89C1;&#x8BC1;&#x8005;&#x548C;&#x534F;&#x8C03;&#x8005;&#x6765;&#x96C6;&#x4E2D;&#x7CFB;&#x7EDF;&#x3002;&#x4F46;&#x662F;&#xFF0C;&#x4ED6;&#x4EEC;&#x4ECD;&#x7136;&#x8981;&#x6C42;&#x9A8C;&#x8BC1;&#x8005;&#x63D0;&#x4F9B;&#x5916;&#x90E8;&#x8D44;&#x6E90;&#xFF0C;&#x4EE5;&#x4FBF;&#x5728;&#x7F51;&#x7EDC;&#x4E2D;&#x83B7;&#x5F97;&#x80FD;&#x91CF;&#x3002;&#x6700;&#x5E38;&#x89C1;&#x7684;&#x5171;&#x8BC6;&#x673A;&#x5236;&#x662F;&#x6709;&#x5411;&#x65E0;&#x73AF;&#x56FE;&#x7ED3;&#x6784;&#x4E0E;&#x9632;&#x6B62;Sybil&#x653B;&#x51FB;&#x7684;&#x5DE5;&#x4F5C;&#x8BC1;&#x660E;&#x76F8;&#x7ED3;&#x5408;&#x3002; Proof of Work (PoW) &#x5BF9;&#x4E8E;&#x6BD4;&#x7279;&#x5E01;&#xFF0C;&#x60A8;&#x53EF;&#x4EE5;&#x5C06;&#x62DC;&#x5360;&#x5EAD;&#x5C06;&#x519B;&#x89C6;&#x4E3A;&#x4E0D;&#x540C;&#x7684;&#x6BD4;&#x7279;&#x5E01;&#x94B1;&#x5305;&#x3002;&#x8FD0;&#x884C;&#x6BD4;&#x7279;&#x5E01;&#x8F6F;&#x4EF6;&#x7684;&#x8BA1;&#x7B97;&#x673A;&#x4F7F;&#x7528;&#x5DE5;&#x4F5C;&#x91CF;&#x8BC1;&#x660E;&#x5171;&#x8BC6;&#x7B97;&#x6CD5;&#x6765;&#x8FBE;&#x6210;&#x5173;&#x4E8E;&#x6709;&#x6548;&#x4ED8;&#x6B3E;&#x7684;&#x534F;&#x8BAE;&#x3002; &#x6839;&#x636E;&#x5728;&#x9ED1;&#x6D77;&#x94FE;&#x4F1A;&#x8BAE;&#x4E0A;&#x7684;&#x514B;&#x91CC;&#x65AF;&#x8482;&#x5B89;&#xB7;&#x8D6B;&#x91CC;&#x65AF;&#x6258;&#x592B;&#xFF08;Hristian Hristov&#xFF09;&#x7684;&#x8BF4;&#x6CD5;&#xFF0C;&#x5DE5;&#x4F5C;&#x8BC1;&#x660E;&#x662F;: &#x96BE;&#x4EE5;&#xFF08;&#x6602;&#x8D35;&#xFF0C;&#x8D39;&#x65F6;&#xFF09;&#x751F;&#x6210;&#x4F46;&#x6613;&#x4E8E;&#x5176;&#x4ED6;&#x4EBA;&#x9A8C;&#x8BC1;&#x4E14;&#x6EE1;&#x8DB3;&#x67D0;&#x4E9B;&#x8981;&#x6C42;&#x7684;&#x4E00;&#x6761;&#x6570;&#x636E;&#x3002;&#x4EA7;&#x751F;&#x5DE5;&#x4F5C;&#x8BC1;&#x660E;&#x53EF;&#x80FD;&#x662F;&#x4E00;&#x4E2A;&#x968F;&#x673A;&#x8FC7;&#x7A0B;&#xFF0C;&#x53EF;&#x80FD;&#x6027;&#x5F88;&#x5C0F;&#xFF0C;&#x56E0;&#x6B64;&#x5728;&#x751F;&#x6210;&#x6709;&#x6548;&#x7684;&#x5DE5;&#x4F5C;&#x8BC1;&#x660E;&#x4E4B;&#x524D;&#xFF0C;&#x5E73;&#x5747;&#x9700;&#x8981;&#x8FDB;&#x884C;&#x591A;&#x6B21;&#x5C1D;&#x8BD5;&#x548C;&#x9519;&#x8BEF;&#x3002; &#x5982;&#x679C;Mark&#x5E0C;&#x671B;&#x5411;Demelza&#x53D1;&#x9001;5&#x6BD4;&#x7279;&#x5E01;&#xFF0C;&#x5219;&#x6574;&#x4E2A;&#x7F51;&#x7EDC;&#x5FC5;&#x987B;&#x786E;&#x4FDD;Mark&#x62E5;&#x6709;5&#x6BD4;&#x7279;&#x5E01;&#xFF0C;&#x5E76;&#x4E14;&#x4EA4;&#x6613;&#x5FC5;&#x987B;&#x4F7F;&#x7528;Mark&#x7684;&#x6570;&#x5B57;&#x7B7E;&#x540D;&#x8FDB;&#x884C;&#x7B7E;&#x540D;&#x3002;&#x6BD4;&#x7279;&#x5E01;&#x8282;&#x70B9;&#x6BCF;&#x5341;&#x5206;&#x949F;&#x5C31;&#x4E00;&#x9879;&#x4EA4;&#x6613;&#x5728;&#x6709;&#x6548;&#x7684;&#x201C;&#x6316;&#x77FF;&#x201D;&#x8FC7;&#x7A0B;&#x4E2D;&#x8FBE;&#x6210;&#x534F;&#x8BAE;&#x3002;&#x5728;&#x786E;&#x8BA4;&#x65B0;&#x7684;&#x4EA4;&#x6613;&#x5757;&#x4E4B;&#x524D;&#xFF0C;&#x77FF;&#x5DE5;&#x5148;&#x8BA1;&#x7B97;&#x6563;&#x5217;&#x503C;&#xFF0C;&#x76F4;&#x5230;&#x627E;&#x5230;&#x6240;&#x9700;&#x6570;&#x91CF;&#xFF0C;&#x8BE5;&#x6570;&#x91CF;&#x5C0F;&#x4E8E;&#x7531;&#x79F0;&#x4E3A;&#x96BE;&#x5EA6;&#x76EE;&#x6807;&#x7684;&#x8F6F;&#x4EF6;&#x534F;&#x8BAE;&#x8BBE;&#x7F6E;&#x7684;&#x7279;&#x5B9A;&#x6570;&#x91CF;&#x3002;&#x4F8B;&#x5982;&#xFF0C;&#x5728;&#x6BD4;&#x7279;&#x5E01;&#x534F;&#x8BAE;&#x4E2D;&#xFF0C;&#x77FF;&#x5DE5;&#x5FC5;&#x987B;&#x627E;&#x5230;&#x6B63;&#x786E;&#x7684;&#x201C;&#x968F;&#x673A;&#x6570;&#x201D;&#x6216;&#x4EFB;&#x610F;&#x6570;&#x5B57;&#xFF0C;&#x5176;&#x4EA7;&#x751F;&#x7684;&#x6563;&#x5217;&#x503C;&#x4F4E;&#x4E8E;&#x8F6F;&#x4EF6;&#x8BBE;&#x7F6E;&#x7684;&#x96BE;&#x5EA6;&#x76EE;&#x6807;&#x3002;&#x8FD9;&#x88AB;&#x79F0;&#x4E3A;&#x54C8;&#x5E0C;&#x96BE;&#x9898;&#xFF0C;&#x56E0;&#x4E3A;&#x77FF;&#x5DE5;&#x5FC5;&#x987B;&#x5C06;&#x968F;&#x673A;&#x6570;&#x6DFB;&#x52A0;&#x5230;&#x533A;&#x5757;&#x94FE;&#x4E2D;&#x524D;&#x4E00;&#x4E2A;&#x533A;&#x5757;&#x7684;&#x54C8;&#x5E0C;&#x4E2D;&#x3002;&#x8BA1;&#x7B97;&#x8F93;&#x51FA;&#x662F;&#x4E00;&#x4E2A;&#x57FA;&#x672C;&#x4E0A;&#x843D;&#x5165;&#x76EE;&#x6807;&#x7A7A;&#x95F4;&#x7684;&#x6570;&#x5B57;&#xFF0C;&#x8BE5;&#x76EE;&#x6807;&#x7A7A;&#x95F4;&#x76F8;&#x5BF9;&#x4E8E;&#x6574;&#x4E2A;&#x54C8;&#x5E0C;&#x51FD;&#x6570;&#x7684;&#x8F83;&#x5927;&#x8F93;&#x51FA;&#x7A7A;&#x95F4;&#x800C;&#x8A00;&#x76F8;&#x5BF9;&#x8F83;&#x5C0F;&#x3002;&#x8BE5;&#x7F16;&#x53F7;&#x6210;&#x4E3A;&#x8BE5;&#x533A;&#x5757;&#x7684;&#x6807;&#x8BC6;&#x53F7;&#xFF0C;&#x7528;&#x4F5C;&#x4E0B;&#x4E00;&#x4E2A;&#x533A;&#x5757;&#x7684;&#x54C8;&#x5E0C;&#x96BE;&#x9898;&#x7684;&#x8F93;&#x5165;&#x3002; Proof of Work Computation &#x56FE;3 &#x5DE5;&#x4F5C;&#x91CF;&#x8BC1;&#x660E;&#x4F7F;&#x7528;&#x4E24;&#x79CD;&#x4E3B;&#x8981;&#x7684;&#x8D22;&#x52A1;&#x5956;&#x52B1;&#x65B9;&#x5F0F;&#x6765;&#x6FC0;&#x52B1;&#x7528;&#x6237;&#x7EF4;&#x62A4;&#x7F51;&#x7EDC;&#xFF1A;&#x5956;&#x52B1;&#x548C;&#x4EA4;&#x6613;&#x8D39;&#x7528;&#x3002; &#x7B2C;&#x4E00;&#x4E2A;&#x53D1;&#x73B0;&#x54C8;&#x5E0C;&#x503C;&#x4F4E;&#x4E8E;&#x7ED9;&#x5B9A;&#x96BE;&#x5EA6;&#x76EE;&#x6807;&#x7684;&#x77FF;&#x5DE5;&#x5C06;&#x6709;&#x6743;&#x201C;&#x6253;&#x5370;&#x201D;&#x65B0;&#x7684;&#x6BD4;&#x7279;&#x5E01;&#xFF0C;&#x5E76;&#x63A5;&#x6536;&#x53D1;&#x9001;&#x65B9;&#x5728;&#x5E7F;&#x64AD;&#x4ED8;&#x6B3E;&#x65F6;&#x5411;&#x7F51;&#x7EDC;&#x652F;&#x4ED8;&#x7684;&#x4EA4;&#x6613;&#x8D39;&#x3002;&#x6BCF;&#x4E2A;&#x533A;&#x5757;&#x7684;&#x7B2C;&#x4E00;&#x7B14;&#x4EA4;&#x6613;&#x90FD;&#x662F;&#x201C;&#x786C;&#x5E01;&#x521B;&#x9020;&#x4EA4;&#x6613;&#x201D;&#x3002;&#x786C;&#x5E01;&#x521B;&#x9020;&#x4EA4;&#x6613;&#x5141;&#x8BB8;&#x533A;&#x5757;&#x7684;&#x77FF;&#x5DE5;&#x94F8;&#x9020;&#x65B0;&#x7684;&#x6BD4;&#x7279;&#x5E01;&#x5E76;&#x5C06;&#x8FD9;&#x4E9B;&#x65B0;&#x7684;&#x6BD4;&#x7279;&#x5E01;&#x53D1;&#x9001;&#x5230;&#x4ED6;&#x6216;&#x5979;&#x7684;&#x94B1;&#x5305;&#x3002;2016&#x5E74;&#xFF0C;&#x96C6;&#x4F53;&#x5956;&#x52B1;&#x7684;&#x4EF7;&#x503C;&#x7EA6;&#x4E3A;25&#x4E2A;&#x6BD4;&#x7279;&#x5E01;&#x3002;&#x4F46;&#x662F;&#xFF0C;&#x6B64;&#x901F;&#x7387;&#x5927;&#x7EA6;&#x6BCF;&#x56DB;&#x5E74;&#x4E0B;&#x964D;&#x4E00;&#x6B21;&#xFF0C;&#x76EE;&#x524D;(18&#x5E74;)&#x4E3A;12.5&#x6BD4;&#x7279;&#x5E01;&#x3002;&#x96C6;&#x4F53;&#x5956;&#x52B1;&#x6FC0;&#x52B1;&#x8BDA;&#x5B9E;&#x7684;&#x884C;&#x4E3A;&#xFF0C;&#x56E0;&#x4E3A;&#x53EA;&#x6709;&#x5728;&#x7EF4;&#x62A4;&#x7F51;&#x7EDC;&#x7684;&#x5176;&#x4ED6;&#x7528;&#x6237;&#x63A5;&#x53D7;&#x786C;&#x5E01;&#x521B;&#x9020;&#x4EA4;&#x6613;&#x7684;&#x60C5;&#x51B5;&#x4E0B;&#xFF0C;&#x786C;&#x5E01;&#x521B;&#x9020;&#x4EA4;&#x6613;&#x624D;&#x6709;&#x4EF7;&#x503C;&#x3002; &#x7B2C;&#x4E8C;&#x4E2A;&#x5956;&#x52B1;&#x662F;&#x4EA4;&#x6613;&#x8D39;&#x7528;&#x3002;&#x7528;&#x6237;&#x53D1;&#x9001;&#x6BD4;&#x7279;&#x5E01;&#x4EA4;&#x6613;&#x65F6;&#xFF0C;&#x4ED6;&#x4EEC;&#x4F1A;&#x6536;&#x53D6;&#x8D39;&#x7528;&#x3002;&#x8D39;&#x7528;&#x8D8A;&#x9AD8;&#xFF0C;&#x77FF;&#x5DE5;&#x5C06;&#x4EA4;&#x6613;&#x5305;&#x542B;&#x5728;&#x5176;&#x5019;&#x9009;&#x533A;&#x5757;&#x4E2D;&#x7684;&#x53EF;&#x80FD;&#x6027;&#x5C31;&#x8D8A;&#x5927;&#xFF0C;&#x8FD9;&#x610F;&#x5473;&#x7740;&#x4EA4;&#x6613;&#x7684;&#x786E;&#x8BA4;&#x65F6;&#x95F4;&#x5C06;&#x66F4;&#x5FEB;&#x3002; Bitcoin Minig and Transaction Revenues &#x56FE;4 &#x4F46;&#x662F;&#xFF0C;&#x6BD4;&#x7279;&#x5E01;&#x7684;&#x5DE5;&#x4F5C;&#x91CF;&#x8BC1;&#x660E;&#x7B97;&#x6CD5;&#x6709;&#x7F3A;&#x70B9;&#x3002; &#x9996;&#x5148;&#xFF0C;&#x653B;&#x51FB;&#x8005;&#x53EF;&#x4EE5;&#x5229;&#x7528;&#x51E0;&#x79CD;&#x653B;&#x51FB;&#x5A92;&#x4ECB;&#xFF0C;&#x5305;&#x62EC;&#xFF1A; race attack Finney attack vector 76 attack alternative history attack majority attack denial-of-service attack Sybil attack selfish mining &#x7B2C;&#x4E8C;&#xFF0C;&#x8BE5;&#x7F51;&#x7EDC;&#x4F7F;&#x7528;&#x5927;&#x91CF;&#x80FD;&#x6E90;&#x548C;&#x786C;&#x4EF6;&#x8BBE;&#x5907;&#xFF0C;&#x636E;&#x4F30;&#x8BA1;&#x6BCF;&#x5E74;&#x82B1;&#x8D39;&#x5927;&#x7EA6;4&#x4EBF;&#x7F8E;&#x5143;&#x3002;&#x7531;&#x4E8E;&#x8D8A;&#x6765;&#x8D8A;&#x591A;&#x7684;&#x4F01;&#x4E1A;&#x5BB6;&#x52A0;&#x5165;&#x91C7;&#x77FF;&#x4E1A;&#xFF0C;&#x5BFB;&#x627E;&#x6BD4;&#x7279;&#x5E01;&#x533A;&#x5757;&#x7684;&#x96BE;&#x5EA6;&#x4E0D;&#x65AD;&#x589E;&#x52A0;&#x3002;&#x56E0;&#x6B64;&#xFF0C;&#x77FF;&#x5DE5;&#x4E3A;&#x627E;&#x5230;&#x533A;&#x5757;&#x6240;&#x5FC5;&#x987B;&#x8D2D;&#x4E70;&#x7684;&#x7535;&#x529B;&#x5728;&#x4E0D;&#x65AD;&#x589E;&#x52A0;&#x3002;&#x8FD9;&#x5C31;&#x662F;&#x4E3A;&#x4EC0;&#x4E48;&#x91C7;&#x77FF;&#x81EA;&#x7136;&#x4F1A;&#x96C6;&#x4E2D;&#x5728;&#x7535;&#x4EF7;&#x4FBF;&#x5B9C;&#x7684;&#x56FD;&#x5BB6;/&#x5730;&#x533A;&#x7684;&#x539F;&#x56E0;&#x3002; &#x50CF;&#x9EC4;&#x91D1;&#x4E00;&#x6837;&#xFF0C;&#x6BD4;&#x7279;&#x5E01;&#x4E5F;&#x4F7F;&#x7528;&#x7535;&#x529B;&#x548C;&#x8D44;&#x672C;&#x8BBE;&#x5907;&#x6765;&#x5F00;&#x91C7;&#x65B0;&#x786C;&#x5E01;&#x3002;&#x968F;&#x673A;&#x9009;&#x62E9;&#x521B;&#x5EFA;&#x4E00;&#x4E2A;&#x533A;&#x5757;&#x5E76;&#x83B7;&#x5F97;&#x5956;&#x52B1;&#x7684;&#x6982;&#x7387;&#x7B49;&#x4E8E;&#x6BCF;&#x4E2A;&#x77FF;&#x5DE5;&#x7684;&#x91C7;&#x77FF;&#x80FD;&#x529B;&#x9664;&#x4EE5;&#x7F51;&#x7EDC;&#x4E0A;&#x91C7;&#x77FF;&#x80FD;&#x529B;&#x7684;&#x603B;&#x548C;&#x3002;&#x6316;&#x6398;&#x786C;&#x4EF6;&#x6D88;&#x8017;&#x7684;&#x529F;&#x7387;&#x8D8A;&#x591A;&#xFF0C;&#x54C8;&#x5E0C;&#x7387;&#x5C31;&#x8D8A;&#x9AD8;&#x3002;&#x8FD9;&#x6837;&#x53EF;&#x4EE5;&#x4ECE;&#x91C7;&#x77FF;&#x4E2D;&#x83B7;&#x5F97;&#x66F4;&#x9AD8;&#x7684;&#x5229;&#x6DA6;&#x3002;&#x7528;&#x4E8E;&#x8BA1;&#x7B97;&#x7684;&#x53C2;&#x6570;&#x5305;&#x62EC;&#xFF1A;&#x96BE;&#x5EA6;&#x7CFB;&#x6570;&#xFF0C;&#x54C8;&#x5E0C;&#x7387;(TH/s)&#xFF0C;BTC/USD&#x6C47;&#x7387;&#xFF0C;&#x4EE5;&#x767E;&#x5206;&#x6BD4;&#x8868;&#x793A;&#x7684;&#x6C60;&#x8D39;&#x7528;&#xFF0C;&#x786C;&#x4EF6;&#x6210;&#x672C;(USD)&#xFF0C;&#x529F;&#x7387;(watt)&#xFF0C;&#x529F;&#x7387;&#x6210;&#x672C;(USD/kWh) Proof of Stake (PoS) &#x4E0E;&#x6BD4;&#x7279;&#x5E01;&#x6216;&#x9EC4;&#x91D1;&#x4E0D;&#x540C;&#xFF0C;&#x80A1;&#x6743;&#x8BC1;&#x660E;&#x5141;&#x8BB8;&#x62E5;&#x6709;&#x6700;&#x591A;&#x8D44;&#x4EA7;&#x7684;&#x7528;&#x6237;&#x51ED;&#x7A7A;&#x521B;&#x9020;&#x786C;&#x5E01;&#x3002;&#x5728;&#x80A1;&#x6743;&#x8BC1;&#x660E;&#x7CFB;&#x7EDF;&#x4E2D;&#xFF0C;&#x83B7;&#x5F97;&#x5956;&#x52B1;&#x7684;&#x6982;&#x7387;&#x7B49;&#x4E8E;&#x7528;&#x6237;&#x6301;&#x6709;&#x7684;&#x786C;&#x5E01;&#x6BD4;&#x4F8B;&#x9664;&#x4EE5;&#x6D41;&#x901A;&#x786C;&#x5E01;&#x603B;&#x6570;&#x3002;&#x5B58;&#x5728;&#x591A;&#x79CD;&#x80A1;&#x6743;&#x8BC1;&#x660E;&#xFF0C;&#x5305;&#x62EC;&#x79DF;&#x8D41;&#x80A1;&#x6743;&#x8BC1;&#x660E;&#x548C;&#x59D4;&#x6258;&#x80A1;&#x6743;&#x8BC1;&#x660E;&#x3002;&#x4E24;&#x79CD;&#x7CFB;&#x7EDF;&#x90FD;&#x8FBE;&#x5230;&#x76F8;&#x4F3C;&#x7684;&#x7ED3;&#x679C;&#x3002;&#x4F46;&#x662F;&#xFF0C;&#x5DE5;&#x4F5C;&#x8BC1;&#x660E;&#x4F1A;&#x7ED9;&#x73AF;&#x5883;&#x5E26;&#x6765;&#x8D1F;&#x9762;&#x7684;&#x5916;&#x90E8;&#x5F71;&#x54CD;&#x3002;&#x90A3;&#x4E3A;&#x4EC0;&#x4E48;&#x4EBA;&#x4EEC;&#x4ECD;&#x5728;&#x4F7F;&#x7528;&#x5DE5;&#x4F5C;&#x8BC1;&#x660E;&#xFF1F;&#x5E02;&#x503C;&#x6700;&#x9AD8;&#x7684;&#x4EE3;&#x5E01;&#x90FD;&#x4F9D;&#x8D56;&#x4E8E;&#x5DE5;&#x4F5C;&#x91CF;&#x8BC1;&#x660E;&#xFF0C;&#x4F46;&#x80A1;&#x6743;&#x8BC1;&#x660E;&#x8D8A;&#x6765;&#x8D8A;&#x53D7;&#x6B22;&#x8FCE;&#xFF1A;&#x4EE5;&#x592A;&#x574A;&#xFF0C;&#x7B2C;&#x4E8C;&#x5927;&#x5E02;&#x503C;&#x4EE3;&#x5E01;&#xFF0C;&#x6709;&#x671B;&#x5728;19&#x5E74;&#x4ECE;&#x5DE5;&#x4F5C;&#x91CF;&#x8BC1;&#x660E;&#x8F6C;&#x53D8;&#x4E3A;&#x59D4;&#x6258;&#x7684;&#x80A1;&#x6743;&#x8BC1;&#x660E;&#x3002; Proof of Stake attack vectors noting-at-stake attack short-and-long-range attacks precomputing attack denial-of-service attack Sybil attack bribe attack &#x9664;&#x4E86;&#x653B;&#x51FB;&#x5A92;&#x4ECB;&#x4E4B;&#x5916;&#xFF0C;&#x80A1;&#x6743;&#x8BC1;&#x660E;&#x8FD8;&#x6CA1;&#x6709;&#x5728;&#x5E02;&#x573A;&#x4E0A;&#x5F97;&#x5230;&#x5F88;&#x597D;&#x7684;&#x6D4B;&#x8BD5;&#x3002;&#x5C3D;&#x7BA1;&#x8BB8;&#x591A;&#x80A1;&#x6743;&#x8BC1;&#x660E;&#x7684;&#x652F;&#x6301;&#x8005;&#x58F0;&#x79F0;&#x5B83;&#x6CA1;&#x6709;&#x5DE5;&#x4F5C;&#x8BC1;&#x660E;&#x90A3;&#x4E48;&#x96C6;&#x4E2D;&#xFF0C;&#x4F46;&#x8FD9;&#x4E0D;&#x4E00;&#x5B9A;&#x662F;&#x6B63;&#x786E;&#x7684;&#x3002;&#x7531;&#x4E8E;&#x6295;&#x8D44;&#x8005;&#x5BF9;&#x4ED6;&#x4EEC;&#x7684;long positions&#x6536;&#x53D6;&#x5229;&#x606F;&#xFF0C;&#x80A1;&#x6743;&#x8BC1;&#x660E;&#x9F13;&#x52B1;&#x56E4;&#x79EF;&#x800C;&#x975E;&#x5DE5;&#x4F5C;&#x8BC1;&#x660E;&#x3002; &#x6B63;&#x5982;&#x5B89;&#x5FB7;&#x70C8;&#x4E9A;&#x65AF;&#xB7;&#x5B89;&#x4E1C;&#x8BFA;&#x666E;&#x6D1B;&#x65AF;&#xFF08;Andreas Antonopoulos&#xFF09;&#x5728;&#x9A6C;&#x6765;&#x897F;&#x4E9A;&#x5409;&#x9686;&#x5761;&#x7684;&#x7EF4;&#x65AF;&#x739B;&#xB7;&#x6BD4;&#x6602;&#x96C6;&#x56E2;&#xFF08;Wisma BeeOn Group&#xFF09;&#x4E0A;&#x89E3;&#x91CA;&#x7684;&#x90A3;&#x6837;&#xFF0C;&#x80A1;&#x6743;&#x8BC1;&#x660E;&#x53EF;&#x4EE5;&#x4F7F;&#x5BCC;&#x4EBA;&#x53D8;&#x5F97;&#x66F4;&#x5BCC;&#x88D5;&#x3002;&#x8FD9;&#x5BF9;&#x52A0;&#x5BC6;&#x8D27;&#x5E01;&#x7684;&#x6301;&#x6709;&#x8005;&#x4EA7;&#x751F;&#x4E86;&#x96C6;&#x4E2D;&#x5F71;&#x54CD;&#x3002;&#x76F8;&#x53CD;&#xFF0C;&#x5DE5;&#x4F5C;&#x91CF;&#x8BC1;&#x660E;&#x77FF;&#x5DE5;&#x88AB;&#x8FEB;&#x5411;&#x5E02;&#x573A;&#x53D1;&#x5E03;&#x4E00;&#x5B9A;&#x6570;&#x91CF;&#x7684;&#x786C;&#x5E01;&#xFF0C;&#x4EE5;&#x4FBF;&#x6295;&#x8D44;&#x4E8E;&#x65B0;&#x7684;&#x91C7;&#x77FF;&#x786C;&#x4EF6;&#x5E76;&#x652F;&#x4ED8;&#x7535;&#x8D39;&#x3002;&#x8FD9;&#x4F7F;&#x5F97;&#x6BCF;&#x5929;&#x90FD;&#x6709;&#x76F8;&#x5BF9;&#x6052;&#x5B9A;&#x6570;&#x91CF;&#x7684;&#x65B0;&#x94F8;&#x9020;&#x6BD4;&#x7279;&#x5E01;&#x8FDB;&#x5165;&#x5E02;&#x573A;&#x3002; &#x603B;&#x7ED3; &#x52A0;&#x5BC6;&#x8D27;&#x5E01;&#x9762;&#x4E34;&#x7684;&#x4E3B;&#x8981;&#x6298;&#x8877;&#x662F;&#x96C6;&#x4E2D;&#x5316;&#x548C;&#x6548;&#x7387;&#x4E4B;&#x95F4;&#x3002;&#x51B3;&#x7B56;&#x8FC7;&#x7A0B;&#x8D8A;&#x96C6;&#x4E2D;&#xFF0C;&#x51B3;&#x7B56;&#x901F;&#x5EA6;&#x8D8A;&#x5FEB;&#xFF0C;&#x7F51;&#x7EDC;&#x53EF;&#x6269;&#x5C55;&#x6027;&#x8D8A;&#x5F3A;&#x3002;&#x53E6;&#x4E00;&#x65B9;&#x9762;&#xFF0C;&#x7F51;&#x7EDC;&#x8D8A;&#x4E0D;&#x96C6;&#x4E2D;&#xFF0C;&#x8FBE;&#x6210;&#x5171;&#x8BC6;&#x6240;&#x82B1;&#x8D39;&#x7684;&#x65F6;&#x95F4;&#x5C31;&#x8D8A;&#x957F;&#x3002;&#x8FD9;&#x4E0E;&#x72EC;&#x88C1;&#x653F;&#x6743;&#x548C;&#x76F4;&#x63A5;&#x6C11;&#x4E3B;&#x653F;&#x4F53;&#x4E4B;&#x95F4;&#x7684;&#x4E8C;&#x5206;&#x6CD5;&#x4E0D;&#x540C;&#x3002;&#x5F53;&#x80A1;&#x4E1C;&#x4E4B;&#x95F4;&#x7684;&#x7B49;&#x7EA7;&#x5236;&#x5EA6;&#x7EDF;&#x4E00;&#x65F6;&#xFF0C;&#x5F88;&#x96BE;&#x8FBE;&#x6210;&#x4E00;&#x81F4;&#x7684;&#x51B3;&#x7B56;&#x3002;&#x5C3D;&#x7BA1;&#x5F15;&#x5165;&#x4EA4;&#x6613;&#x5BF9;&#x624B;&#x5E76;&#x4E0D;&#x662F;&#x5728;&#x6BCF;&#x79CD;&#x60C5;&#x51B5;&#x4E0B;&#x90FD;&#x5B58;&#x5728;&#x95EE;&#x9898;&#xFF0C;&#x4F46;&#x533A;&#x5757;&#x94FE;&#x6280;&#x672F;&#x7684;&#x6700;&#x521D;&#x76EE;&#x6807;&#x662F;&#x5728;&#x6CA1;&#x6709;&#x4E2D;&#x4ECB;&#x673A;&#x6784;&#x7684;&#x60C5;&#x51B5;&#x4E0B;&#x8FBE;&#x6210;&#x5171;&#x8BC6;&#x3002;&#x77FF;&#x5DE5;&#xFF0C;&#x7532;&#x9AA8;&#x6587;&#xFF0C;&#x89C1;&#x8BC1;&#x4EBA;&#xFF0C;&#x4EE3;&#x8868;&#x6216;&#x5229;&#x76CA;&#x76F8;&#x5173;&#x8005;&#x90FD;&#x5728;&#x4E00;&#x5B9A;&#x7A0B;&#x5EA6;&#x4E0A;&#x96C6;&#x4E2D;&#x4E86;&#x7CFB;&#x7EDF;&#x3002; &#x65E0;&#x9700;&#x5F15;&#x5165;&#x6709;&#x5411;&#x65E0;&#x73AF;&#x56FE;&#x534F;&#x8C03;&#x5668;&#x5C31;&#x53EF;&#x4EE5;&#x6D88;&#x9664;&#x5DE5;&#x4F5C;&#x7528;&#x7535;&#x91CF;&#x8BC1;&#x660E;&#x7684;&#x5171;&#x8BC6;&#x673A;&#x5236;&#x5C06;&#x5728;&#x52A0;&#x5BC6;&#x7A7A;&#x95F4;&#x4E2D;&#x6210;&#x4E3A;&#x5934;&#x6761;&#x65B0;&#x95FB;&#x3002;&#x9EBB;&#x7701;&#x7406;&#x5DE5;&#x5B66;&#x9662;&#x7684;&#x5BC6;&#x7801;&#x5B66;&#x5BB6;&#x897F;&#x5C14;&#x7EF4;&#x5965;&#xB7;&#x7C73;&#x5361;&#x5229;&#xFF08;Silvio Micali&#xFF09;&#x62A5;&#x544A;&#x8BF4;&#xFF0C;&#x4ED6;&#x7684;&#x5171;&#x8BC6;&#x673A;&#x5236;Algorand&#x540C;&#x65F6;&#x5B9E;&#x73B0;&#x4E86;&#x53BB;&#x4E2D;&#x5FC3;&#x5316;&#x548C;&#x5B89;&#x5168;&#x6027;&#x3002;&#x6211;&#x4EEC;&#x8BA1;&#x5212;&#x5C06;&#x8FD9;&#x79CD;&#x7B97;&#x6CD5;&#x548C;&#x91C7;&#x7528;&#x8BE5;&#x7B97;&#x6CD5;&#x7684;&#x786C;&#x5E01;&#x4FDD;&#x7559;&#x5728;&#x6211;&#x4EEC;&#x7684;&#x96F7;&#x8FBE;&#x4E0A;&#x3002;&#x6B64;&#x5916;&#xFF0C;&#x8BF8;&#x5982;Tezos&#x548C;Dfinity&#x4E4B;&#x7C7B;&#x7684;&#x4EE3;&#x5E01;&#x6709;&#x671B;&#x5C06;&#x6CBB;&#x7406;&#x5D4C;&#x5165;&#x534F;&#x8BAE;&#x7EA7;&#x522B;&#xFF0C;&#x8FD9;&#x53EF;&#x80FD;&#x4F7F;&#x5206;&#x6563;&#x80A1;&#x4E1C;&#x80FD;&#x591F;&#x66F4;&#x5FEB;&#x5730;&#x8FBE;&#x6210;&#x5171;&#x8BC6;&#x3002;&#x5C3D;&#x7BA1;&#x6211;&#x4EEC;&#x5BF9;&#x5F00;&#x53D1;&#x4EBA;&#x5458;&#x957F;&#x671F;&#x89E3;&#x51B3;&#x6269;&#x5C55;&#x95EE;&#x9898;&#x7684;&#x80FD;&#x529B;&#x6301;&#x4E50;&#x89C2;&#x6001;&#x5EA6;&#xFF0C;&#x4F46;&#x6211;&#x4EEC;&#x8BA4;&#x8BC6;&#x5230;&#xFF0C;&#x5DE5;&#x4F5C;&#x8BC1;&#x660E;&#x81F3;&#x5C11;&#x5DF2;&#x6709;&#x5341;&#x5E74;&#x7684;&#x826F;&#x597D;&#x8BB0;&#x5F55;&#x4F7F;&#x5176;&#x6210;&#x4E3A;&#x5171;&#x8BC6;&#x673A;&#x5236;&#x7684;&#x4E0D;&#x8D25;&#x652F;&#x6301;&#x8005;&#x3002;&#x4F46;&#x662F;&#xFF0C;&#x653F;&#x5E9C;&#x53EF;&#x80FD;&#x4F1A;&#x6253;&#x51FB;&#x7528;&#x7535;&#x6765;&#x5F00;&#x91C7;&#x52A0;&#x5BC6;&#x8D27;&#x5E01;&#xFF0C;&#x56E0;&#x6B64;&#xFF0C;&#x6211;&#x4EEC;&#x5EFA;&#x8BAE;&#x6301;&#x6709;&#x4E00;&#x7CFB;&#x5217;&#x5177;&#x6709;&#x4E0D;&#x540C;&#x5171;&#x8BC6;&#x673A;&#x5236;&#x7684;&#x52A0;&#x5BC6;&#x8D44;&#x4EA7;&#x3002; &#x540D;&#x8BCD;&#x89E3;&#x91CA; wallets &#x6BD4;&#x7279;&#x5E01;&#x94B1;&#x5305;&#x7528;&#x4E8E;&#x7BA1;&#x7406;&#x6BCF;&#x4E2A;&#x7528;&#x6237;&#x7684;&#x516C;&#x79C1;&#x94A5;&#x5BF9;&#x3002;&#x8FD9;&#x4E9B;&#x94B1;&#x5305;&#x53EF;&#x4EE5;&#x662F;&#x5728;&#x7EBF;&#xFF0C;&#x53F0;&#x5F0F;&#x673A;&#xFF0C;&#x624B;&#x673A;&#xFF0C;&#x7EB8;&#x5F20;&#x6216;&#x786C;&#x4EF6;&#x3002;&#x800C;&#x4E14;&#xFF0C;&#x8FD9;&#x4E9B;&#x94B1;&#x5305;&#x5206;&#x4E3A;&#x4E24;&#x4E2A;&#x4E0D;&#x540C;&#x7684;&#x7EC4;&#xFF1A;&#x70ED;&#x94B1;&#x5305;&#x548C;&#x51B7;&#x94B1;&#x5305;&#x3002;&#x533A;&#x522B;&#x5728;&#x4E8E;&#x4ED6;&#x4EEC;&#x5982;&#x4F55;&#x7BA1;&#x7406;&#x7528;&#x6237;&#x7684;&#x516C;&#x94A5;-&#x79C1;&#x94A5;&#x5BF9;&#x7684;&#x79C1;&#x94A5;: &#x5982;&#x679C;&#x79C1;&#x94A5;&#x5DF2;&#x751F;&#x6210;&#x5E76;&#x8131;&#x673A;&#x5B58;&#x50A8;&#xFF0C;&#x5219;&#x5B83;&#x4F4D;&#x4E8E;&#x51B7;&#x94B1;&#x5305;(cold wallet)&#x4E2D;; &#x5982;&#x679C;&#x79C1;&#x94A5;&#x662F;&#x5728;&#x7EBF;&#x751F;&#x6210;&#x548C;&#x5B58;&#x50A8;&#x7684;&#xFF0C;&#x5219;&#x5B83;&#x4F4D;&#x4E8E;&#x70ED;&#x94B1;&#x5305;(hot wallet)&#x4E2D;&#x3002; double-spending double-spending&#x662F;&#x4F2A;&#x9020;&#x6CD5;&#x5B9A;&#x8D27;&#x5E01;&#x6216;&#x8D2C;&#x4F4E;&#x8BF8;&#x5982;&#x9EC4;&#x91D1;&#x4E4B;&#x7C7B;&#x7684;&#x5B9E;&#x7269;&#x5546;&#x54C1;&#x8D27;&#x5E01;&#x7684;&#x6570;&#x5B57;&#x7248;&#x672C;&#x3002;double-spending&#x662F;&#x5C06;&#x76F8;&#x540C;&#x7684;&#x52A0;&#x5BC6;&#x8D27;&#x5E01;&#x5355;&#x4F4D;&#x53D1;&#x9001;&#x5230;&#x4E24;&#x4E2A;&#x94B1;&#x5305;&#x5730;&#x5740;&#x4EE5;&#x8FDB;&#x884C;&#x6B3A;&#x8BC8;&#x7684;&#x8FC7;&#x7A0B;&#x3002; proof of work &#x6709;&#x4E24;&#x79CD;&#x7C7B;&#x578B;&#x7684;&#x5DE5;&#x4F5C;&#x91CF;&#x8BC1;&#x660E;&#x534F;&#x8BAE;&#x3002;&#x4E00;&#x79CD;&#x534F;&#x8BAE;&#x662F;&#x6311;&#x6218;&#x54CD;&#x5E94;&#x534F;&#x8BAE;(challenge-response)&#x3002;&#x53E6;&#x4E00;&#x4E2A;&#x662F;&#x89E3;&#x51B3;&#x65B9;&#x6848;&#x9A8C;&#x8BC1;&#x534F;&#x8BAE;(solution-verification protocol)&#x3002; transaction fee &#x4EA4;&#x6613;&#x8D39;&#x662F;&#x7531;&#x6BD4;&#x7279;&#x5E01;&#x7528;&#x6237;&#x63D0;&#x4F9B;&#x7684;&#x4E00;&#x79CD;&#x6FC0;&#x52B1;&#x63AA;&#x65BD;&#xFF0C;&#x4EE5;&#x786E;&#x4FDD;&#x4ED6;&#x6216;&#x5979;&#x7684;&#x4EA4;&#x6613;&#x5C06;&#x88AB;&#x5305;&#x62EC;&#x5728;&#x7F51;&#x7EDC;&#x4E0A;&#x7ED3;&#x7B97;&#x7684;&#x4E0B;&#x4E00;&#x4E2A;&#x4EA4;&#x6613;&#x5757;&#x4E2D;&#x3002;&#x4EA4;&#x6613;&#x8D39;&#x7528;&#x7531;&#x6210;&#x529F;&#x5C06;&#x533A;&#x5757;&#x6DFB;&#x52A0;&#x5230;&#x533A;&#x5757;&#x94FE;&#x7684;&#x6BD4;&#x7279;&#x5E01;&#x77FF;&#x5DE5;&#x6216;&#x91C7;&#x77FF;&#x6C60;&#x5904;&#x7406;&#x548C;&#x63A5;&#x6536;&#x3002; &#x6BD4;&#x7279;&#x5E01;&#x5F53;&#x524D;&#x7684;&#x5757;&#x5927;&#x5C0F;&#x9650;&#x5236;&#x4E3A;1&#x5146;&#x5B57;&#x8282;&#xFF0C;&#x6BCF;&#x4E2A;&#x5757;&#x90FD;&#x5DF2;&#x586B;&#x5145;&#x5230;&#x5176;&#x6700;&#x5927;&#x6570;&#x636E;&#x5BB9;&#x91CF;&#x3002;&#x7531;&#x4E8E;&#x4F7F;&#x7528;&#x7F51;&#x7EDC;&#x7684;&#x9700;&#x6C42;&#x6EE1;&#x8DB3;&#x4E86;&#x7F51;&#x7EDC;&#x7684;&#x56FA;&#x5B9A;&#x5BB9;&#x91CF;&#xFF0C;&#x56E0;&#x6B64;&#x4EA7;&#x751F;&#x4E86;&#x201C;&#x4EA4;&#x6613;&#x7A00;&#x7F3A;&#x6027;&#x201D;&#x3002;&#x4EA4;&#x6613;&#x7A00;&#x7F3A;&#x6027;&#x662F;&#x7531;&#x4E8E;&#x6BCF;10&#x5206;&#x949F;&#x6700;&#x591A;&#x63D0;&#x4F9B;&#x4EF7;&#x503C;1,000,000&#x5B57;&#x8282;&#x7684;&#x4EA4;&#x6613;&#x6570;&#x636E;&#xFF0C;&#x800C;&#x4E0D;&#x662F;&#x7F51;&#x7EDC;&#x7528;&#x6237;&#x53D1;&#x9001;&#x6BD4;&#x7279;&#x5E01;&#x4EA4;&#x6613;&#x7684;&#x53EF;&#x53D8;&#x9700;&#x6C42;&#x3002;&#x968F;&#x540E;&#xFF0C;&#x51FA;&#x73B0;&#x4E86;&#x6536;&#x8D39;&#x5E02;&#x573A;&#x3002;&#x5728;&#x8FD9;&#x4E2A;&#x5E02;&#x573A;&#x4E2D;&#xFF0C;&#x786E;&#x8BA4;&#x4EA4;&#x6613;&#x9700;&#x8981;&#x6BCF;&#x5343;&#x5B57;&#x8282;&#x6700;&#x4F4E;&#x8D39;&#x7528;&#x3002;&#x8D85;&#x51FA;&#x8BE5;&#x6700;&#x5C0F;&#x503C;&#x7684;&#x4EFB;&#x4F55;&#x5185;&#x5BB9;&#x90FD;&#x5C06;&#x5728;&#x4E0B;&#x4E00;&#x4E2A;&#x533A;&#x5757;&#x4E2D;&#x5F97;&#x5230;&#x786E;&#x8BA4;&#xFF0C;&#x800C;&#x4F4E;&#x4E8E;&#x6B64;&#x6700;&#x5C0F;&#x503C;&#x7684;&#x4EFB;&#x4F55;&#x5185;&#x5BB9;&#x90FD;&#x5FC5;&#x987B;&#x7B49;&#x5230;&#x7ADE;&#x4E89;&#x4E0D;&#x662F;&#x90A3;&#x4E48;&#x6FC0;&#x70C8;&#x4E3A;&#x6B62;&#x3002;&#x8FD9;&#x662F;&#x7531;&#x4E8E;&#x77FF;&#x5DE5;&#x666E;&#x904D;&#x5E0C;&#x671B;&#x83B7;&#x5F97;&#x6700;&#x5927;&#x5229;&#x6DA6;&#x5E76;&#x5E0C;&#x671B;&#x4E3A;&#x5176;&#x7F51;&#x7EDC;&#x670D;&#x52A1;&#x4ED8;&#x8D39;&#x3002; &#x539F;&#x6587;&#x94FE;&#x63A5;","categories":[{"name":"Repost","slug":"Repost","permalink":"https://littlemeemoon.cn/categories/Repost/"},{"name":"Blockchain","slug":"Repost/Blockchain","permalink":"https://littlemeemoon.cn/categories/Repost/Blockchain/"},{"name":"Consensus Mechanisms","slug":"Repost/Blockchain/Consensus-Mechanisms","permalink":"https://littlemeemoon.cn/categories/Repost/Blockchain/Consensus-Mechanisms/"}],"tags":[{"name":"Blockchain","slug":"Blockchain","permalink":"https://littlemeemoon.cn/tags/Blockchain/"},{"name":"Consensus Mechanisms","slug":"Consensus-Mechanisms","permalink":"https://littlemeemoon.cn/tags/Consensus-Mechanisms/"},{"name":"Bitcoin","slug":"Bitcoin","permalink":"https://littlemeemoon.cn/tags/Bitcoin/"},{"name":"PoW","slug":"PoW","permalink":"https://littlemeemoon.cn/tags/PoW/"},{"name":"PoS","slug":"PoS","permalink":"https://littlemeemoon.cn/tags/PoS/"}],"keywords":[{"name":"Repost","slug":"Repost","permalink":"https://littlemeemoon.cn/categories/Repost/"},{"name":"Blockchain","slug":"Repost/Blockchain","permalink":"https://littlemeemoon.cn/categories/Repost/Blockchain/"},{"name":"Consensus Mechanisms","slug":"Repost/Blockchain/Consensus-Mechanisms","permalink":"https://littlemeemoon.cn/categories/Repost/Blockchain/Consensus-Mechanisms/"}]},{"title":"Leetcode Note in Apri 2020 | part 3 | day 15-21 | (二).","slug":"Technology/Coding/Leetcode/Leetcode-Note-in-Apri-2020-part-3-day-15-21-(二)","date":"2020-04-18T06:35:52.000Z","updated":"2020-06-04T04:19:01.758Z","comments":true,"path":"2020/04/18/Technology/Coding/Leetcode/Leetcode-Note-in-Apri-2020-part-3-day-15-21-(二)/","link":"","permalink":"https://littlemeemoon.cn/2020/04/18/Technology/Coding/Leetcode/Leetcode-Note-in-Apri-2020-part-3-day-15-21-(%E4%BA%8C)/","excerpt":"","text":"&#x5199;&#x5728;&#x524D;&#x9762;&#x7684;&#x8BDD; &#x8FD9;&#x7BC7;&#x6587;&#x7AE0;&#x53EA;&#x4F1A;&#x66F4;&#x65B0;&#x4E00;&#x9053;&#x9898;&#xFF0C;&#x8FD9;&#x9053;&#x9898;&#x662F;&#x6211;&#x76EE;&#x524D;&#x505A;LeetCode&#x4EE5;&#x6765;&#x7B2C;&#x4E00;&#x6B21;&#x505A;&#x5230;&#x7684;&#x548C;&#x56FE;&#x8BBA;&#x76F8;&#x5173;&#x7684;&#x9898;&#xFF0C;&#x6240;&#x4EE5;&#x60F3;&#x5355;&#x72EC;&#x62FF;&#x51FA;&#x6765;&#x505A;&#x4E00;&#x4E2A;&#x603B;&#x7ED3;&#xFF0C;&#x501F;&#x8BE5;&#x9898;&#x5DE9;&#x56FA;&#x4EE5;&#x524D;&#x5B66;&#x8FC7;&#x7684;&#x76F8;&#x5173;&#x7B97;&#x6CD5;&#x4EE5;&#x53CA;&#x5728;&#x8BE5;&#x9898;&#x4E2D;&#x7684;&#x5E94;&#x7528;&#x3002; &#x76F8;&#x5173;&#x7B97;&#x6CD5;&#x4E0E;&#x6570;&#x636E;&#x7ED3;&#x6784; &#x7B97;&#x6CD5; &#x6DF1;&#x5EA6;&#x4F18;&#x5148;&#x641C;&#x7D22;&#x7B97;&#x6CD5;&#xFF08;Depth-First-Search&#xFF0C;DFS&#xFF09; &#x6DF1;&#x5EA6;&#x4F18;&#x5148;&#x641C;&#x7D22;&#x7B97;&#x6CD5;&#xFF08;&#x82F1;&#x8BED;&#xFF1A;Depth-First-Search&#xFF0C;DFS&#xFF09;&#x662F;&#x4E00;&#x79CD;&#x7528;&#x4E8E;&#x904D;&#x5386;&#x6216;&#x641C;&#x7D22;&#x6811;&#x6216;&#x56FE;&#x7684;&#x7B97;&#x6CD5;&#x3002;&#x8FD9;&#x4E2A;&#x7B97;&#x6CD5;&#x4F1A;&#x5C3D;&#x53EF;&#x80FD;&#x6DF1;&#x7684;&#x641C;&#x7D22;&#x6811;&#x7684;&#x5206;&#x652F;&#x3002;&#x5F53;&#x8282;&#x70B9;v&#x7684;&#x6240;&#x5728;&#x8FB9;&#x90FD;&#x5DF1;&#x88AB;&#x63A2;&#x5BFB;&#x8FC7;&#xFF0C;&#x641C;&#x7D22;&#x5C06;&#x56DE;&#x6EAF;&#x5230;&#x53D1;&#x73B0;&#x8282;&#x70B9;v&#x7684;&#x90A3;&#x6761;&#x8FB9;&#x7684;&#x8D77;&#x59CB;&#x8282;&#x70B9;&#x3002;&#x8FD9;&#x4E00;&#x8FC7;&#x7A0B;&#x4E00;&#x76F4;&#x8FDB;&#x884C;&#x5230;&#x5DF2;&#x53D1;&#x73B0;&#x4ECE;&#x6E90;&#x8282;&#x70B9;&#x53EF;&#x8FBE;&#x7684;&#x6240;&#x6709;&#x8282;&#x70B9;&#x4E3A;&#x6B62;&#x3002;&#x5982;&#x679C;&#x8FD8;&#x5B58;&#x5728;&#x672A;&#x88AB;&#x53D1;&#x73B0;&#x7684;&#x8282;&#x70B9;&#xFF0C;&#x5219;&#x9009;&#x62E9;&#x5176;&#x4E2D;&#x4E00;&#x4E2A;&#x4F5C;&#x4E3A;&#x6E90;&#x8282;&#x70B9;&#x5E76;&#x91CD;&#x590D;&#x4EE5;&#x4E0A;&#x8FC7;&#x7A0B;&#xFF0C;&#x6574;&#x4E2A;&#x8FDB;&#x7A0B;&#x53CD;&#x590D;&#x8FDB;&#x884C;&#x76F4;&#x5230;&#x6240;&#x6709;&#x8282;&#x70B9;&#x90FD;&#x88AB;&#x8BBF;&#x95EE;&#x4E3A;&#x6B62;&#x3002;&#x8FD9;&#x79CD;&#x7B97;&#x6CD5;&#x4E0D;&#x4F1A;&#x6839;&#x636E;&#x56FE;&#x7684;&#x7ED3;&#x6784;&#x7B49;&#x4FE1;&#x606F;&#x8C03;&#x6574;&#x6267;&#x884C;&#x7B56;&#x7565;&#x3002; &#x6DF1;&#x5EA6;&#x4F18;&#x5148;&#x641C;&#x7D22;&#x662F;&#x56FE;&#x8BBA;&#x4E2D;&#x7684;&#x7ECF;&#x5178;&#x7B97;&#x6CD5;&#xFF0C;&#x5229;&#x7528;&#x6DF1;&#x5EA6;&#x4F18;&#x5148;&#x641C;&#x7D22;&#x7B97;&#x6CD5;&#x53EF;&#x4EE5;&#x4EA7;&#x751F;&#x76EE;&#x6807;&#x56FE;&#x7684;&#x62D3;&#x6251;&#x6392;&#x5E8F;&#x8868;&#xFF0C;&#x5229;&#x7528;&#x62D3;&#x6251;&#x6392;&#x5E8F;&#x8868;&#x53EF;&#x4EE5;&#x65B9;&#x4FBF;&#x7684;&#x89E3;&#x51B3;&#x5F88;&#x591A;&#x76F8;&#x5173;&#x7684;&#x56FE;&#x8BBA;&#x95EE;&#x9898;&#xFF0C;&#x5982;&#x65E0;&#x6743;&#x6700;&#x957F;&#x8DEF;&#x5F84;&#x95EE;&#x9898;&#x7B49;&#x7B49;&#x3002; &#x7EF4;&#x57FA;&#x767E;&#x79D1; &#x52A8;&#x753B;&#x6F14;&#x793A; dfs &#x5B9E;&#x73B0;&#x65B9;&#x6CD5; &#x9996;&#x5148;&#x5C06;&#x6839;&#x8282;&#x70B9;&#x653E;&#x5165;stack&#x4E2D;&#x3002; &#x4ECE;stack&#x4E2D;&#x53D6;&#x51FA;&#x7B2C;&#x4E00;&#x4E2A;&#x8282;&#x70B9;&#xFF0C;&#x5E76;&#x68C0;&#x9A8C;&#x5B83;&#x662F;&#x5426;&#x4E3A;&#x76EE;&#x6807;&#x3002; 2.1 &#x5982;&#x679C;&#x627E;&#x5230;&#x76EE;&#x6807;&#xFF0C;&#x5219;&#x7ED3;&#x675F;&#x641C;&#x5BFB;&#x5E76;&#x56DE;&#x4F20;&#x7ED3;&#x679C;&#x3002; 2.2 &#x5426;&#x5219;&#x5C06;&#x5B83;&#x67D0;&#x4E00;&#x4E2A;&#x5C1A;&#x672A;&#x68C0;&#x9A8C;&#x8FC7;&#x7684;&#x76F4;&#x63A5;&#x5B50;&#x8282;&#x70B9;&#x52A0;&#x5165;stack&#x4E2D;&#x3002; &#x91CD;&#x590D;&#x6B65;&#x9AA4;2&#x3002; &#x5982;&#x679C;&#x4E0D;&#x5B58;&#x5728;&#x672A;&#x68C0;&#x6D4B;&#x8FC7;&#x7684;&#x76F4;&#x63A5;&#x5B50;&#x8282;&#x70B9;&#x3002; 4.1 &#x5C06;&#x4E0A;&#x4E00;&#x7EA7;&#x8282;&#x70B9;&#x52A0;&#x5165;stack&#x4E2D;&#x3002; 4.2 &#x91CD;&#x590D;&#x6B65;&#x9AA4;2&#x3002; &#x91CD;&#x590D;&#x6B65;&#x9AA4;4&#x3002; &#x82E5;stack&#x4E3A;&#x7A7A;&#xFF0C;&#x8868;&#x793A;&#x6574;&#x5F20;&#x56FE;&#x90FD;&#x68C0;&#x67E5;&#x8FC7;&#x4E86;&#x2014;&#x2014;&#x4EA6;&#x5373;&#x56FE;&#x4E2D;&#x6CA1;&#x6709;&#x6B32;&#x641C;&#x5BFB;&#x7684;&#x76EE;&#x6807;&#x3002;&#x7ED3;&#x675F;&#x641C;&#x5BFB;&#x5E76;&#x56DE;&#x4F20;&#x201C;&#x627E;&#x4E0D;&#x5230;&#x76EE;&#x6807;&#x201D;&#x3002; &#x4F2A;&#x4EE3;&#x7801; bool visited[MAX_VERTEX_NUM]; void DFSTraverse(Graph G){ for(v = 0; v &lt; G.vexnum; ++i) visited[v] = false; for(v = 0; v &lt; G.vexnum; ++v) if(!visited[v]) DFS(G,v); } void DFS(Graph G,int v) { visit&#xFF08;v&#xFF09;; visited[v] = true; for(w = FirstNeighbor(G,v); w &gt;= 0; w = NextNeighbor(G,v,w)) if(!visited[w]) DFS(G,w); } &#x5E7F;&#x5EA6;&#x4F18;&#x5148;&#x641C;&#x7D22;&#x7B97;&#x6CD5;&#xFF08;Breadth-First Search&#xFF0C;BFS&#xFF09; &#x5E7F;&#x5EA6;&#x4F18;&#x5148;&#x641C;&#x7D22;&#x7B97;&#x6CD5;&#xFF08;&#x82F1;&#x8BED;&#xFF1A;Breadth-First Search&#xFF0C;&#x7F29;&#x5199;&#x4E3A;BFS&#xFF09;&#xFF0C;&#x53C8;&#x8BD1;&#x4F5C;&#x5BBD;&#x5EA6;&#x4F18;&#x5148;&#x641C;&#x7D22;&#xFF0C;&#x6216;&#x6A2A;&#x5411;&#x4F18;&#x5148;&#x641C;&#x7D22;&#xFF0C;&#x662F;&#x4E00;&#x79CD;&#x56FE;&#x5F62;&#x641C;&#x7D22;&#x7B97;&#x6CD5;&#x3002;&#x7B80;&#x5355;&#x7684;&#x8BF4;&#xFF0C;BFS&#x662F;&#x4ECE;&#x6839;&#x8282;&#x70B9;&#x5F00;&#x59CB;&#xFF0C;&#x6CBF;&#x7740;&#x6811;&#x7684;&#x5BBD;&#x5EA6;&#x904D;&#x5386;&#x6811;&#x7684;&#x8282;&#x70B9;&#x3002;&#x5982;&#x679C;&#x6240;&#x6709;&#x8282;&#x70B9;&#x5747;&#x88AB;&#x8BBF;&#x95EE;&#xFF0C;&#x5219;&#x7B97;&#x6CD5;&#x4E2D;&#x6B62;&#x3002;&#x5E7F;&#x5EA6;&#x4F18;&#x5148;&#x641C;&#x7D22;&#x7684;&#x5B9E;&#x73B0;&#x4E00;&#x822C;&#x91C7;&#x7528;open-closed&#x8868;&#x3002; &#x7EF4;&#x57FA;&#x767E;&#x79D1; &#x52A8;&#x753B;&#x6F14;&#x793A; bfs &#x5B9E;&#x73B0;&#x65B9;&#x6CD5; &#x9996;&#x5148;&#x5C06;&#x6839;&#x8282;&#x70B9;&#x653E;&#x5165;&#x961F;&#x5217;&#x4E2D;; &#x4ECE;&#x961F;&#x5217;&#x4E2D;&#x53D6;&#x51FA;&#x7B2C;&#x4E00;&#x4E2A;&#x8282;&#x70B9;&#xFF0C;&#x5E76;&#x68C0;&#x9A8C;&#x5B83;&#x662F;&#x5426;&#x4E3A;&#x76EE;&#x6807;; 2.1 &#x5982;&#x679C;&#x627E;&#x5230;&#x76EE;&#x6807;&#xFF0C;&#x5219;&#x7ED3;&#x675F;&#x641C;&#x7D22;&#x5E76;&#x56DE;&#x4F20;&#x7ED3;&#x679C;; 2.2 &#x5426;&#x5219;&#x5C06;&#x5B83;&#x6240;&#x6709;&#x5C1A;&#x672A;&#x68C0;&#x9A8C;&#x8FC7;&#x7684;&#x76F4;&#x63A5;&#x5B50;&#x8282;&#x70B9;&#x52A0;&#x5165;&#x961F;&#x5217;&#x4E2D;&#x3002; &#x82E5;&#x961F;&#x5217;&#x4E3A;&#x7A7A;&#xFF0C;&#x8868;&#x793A;&#x6574;&#x5F20;&#x56FE;&#x90FD;&#x68C0;&#x67E5;&#x8FC7;&#x4E86;&#x2014;&#x2014;&#x4EA6;&#x5373;&#x56FE;&#x4E2D;&#x6CA1;&#x6709;&#x6B32;&#x641C;&#x7D22;&#x7684;&#x76EE;&#x6807;&#x3002;&#x7ED3;&#x675F;&#x641C;&#x7D22;&#x5E76;&#x56DE;&#x4F20;&#x201C;&#x627E;&#x4E0D;&#x5230;&#x76EE;&#x6807;&#x201D;; &#x91CD;&#x590D;&#x6B65;&#x9AA4;2&#x3002; &#x4F2A;&#x4EE3;&#x7801; bfs_code Flood fill&#x7B97;&#x6CD5; Flood fill&#x7B97;&#x6CD5;&#x662F;&#x4ECE;&#x4E00;&#x4E2A;&#x533A;&#x57DF;&#x4E2D;&#x63D0;&#x53D6;&#x82E5;&#x5E72;&#x4E2A;&#x8FDE;&#x901A;&#x7684;&#x70B9;&#x4E0E;&#x5176;&#x4ED6;&#x76F8;&#x90BB;&#x533A;&#x57DF;&#x533A;&#x5206;&#x5F00;&#xFF08;&#x6216;&#x5206;&#x522B;&#x67D3;&#x6210;&#x4E0D;&#x540C;&#x989C;&#x8272;&#xFF09;&#x7684;&#x7ECF;&#x5178;&#x7B97;&#x6CD5;&#x3002;&#x56E0;&#x4E3A;&#x5176;&#x601D;&#x8DEF;&#x7C7B;&#x4F3C;&#x6D2A;&#x6C34;&#x4ECE;&#x4E00;&#x4E2A;&#x533A;&#x57DF;&#x6269;&#x6563;&#x5230;&#x6240;&#x6709;&#x80FD;&#x5230;&#x8FBE;&#x7684;&#x533A;&#x57DF;&#x800C;&#x5F97;&#x540D;&#x3002;&#x5728;GNU Go&#x548C;&#x626B;&#x96F7;&#x4E2D;&#xFF0C;Flood Fill&#x7B97;&#x6CD5;&#x88AB;&#x7528;&#x6765;&#x8BA1;&#x7B97;&#x9700;&#x8981;&#x88AB;&#x6E05;&#x9664;&#x7684;&#x533A;&#x57DF;&#x3002;&#x7EF4;&#x57FA;&#x767E;&#x79D1;&#x3002;&#x8BE5;&#x7B97;&#x6CD5;&#x53EF;&#x7528;&#x6DF1;&#x5EA6;&#x4F18;&#x5148;&#x904D;&#x5386;&#x7B97;&#x6CD5;&#x6216;&#x5E7F;&#x5EA6;&#x4F18;&#x5148;&#x904D;&#x5386;&#x7B97;&#x6CD5;&#x5B9E;&#x73B0;&#x3002; &#x7B97;&#x6CD5;&#x5B9E;&#x73B0; Flood fill&#x7B97;&#x6CD5;&#x63A5;&#x53D7;&#x4E09;&#x4E2A;&#x53C2;&#x6570;&#xFF1A;&#x8D77;&#x59CB;&#x8282;&#x70B9;&#xFF0C;&#x76EE;&#x6807;&#x989C;&#x8272;&#x548C;&#x66FF;&#x6362;&#x989C;&#x8272;&#x3002; &#x7B97;&#x6CD5;&#x904D;&#x5386;&#x6240;&#x6709;&#x7684;&#x8282;&#x70B9;&#x4EE5;&#x5BFB;&#x627E;&#x548C;&#x8D77;&#x59CB;&#x8282;&#x70B9;&#x76F8;&#x8FDE;&#x7684;&#x8282;&#x70B9;&#xFF08;&#x901A;&#x8FC7;&#x4E00;&#x6761;&#x76EE;&#x6807;&#x989C;&#x8272;&#x7684;&#x8DEF;&#x5F84;&#x76F8;&#x8FDE;&#xFF09;&#xFF0C;&#x7136;&#x540E; &#x6539;&#x53D8;&#x4ED6;&#x4EEC;&#x7684;&#x989C;&#x8272;&#x4E3A;&#x66FF;&#x6362;&#x989C;&#x8272;&#x3002;&#x76EE;&#x524D;&#x6709;&#x8BB8;&#x591A;flood-fill&#x7B97;&#x6CD5;&#x7684;&#x6784;&#x5EFA;&#x65B9;&#x5F0F;&#xFF0C;&#x4F46;&#x662F;&#x4ED6;&#x4EEC;&#x90FD;&#x663E;&#x793A;&#x6216;&#x9690;&#x5F0F;&#x7684;&#x4F7F;&#x7528;&#x961F;&#x5217;&#x6216;&#x8005;&#x6808; &#x6839;&#x636E;&#x6211;&#x4EEC;&#x662F;&#x5426;&#x8003;&#x8651;&#x5F53;&#x524D;&#x8282;&#x70B9;&#x5BF9;&#x89D2;&#x7EBF;&#x65B9;&#x5411;&#x7684;&#x8282;&#x70B9;&#xFF0C;&#x7B97;&#x6CD5;&#x5206;&#x4E3A;&#x56DB;&#x8DEF;&#x7B97;&#x6CD5;&#xFF08;&#x4E0D;&#x8003;&#x8651;&#x5BF9;&#x89D2;&#x7EBF;&#x65B9;&#x5411;&#x7684;&#x8282;&#x70B9;&#xFF09;&#x548C;&#x516B;&#x8DEF;&#x7B97;&#x6CD5;&#xFF08;&#x8003;&#x8651;&#x5BF9;&#x89D2;&#x7EBF;&#x65B9;&#x5411;&#x7684;&#x8282;&#x70B9;&#xFF09;&#x3002; &#x4F2A;&#x4EE3;&#x7801; /*&#x5047;&#x8BBE;MAX_X&#x4E0E;MAX_Y&#x662F;&#x56FE;&#x7684;&#x5BBD;&#x548C;&#x9AD8;*/ void flood_fill(int x,int y,int color) { area[x][y] = color; if(x &gt; 0 &amp;&amp; area[x-1][y] == 0) flood_fill(x-1, y, color); if(y &gt; 0 &amp;&amp; area[x][y-1] == 0) flood_fill(x, y-1, color); if(x &lt; MAX_X &amp;&amp; area[x+1][y] == 0) flood_fill(x+1, y, color); if(y &lt; MAX_Y &amp;&amp; area[x][y+1] == 0) flood_fill(x, y+1, color); } &#x52A8;&#x753B;&#x6F14;&#x793A; &#x56DB;&#x4E2A;&#x65B9;&#x5411;&#x4E0A;&#x7684;Flood Fill flood_fill_4 &#x516B;&#x4E2A;&#x65B9;&#x5411;&#x4E0A;&#x7684;Flood Fill flood_fill_8 &#x6570;&#x636E;&#x7ED3;&#x6784; &#x5E76;&#x67E5;&#x96C6; &#x5728;&#x8BA1;&#x7B97;&#x673A;&#x79D1;&#x5B66;&#x4E2D;&#xFF0C;&#x5E76;&#x67E5;&#x96C6;&#x662F;&#x4E00;&#x79CD;&#x6811;&#x578B;&#x7684;&#x6570;&#x636E;&#x7ED3;&#x6784;&#xFF0C;&#x7528;&#x4E8E;&#x5904;&#x7406;&#x4E00;&#x4E9B;&#x4E0D;&#x4EA4;&#x96C6;&#xFF08;Disjoint Sets&#xFF09;&#x7684;&#x5408;&#x5E76;&#x53CA;&#x67E5;&#x8BE2;&#x95EE;&#x9898;&#x3002;&#x6709;&#x4E00;&#x4E2A;&#x8054;&#x5408;-&#x67E5;&#x627E;&#x7B97;&#x6CD5;&#xFF08;union-find algorithm&#xFF09;&#x5B9A;&#x4E49;&#x4E86;&#x4E24;&#x4E2A;&#x7528;&#x4E8E;&#x6B64;&#x6570;&#x636E;&#x7ED3;&#x6784;&#x7684;&#x64CD;&#x4F5C;&#xFF1A; - Find&#xFF1A;&#x786E;&#x5B9A;&#x5143;&#x7D20;&#x5C5E;&#x4E8E;&#x54EA;&#x4E00;&#x4E2A;&#x5B50;&#x96C6;&#x3002;&#x5B83;&#x53EF;&#x4EE5;&#x88AB;&#x7528;&#x6765;&#x786E;&#x5B9A;&#x4E24;&#x4E2A;&#x5143;&#x7D20;&#x662F;&#x5426;&#x5C5E;&#x4E8E;&#x540C;&#x4E00;&#x5B50;&#x96C6;&#x3002; - Union&#xFF1A;&#x5C06;&#x4E24;&#x4E2A;&#x5B50;&#x96C6;&#x5408;&#x5E76;&#x6210;&#x540C;&#x4E00;&#x4E2A;&#x96C6;&#x5408;&#x3002; &#x7531;&#x4E8E;&#x652F;&#x6301;&#x8FD9;&#x4E24;&#x79CD;&#x64CD;&#x4F5C;&#xFF0C;&#x4E00;&#x4E2A;&#x4E0D;&#x76F8;&#x4EA4;&#x96C6;&#x4E5F;&#x5E38;&#x88AB;&#x79F0;&#x4E3A;&#x8054;&#x5408;-&#x67E5;&#x627E;&#x6570;&#x636E;&#x7ED3;&#x6784;&#xFF08;union-find data structure&#xFF09;&#x6216;&#x5408;&#x5E76;-&#x67E5;&#x627E;&#x96C6;&#x5408;&#xFF08;merge-find set&#xFF09;&#x3002;&#x5176;&#x4ED6;&#x7684;&#x91CD;&#x8981;&#x65B9;&#x6CD5;&#xFF0C;MakeSet&#xFF0C;&#x7528;&#x4E8E;&#x521B;&#x5EFA;&#x5355;&#x5143;&#x7D20;&#x96C6;&#x5408;&#x3002;&#x6709;&#x4E86;&#x8FD9;&#x4E9B;&#x65B9;&#x6CD5;&#xFF0C;&#x8BB8;&#x591A;&#x7ECF;&#x5178;&#x7684;&#x5212;&#x5206;&#x95EE;&#x9898;&#x53EF;&#x4EE5;&#x88AB;&#x89E3;&#x51B3;&#x3002; &#x4E3A;&#x4E86;&#x66F4;&#x52A0;&#x7CBE;&#x786E;&#x7684;&#x5B9A;&#x4E49;&#x8FD9;&#x4E9B;&#x65B9;&#x6CD5;&#xFF0C;&#x9700;&#x8981;&#x5B9A;&#x4E49;&#x5982;&#x4F55;&#x8868;&#x793A;&#x96C6;&#x5408;&#x3002;&#x4E00;&#x79CD;&#x5E38;&#x7528;&#x7684;&#x7B56;&#x7565;&#x662F;&#x4E3A;&#x6BCF;&#x4E2A;&#x96C6;&#x5408;&#x9009;&#x5B9A;&#x4E00;&#x4E2A;&#x56FA;&#x5B9A;&#x7684;&#x5143;&#x7D20;&#xFF0C;&#x79F0;&#x4E3A;&#x4EE3;&#x8868;&#xFF0C;&#x4EE5;&#x8868;&#x793A;&#x6574;&#x4E2A;&#x96C6;&#x5408;&#x3002;&#x63A5;&#x7740;&#xFF0C;Find(x) &#x8FD4;&#x56DE;x&#x6240;&#x5C5E;&#x96C6;&#x5408;&#x7684;&#x4EE3;&#x8868;&#xFF0C;&#x800C;Union&#x4F7F;&#x7528;&#x4E24;&#x4E2A;&#x96C6;&#x5408;&#x7684;&#x4EE3;&#x8868;&#x4F5C;&#x4E3A;&#x53C2;&#x6570;&#x3002;&#x7EF4;&#x57FA;&#x767E;&#x79D1; &#x4F2A;&#x4EE3;&#x7801; &#x5728;&#x5E76;&#x67E5;&#x96C6;&#x68EE;&#x6797;&#x4E2D;&#xFF0C;&#x6BCF;&#x4E2A;&#x96C6;&#x5408;&#x7684;&#x4EE3;&#x8868;&#x5373;&#x662F;&#x96C6;&#x5408;&#x7684;&#x6839;&#x8282;&#x70B9;&#x3002;&#x201C;&#x67E5;&#x627E;&#x201D;&#x6839;&#x636E;&#x5176;&#x7236;&#x8282;&#x70B9;&#x7684;&#x5F15;&#x7528;&#x5411;&#x6839;&#x884C;&#x8FDB;&#x76F4;&#x5230;&#x5230;&#x5E95;&#x6811;&#x6839;&#x3002;&#x201C;&#x8054;&#x5408;&#x201D;&#x5C06;&#x4E24;&#x68F5;&#x6811;&#x5408;&#x5E76;&#x5230;&#x4E00;&#x8D77;&#xFF0C;&#x8FD9;&#x901A;&#x8FC7;&#x5C06;&#x4E00;&#x68F5;&#x6811;&#x7684;&#x6839;&#x8FDE;&#x63A5;&#x5230;&#x53E6;&#x4E00;&#x68F5;&#x6811;&#x7684;&#x6839;&#x3002;&#x5B9E;&#x73B0;&#x8FD9;&#x6837;&#x64CD;&#x4F5C;&#x7684;&#x4E00;&#x79CD;&#x65B9;&#x6CD5;&#x662F;&#xFF1A; function MakeSet(x) x.parent := x x.rank := 0 function Union(x, y) xRoot := Find(x) yRoot := Find(y) if xRoot == yRoot return // x&#x548C;y&#x4E0D;&#x5728;&#x540C;&#x4E00;&#x4E2A;&#x96C6;&#x5408;&#xFF0C;&#x5408;&#x5E76;&#x5B83;&#x4EEC;&#x3002; if xRoot.rank &lt; yRoot.rank xRoot.parent := yRoot else if xRoot.rank &gt; yRoot.rank yRoot.parent := xRoot else yRoot.parent := xRoot xRoot.rank := xRoot.rank + 1 function Find(x) if x.parent != x x.parent := Find(x.parent) return x.parent &#x5E94;&#x7528; Number of Islands Given a 2d grid map of &apos;1&apos;s (land) and &apos;0&apos;s (water), count the number of islands. An island is surrounded by water and is formed by connecting adjacent lands horizontally or vertically. You may assume all four edges of the grid are all surrounded by water. Example 1: Input: 11110 11010 11000 00000 Output: 1 Example 2: Input: 11000 11000 00100 00011 Output: 3 Solutions &#x8BE5;&#x9898;&#x7684;&#x89E3;&#x9898;&#x601D;&#x8DEF;&#x6709;&#x4E24;&#x4E2A;&#xFF0C;&#x4E00;&#x4E2A;&#x662F;&#x4F7F;&#x7528;Flood fill&#x7B97;&#x6CD5;&#xFF0C;&#x4E00;&#x4E2A;&#x662F;&#x91C7;&#x7528;&#x5E76;&#x67E5;&#x96C6;&#x7684;&#x65B9;&#x6CD5;&#x3002; &#x57FA;&#x4E8E;Flood Fill&#x7B97;&#x6CD5; &#x6839;&#x636E;&#x7B97;&#x6CD5;&#x7279;&#x70B9;&#xFF0C;&#x6211;&#x4EEC;&#x53EF;&#x4EE5;&#x4ECE;&#x4E00;&#x4E2A;&#x70B9;&#x51FA;&#x53D1;&#xFF0C;&#x7136;&#x540E;&#x627E;&#x5230;&#x4E0E;&#x5176;&#x8FDE;&#x901A;&#x7684;&#x70B9;&#xFF08;&#x53EF;&#x901A;&#x8FC7;&#x6DF1;&#x5EA6;&#x4F18;&#x5148;&#x6216;&#x8005;&#x5E7F;&#x5EA6;&#x4F18;&#x5148;&#x7B97;&#x6CD5;&#x5B9E;&#x73B0;&#xFF09;&#x3002;&#x800C;&#x8FD9;&#x4E00;&#x7247;&#x8FDE;&#x7740;&#x7684;&#x533A;&#x57DF;&#x5C31;&#x662F;&#x6211;&#x4EEC;&#x8981;&#x627E;&#x7684;&#x5C9B;&#x5C7F;&#x3002;&#x6839;&#x636E;&#x9898;&#x610F;&#xFF0C;&#x8BE5;&#x9898;&#x5E94;&#x91C7;&#x7528;&#x56DB;&#x4E2A;&#x65B9;&#x5411;&#x7684;flood fill&#x7B97;&#x6CD5;&#x3002;&#x5177;&#x4F53;&#x770B;&#x4EE3;&#x7801;&#x5B9E;&#x73B0;&#x3002; &#x91C7;&#x7528;&#x6DF1;&#x5EA6;&#x4F18;&#x5148;&#x904D;&#x5386;&#x5B9E;&#x73B0; class Solution: def __dfs(self, grid, i, j, m, n, marked): marked[i][j] = True for direction in self.directions: new_i = i + direction[0] new_j = j + direction[1] if 0 &lt;= new_i &lt; m and 0 &lt;= new_j &lt; n and not(marked[new_i][new_j]) and grid[new_i][new_j] == &apos;1&apos;: self.__dfs(grid, new_i, new_j, m, n, marked) # x-1,y # x,y-1 x,y x,y+1 # x+1,y # &#x65B9;&#x5411;&#x6570;&#x7EC4;&#xFF0C;&#x5B83;&#x8868;&#x793A;&#x4E86;&#x76F8;&#x5BF9;&#x4E8E;&#x5F53;&#x524D;&#x4F4D;&#x7F6E;&#x7684; 4 &#x4E2A;&#x65B9;&#x5411;&#x7684;&#x6A2A;&#x3001;&#x7EB5;&#x5750;&#x6807;&#x7684;&#x504F;&#x79FB;&#x91CF;&#xFF0C;&#x8FD9;&#x662F;&#x4E00;&#x4E2A;&#x5E38;&#x89C1;&#x7684;&#x6280;&#x5DE7; directions = [(-1, 0), (0, -1), (1, 0), (0, 1)] def numIslands(self, grid: List[List[str]]) -&gt; int: m = len(grid) # &#x7279;&#x5224; if m == 0: return 0 n = len(grid[0]) marked = [[False for _ in range(n)] for _ in range(m)] count = 0 # &#x4ECE;&#x7B2C; 1 &#x884C;&#x3001;&#x7B2C; 1 &#x683C;&#x5F00;&#x59CB;&#xFF0C;&#x5BF9;&#x6BCF;&#x4E00;&#x683C;&#x5C1D;&#x8BD5;&#x8FDB;&#x884C;&#x4E00;&#x6B21; DFS &#x64CD;&#x4F5C; for i in range(m): for j in range(n): # &#x53EA;&#x8981;&#x662F;&#x9646;&#x5730;&#xFF0C;&#x4E14;&#x6CA1;&#x6709;&#x88AB;&#x8BBF;&#x95EE;&#x8FC7;&#x7684;&#xFF0C;&#x5C31;&#x53EF;&#x4EE5;&#x4F7F;&#x7528; DFS &#x53D1;&#x73B0;&#x4E0E;&#x4E4B;&#x76F8;&#x8FDE;&#x7684;&#x9646;&#x5730;&#xFF0C;&#x5E76;&#x8FDB;&#x884C;&#x6807;&#x8BB0; if not(marked[i][j]) and grid[i][j] == &apos;1&apos;: # count &#x53EF;&#x4EE5;&#x7406;&#x89E3;&#x4E3A;&#x8FDE;&#x901A;&#x5206;&#x91CF; count += 1 self.__dfs(grid, i, j, m, n, marked) return count &#x91C7;&#x7528;&#x5E7F;&#x5EA6;&#x4F18;&#x5148;&#x904D;&#x5386;&#x5B9E;&#x73B0; &#x4F7F;&#x7528;&#x5E7F;&#x5EA6;&#x4F18;&#x5148;&#x904D;&#x5386;&#x4E0D;&#x7528;&#x56DE;&#x6EAF;&#xFF0C;&#x4F46;&#x9700;&#x8981;&#x4E00;&#x4E2A;&#x8F85;&#x52A9;&#x961F;&#x5217;&#x3002; class Solution: def __bfs(self, grid, queue, cur_x, cur_y, m, n, marked): # &#x5F97;&#x5230; 4 &#x4E2A;&#x65B9;&#x5411;&#x7684;&#x5750;&#x6807; for direction in self.directions: new_i = cur_x + direction[0] new_j = cur_y + direction[1] # &#x5982;&#x679C;&#x4E0D;&#x8D8A;&#x754C;&#x3001;&#x6CA1;&#x6709;&#x88AB;&#x8BBF;&#x95EE;&#x8FC7;&#x5E76;&#x4E14;&#x662F;&#x9646;&#x5730;&#xFF0C;&#x7EE7;&#x7EED;&#x653E;&#x5165;&#x961F;&#x5217;&#xFF0C;&#x653E;&#x5165;&#x961F;&#x5217;&#x7684;&#x540C;&#x65F6;&#x6807;&#x8BB0;&#x5DF2;&#x7ECF;&#x8BBF;&#x95EE;&#x8FC7; if 0 &lt;= new_i &lt; m and 0 &lt;= new_j &lt; n and not(marked[new_i][new_j]) and grid[new_i][new_j] == &apos;1&apos;: queue.append((new_i, new_j)) # &#x5728;&#x653E;&#x5165;&#x961F;&#x5217;&#x4EE5;&#x540E;&#xFF0C;&#x9A6C;&#x4E0A;&#x6807;&#x8BB0;&#x6210;&#x5DF2;&#x7ECF;&#x8BBF;&#x95EE;&#x8FC7;&#xFF0C;&#x56E0;&#x4E3A;&#x53EA;&#x8981;&#x8FDB;&#x5165;&#x4E86;&#x961F;&#x5217;&#xFF0C;&#x8FDF;&#x65E9;&#x90FD;&#x4F1A;&#x904D;&#x5386;&#x5230;&#x5B83; # &#x5982;&#x679C;&#x662F;&#x51FA;&#x961F;&#x5217;&#x7684;&#x65F6;&#x5019;&#x518D;&#x6807;&#x8BB0;&#xFF0C;&#x4F1A;&#x9020;&#x6210;&#x5F88;&#x591A;&#x91CD;&#x590D;&#x7684;&#x7ED3;&#x70B9;&#x8FDB;&#x5165;&#x961F;&#x5217;&#xFF0C;&#x9020;&#x6210;&#x91CD;&#x590D;&#x7684;&#x64CD;&#x4F5C; marked[new_i][new_j] = True directions = [(-1, 0), (0, -1), (1, 0), (0, 1)] def numIslands(self, grid: List[List[str]]) -&gt; int: m = len(grid) if m == 0: return 0 n = len(grid[0]) marked = [[False for _ in range(n)] for _ in range(m)] count = 0 # &#x4ECE;&#x7B2C; 1 &#x884C;&#x3001;&#x7B2C; 1 &#x683C;&#x5F00;&#x59CB;&#xFF0C;&#x5BF9;&#x6BCF;&#x4E00;&#x683C;&#x5C1D;&#x8BD5;&#x8FDB;&#x884C;&#x4E00;&#x6B21; DFS &#x64CD;&#x4F5C; for i in range(m): for j in range(n): # &#x53EA;&#x8981;&#x662F;&#x9646;&#x5730;&#xFF0C;&#x4E14;&#x6CA1;&#x6709;&#x88AB;&#x8BBF;&#x95EE;&#x8FC7;&#x7684;&#xFF0C;&#x5C31;&#x53EF;&#x4EE5;&#x4F7F;&#x7528; BFS &#x53D1;&#x73B0;&#x4E0E;&#x4E4B;&#x76F8;&#x8FDE;&#x7684;&#x9646;&#x5730;&#xFF0C;&#x5E76;&#x8FDB;&#x884C;&#x6807;&#x8BB0; if not(marked[i][j]) and grid[i][j] == &apos;1&apos;: # count &#x53EF;&#x4EE5;&#x7406;&#x89E3;&#x4E3A;&#x8FDE;&#x901A;&#x5206;&#x91CF; count += 1 queue = deque() queue.append((i, j)) # &#x6807;&#x8BB0;&#x4E0A;&#x5DF2;&#x7ECF;&#x8BBF;&#x95EE;&#x8FC7; marked[i][j] = True while queue: cur_x, cur_y = queue.popleft() self.__bfs(grid, queue, cur_x, cur_y, m, n, marked) return count &#x57FA;&#x4E8E;&#x5E76;&#x67E5;&#x96C6; &#x4F7F;&#x7528;&#x5E76;&#x67E5;&#x96C6;&#x89E3;&#x51B3;&#x672C;&#x95EE;&#x9898;&#x7684;&#x57FA;&#x672C;&#x601D;&#x60F3;&#xFF1A; 1. &#x5982;&#x679C;&#x5F53;&#x524D;&#x662F;&#x201C;&#x9646;&#x5730;&#x201D;&#xFF0C;&#x5C1D;&#x8BD5;&#x4E0E;&#x5468;&#x56F4;&#x5408;&#x5E76;&#xFF1B; 2. &#x5982;&#x679C;&#x5F53;&#x524D;&#x662F;&#x201C;&#x6C34;&#x57DF;&#x201D;&#xFF0C;&#x5C31;&#x628A;&#x6240;&#x6709;&#x7684;&#x201C;&#x6C34;&#x57DF;&#x201D;&#x5408;&#x5E76;&#x5728;&#x4E00;&#x8D77;&#xFF0C;&#x4E3A;&#x6B64;&#xFF0C;&#x53EF;&#x8BBE;&#x7F6E;&#x4E86;&#x4E00;&#x4E2A;&#x865A;&#x62DF;&#x7684;&#x7ED3;&#x70B9;&#xFF0C;&#x8868;&#x793A;&#x201C;&#x6240;&#x6709;&#x7684;&#x6C34;&#x57DF;&#x90FD;&#x548C;&#x8FD9;&#x4E2A;&#x865A;&#x62DF;&#x7ED3;&#x70B9;&#x662F;&#x8FDE;&#x63A5;&#x7684;&#x201D;&#x3002; class Solution: def numIslands(self, grid: List[List[str]]) -&gt; int: class UnionFind: def __init__(self, n): self.count = n self.parent = [i for i in range(n)] self.rank = [1 for _ in range(n)] def get_count(self): return self.count def find(self, p): while p != self.parent[p]: self.parent[p] = self.parent[self.parent[p]] p = self.parent[p] return p def is_connected(self, p, q): return self.find(p) == self.find(q) def union(self, p, q): p_root = self.find(p) q_root = self.find(q) if p_root == q_root: return if self.rank[p_root] &gt; self.rank[q_root]: self.parent[q_root] = p_root elif self.rank[p_root] &lt; self.rank[q_root]: self.parent[p_root] = q_root else: self.parent[q_root] = p_root self.rank[p_root] += 1 self.count -= 1 row = len(grid) # &#x7279;&#x5224; if row == 0: return 0 col = len(grid[0]) def get_index(x, y): return x * col + y # &#x6CE8;&#x610F;&#xFF1A;&#x6211;&#x4EEC;&#x4E0D;&#x7528;&#x50CF; DFS &#x548C; BFS &#x4E00;&#x6837;&#xFF0C;4 &#x4E2A;&#x65B9;&#x5411;&#x90FD;&#x8981;&#x5C1D;&#x8BD5;&#xFF0C;&#x53EA;&#x8981;&#x770B;&#x4E00;&#x770B;&#x53F3;&#x8FB9;&#x548C;&#x4E0B;&#x9762;&#x5C31;&#x53EF;&#x4EE5;&#x4E86; directions = [(1, 0), (0, 1)] # &#x591A;&#x5F00;&#x4E00;&#x4E2A;&#x7A7A;&#x95F4;&#xFF0C;&#x628A;&#x6C34;&#x57DF; &quot;0&quot; &#x90FD;&#x5F52;&#x5230;&#x8FD9;&#x4E2A;&#x865A;&#x62DF;&#x7A7A;&#x95F4; dummy_node = row * col uf = UnionFind(dummy_node + 1) for i in range(row): for j in range(col): # &#x5982;&#x679C;&#x662F;&#x6C34;&#x57DF;&#xFF0C;&#x90FD;&#x8FDE;&#x5230;&#x90A3;&#x4E2A;&#x865A;&#x62DF;&#x7684;&#x7A7A;&#x95F4;&#x53BB; if grid[i][j] == &apos;0&apos;: uf.union(get_index(i, j), dummy_node) if grid[i][j] == &apos;1&apos;: # &#x5411;&#x4E0B;&#x5411;&#x53F3;&#x5982;&#x679C;&#x90FD;&#x662F;&#x9646;&#x5730;&#xFF0C;&#x5C31;&#x5408;&#x5E76; for direction in directions: new_x = i + direction[0] new_y = j + direction[1] if new_x &lt; row and new_y &lt; col and grid[new_x][new_y] == &apos;1&apos;: uf.union(get_index(i, j), get_index(new_x, new_y)) # &#x51CF;&#x53BB;&#x865A;&#x62DF;&#x7ED3;&#x70B9; return uf.get_count() - 1 &#x53C2;&#x8003;&#x8D44;&#x6599; Flood fill &#x6DF1;&#x5EA6;&#x4F18;&#x5148;&#x7B97;&#x6CD5; &#x5E7F;&#x5EA6;&#x4F18;&#x5148;&#x7B97;&#x6CD5; &#x5E76;&#x67E5;&#x96C6; https://leetcode-cn.com/problems/number-of-islands/solution/dfs-bfs-bing-cha-ji-python-dai-ma-java-dai-ma-by-l/","categories":[{"name":"Technology","slug":"Technology","permalink":"https://littlemeemoon.cn/categories/Technology/"},{"name":"Coding","slug":"Technology/Coding","permalink":"https://littlemeemoon.cn/categories/Technology/Coding/"},{"name":"Leetcode","slug":"Technology/Coding/Leetcode","permalink":"https://littlemeemoon.cn/categories/Technology/Coding/Leetcode/"}],"tags":[{"name":"Leetcode","slug":"Leetcode","permalink":"https://littlemeemoon.cn/tags/Leetcode/"},{"name":"Python","slug":"Python","permalink":"https://littlemeemoon.cn/tags/Python/"},{"name":"Algorithm","slug":"Algorithm","permalink":"https://littlemeemoon.cn/tags/Algorithm/"},{"name":"DFS","slug":"DFS","permalink":"https://littlemeemoon.cn/tags/DFS/"},{"name":"BFS","slug":"BFS","permalink":"https://littlemeemoon.cn/tags/BFS/"},{"name":"并查集","slug":"并查集","permalink":"https://littlemeemoon.cn/tags/%E5%B9%B6%E6%9F%A5%E9%9B%86/"}],"keywords":[{"name":"Technology","slug":"Technology","permalink":"https://littlemeemoon.cn/categories/Technology/"},{"name":"Coding","slug":"Technology/Coding","permalink":"https://littlemeemoon.cn/categories/Technology/Coding/"},{"name":"Leetcode","slug":"Technology/Coding/Leetcode","permalink":"https://littlemeemoon.cn/categories/Technology/Coding/Leetcode/"}]},{"title":"Paper Smash | Blockchain Technology for Healthcare-Facilitating the Transition to Patient-Driven Interoperability","slug":"Technology/Paper-Smash/BlockChain-Patient-Driven-Interoperability","date":"2020-04-16T07:47:09.000Z","updated":"2020-06-04T04:19:52.267Z","comments":true,"path":"2020/04/16/Technology/Paper-Smash/BlockChain-Patient-Driven-Interoperability/","link":"","permalink":"https://littlemeemoon.cn/2020/04/16/Technology/Paper-Smash/BlockChain-Patient-Driven-Interoperability/","excerpt":"","text":"&#x6458;&#x8981; &#x3010;&#x80CC;&#x666F;&#x3011;&#x4F20;&#x7EDF;&#x4E0A;&#xFF0C;&#x57FA;&#x4E8E;&#x673A;&#x6784;&#x9A71;&#x52A8;&#x7684;&#x533B;&#x7597;&#x4FDD;&#x5065;&#x7684;&#x4E92;&#x64CD;&#x4F5C;&#x6027;&#x96C6;&#x4E2D;&#x4E8E;&#x4E1A;&#x52A1;&#x5B9E;&#x4F53;&#xFF08;&#x4F8B;&#x5982;&#xFF0C;&#x4E0D;&#x540C;&#x7684;&#x533B;&#x9662;&#x7CFB;&#x7EDF;&#xFF09;&#x4E4B;&#x95F4;&#x7684;&#x6570;&#x636E;&#x4EA4;&#x6362;&#x3002;&#x6700;&#x8FD1;&#x6709;&#x4E00;&#x79CD;&#x63A8;&#x52A8;&#x4EE5;&#x60A3;&#x8005;&#x4E3A;&#x4E3B;&#x5BFC;&#x7684;&#x4E92;&#x64CD;&#x4F5C;&#x6027;&#x7684;&#x65B9;&#x6CD5;&#xFF0C;&#x5176;&#x4E2D;&#xFF0C;&#x5065;&#x5EB7;&#x6570;&#x636E;&#x4EA4;&#x6362;&#x662F;&#x7531;&#x60A3;&#x8005;&#x4E3B;&#x5BFC;&#x5E76;&#x7531;&#x60A3;&#x8005;&#x9A71;&#x52A8;&#x7684;&#x3002; &#x3010;&#x95EE;&#x9898;&#x3011;&#x4EE5;&#x60A3;&#x8005;&#x4E3A;&#x4E2D;&#x5FC3;&#x7684;&#x4E92;&#x64CD;&#x4F5C;&#x6027;&#x5E26;&#x6765;&#x4E86;&#x56F4;&#x7ED5;&#x5B89;&#x5168;&#x6027;&#x548C;&#x9690;&#x79C1;&#xFF0C;&#x6280;&#x672F;&#xFF0C;&#x6FC0;&#x52B1;&#x63AA;&#x65BD;&#x548C;&#x6CBB;&#x7406;&#x7684;&#x65B0;&#x6311;&#x6218;&#x548C;&#x65B0;&#x8981;&#x6C42;&#xFF0C;&#x800C;&#x8FD9;&#x7C7B;&#x6311;&#x6218;&#x5FC5;&#x987B;&#x6EE1;&#x8DB3;&#x6B64;&#x7C7B;&#x6570;&#x636E;&#x5171;&#x4EAB;&#x624D;&#x80FD;&#x6210;&#x529F;&#x83B7;&#x5F97;&#x6210;&#x529F;&#x3002;&#x5E76;&#x4E14;&#x5176;&#x4E2D;&#x8BB8;&#x591A;&#x6311;&#x6218;&#x5728;&#x4F20;&#x7EDF;&#x7684;&#x4E92;&#x64CD;&#x4F5C;&#x6027;&#x4E2D;&#x4E5F;&#x8FD8;&#x6CA1;&#x6709;&#x5F97;&#x4EE5;&#x89E3;&#x51B3; &#x3010;&#x672C;&#x6587;&#x63D0;&#x51FA;&#x7684;&#x89E3;&#x51B3;&#x65B9;&#x6CD5;&#x3011; 3.1 &#x7814;&#x7A76;&#x4E86;&#x533A;&#x5757;&#x94FE;&#x6280;&#x672F;&#x5982;&#x4F55;&#x901A;&#x8FC7;&#x4E94;&#x79CD;&#x673A;&#x5236;&#x4FC3;&#x8FDB;&#x8FD9;&#x79CD;&#x8F6C;&#x53D8;&#xFF1A; &#xFF08;1&#xFF09;&#x6570;&#x5B57;&#x8BBF;&#x95EE;&#x89C4;&#x5219; &#xFF08;2&#xFF09;&#x6570;&#x636E;&#x805A;&#x5408; &#xFF08;3&#xFF09;&#x6570;&#x636E;&#x6D41;&#x52A8;&#x6027; &#xFF08;4&#xFF09;&#x60A3;&#x8005;&#x8EAB;&#x4EFD; &#xFF08;5&#xFF09;&#x6570;&#x636E;&#x4E0D;&#x53D8;&#x6027; 3.2 &#x7814;&#x7A76;&#x4E86;&#x963B;&#x788D;&#x533A;&#x5757;&#x94FE;&#x7684;&#x60A3;&#x8005;&#x9A71;&#x52A8;&#x7684;&#x4E92;&#x64CD;&#x4F5C;&#x6027;&#x7684;&#x969C;&#x788D;&#xFF0C;&#x7279;&#x522B;&#x662F;&#x4E34;&#x5E8A;&#x6570;&#x636E;&#x4EA4;&#x6613;&#x91CF;&#xFF0C;&#x9690;&#x79C1;&#x548C;&#x5B89;&#x5168;&#x6027;&#xFF0C;&#x60A3;&#x8005;&#x53C2;&#x4E0E;&#x5EA6;&#x548C;&#x6FC0;&#x52B1;&#x63AA;&#x65BD;&#x3002; &#x3010;&#x7ED3;&#x8BBA;&#x3011;&#x5C3D;&#x7BA1;&#x4EE5;&#x60A3;&#x8005;&#x4E3A;&#x4E3B;&#x5BFC;&#x7684;&#x4E92;&#x64CD;&#x4F5C;&#x6027;&#x65B9;&#x6CD5;&#x662F;&#x533B;&#x7597;&#x4FDD;&#x5065;&#x4E2D;&#x4EE4;&#x4EBA;&#x5174;&#x594B;&#x7684;&#x8D8B;&#x52BF;&#xFF0C;&#x4F46;&#x9274;&#x4E8E;&#x8FD9;&#x4E9B;&#x6311;&#x6218;&#xFF0C;&#x533A;&#x5757;&#x94FE;&#x80FD;&#x5426;&#x4FC3;&#x8FDB;&#x4ECE;&#x4EE5;&#x673A;&#x6784;&#x4E3A;&#x4E2D;&#x5FC3;&#x7684;&#x6570;&#x636E;&#x5171;&#x4EAB;&#x5411;&#x4EE5;&#x60A3;&#x8005;&#x4E3A;&#x4E2D;&#x5FC3;&#x7684;&#x6570;&#x636E;&#x5171;&#x4EAB;&#x8FC7;&#x6E21;&#x5C1A;&#x5F85;&#x89C2;&#x5BDF;&#x3002; &#x7814;&#x7A76;&#x5185;&#x5BB9; why&#x533A;&#x5757;&#x94FE; &#x4ECE;&#x6458;&#x8981;&#x548C;&#x4ECB;&#x7ECD;&#x90E8;&#x5206;&#x53EF;&#x4EE5;&#x5F97;&#x77E5;&#xFF0C;&#x672C;&#x6587;&#x5C31;&#x533B;&#x7597;&#x4FDD;&#x5065;&#x7684;&#x4E92;&#x64CD;&#x4F5C;&#x6027;&#xFF0C;&#x7528;&#x6237;&#x533B;&#x7597;&#x6570;&#x636E;&#x4EA4;&#x6362;&#x63D0;&#x51FA;&#x4E86;&#x4E00;&#x4E9B;&#x76EE;&#x524D;&#x9762;&#x4E34;&#x7684;&#x6311;&#x6218;&#x3002;&#x5728;&#x4EE5;&#x60A3;&#x8005;&#x4E3A;&#x4E3B;&#x5BFC;&#x7684;&#x4E92;&#x64CD;&#x4F5C;&#x6027;&#x7684;&#x65B9;&#x6CD5;&#x7684;&#x8D8B;&#x52BF;&#x4EE5;&#x53CA;&#x4F20;&#x7EDF;&#x65B9;&#x5F0F;&#x4F9D;&#x65E7;&#x9762;&#x4E34;&#x8BB8;&#x591A;&#x6311;&#x6218;&#x5C1A;&#x672A;&#x89E3;&#x51B3;&#x7684;&#x524D;&#x63D0;&#x4E0B;&#xFF0C;&#x4F5C;&#x8005;&#x63D0;&#x51FA;&#x4E86;&#x91C7;&#x7528;&#x533A;&#x5757;&#x94FE;&#x8FD9;&#x6837;&#x4E00;&#x79CD;&#x65B0;&#x9896;&#x7684;&#x6280;&#x672F;&#xFF0C;&#x4F7F;&#x5176;&#x5728;&#x63D0;&#x9AD8;&#x4E92;&#x64CD;&#x4F5C;&#x6027;&#x65B9;&#x9762;&#x53D1;&#x6325;&#x4F5C;&#x7528;&#x3002;&#x8FD9;&#x662F;&#x56E0;&#x4E3A;&#x533A;&#x5757;&#x94FE;&#x5BF9;&#x5171;&#x4EAB;&#xFF0C;&#x5206;&#x53D1;&#x548C;&#x52A0;&#x5BC6;&#x7684;&#x91CD;&#x89C6;&#xFF0C;&#x5BF9;&#x5065;&#x5EB7;&#x6570;&#x636E;&#x7279;&#x522B;&#x6709;&#x5438;&#x5F15;&#x529B;&#x3002;&#x5C24;&#x5176;&#x662F;&#xFF0C;&#x66F4;&#x65B0;&#x7684;&#x533A;&#x5757;&#x94FE;&#x5DE5;&#x4F5C;&#xFF08;&#x667A;&#x80FD;&#x5408;&#x7EA6;&#xFF0C;&#x7B2C;&#x4E8C;&#x5C42;&#x7CFB;&#x7EDF;&#xFF0C;&#x8BB8;&#x53EF;&#x7684;&#x533A;&#x5757;&#x94FE;&#xFF09;&#x8FDB;&#x4E00;&#x6B65;&#x63D0;&#x4F9B;&#x4E86;&#x6F5C;&#x5728;&#x7684;&#x533B;&#x7597;&#x7528;&#x4F8B;&#xFF0C;&#x5E76;&#x4E14;&#x5728;&#x533B;&#x7597;&#x4FDD;&#x5065;&#x9886;&#x57DF;&#x4E0D;&#x4E4F;&#x5BF9;&#x6280;&#x672F;&#x6F5C;&#x529B;&#x7684;&#x5927;&#x8086;&#x5BA3;&#x4F20;&#x3002;&#x6545;&#x53EF;&#x4EE5;&#x5229;&#x7528;&#x533A;&#x5757;&#x94FE;&#x6280;&#x672F;&#x4FC3;&#x8FDB;&#x4ECE;&#x673A;&#x6784;&#x9A71;&#x52A8;&#x7684;&#x4E92;&#x64CD;&#x4F5C;&#x6027;&#x5230;&#x4EE5;&#x60A3;&#x8005;&#x4E3A;&#x4E2D;&#x5FC3;&#x7684;&#x4E92;&#x64CD;&#x4F5C;&#x6027;&#x7684;&#x8F6C;&#x53D8;&#x3002; &#x4E3B;&#x8981;&#x5DE5;&#x4F5C; &#x5065;&#x5EB7;&#x6570;&#x636E;&#x7684;&#x4E92;&#x64CD;&#x4F5C;&#x6027;&#x95EE;&#x9898; &#x4E92;&#x64CD;&#x4F5C;&#x6027;(Interoperability)&#x7684;&#x5B9A;&#x4E49;&#x4E0E;&#x4F5C;&#x7528; &#x536B;&#x751F;&#x4FE1;&#x606F;&#x4E0E;&#x7BA1;&#x7406;&#x7CFB;&#x7EDF;&#x5B66;&#x4F1A;&#x5C06;Interoperability&#x5B9A;&#x4E49;&#x4E3A;&#xFF1A;&#x4E0D;&#x540C;&#x4FE1;&#x606F;&#x6280;&#x672F;&#x7CFB;&#x7EDF;&#x548C;&#x8F6F;&#x4EF6;&#x5E94;&#x7528;&#x7A0B;&#x5E8F;&#x8FDB;&#x884C;&#x901A;&#x4FE1;&#xFF0C;&#x4EA4;&#x6362;&#x6570;&#x636E;&#x548C;&#x4F7F;&#x7528;&#x5DF2;&#x4EA4;&#x6362;&#x4FE1;&#x606F;&#x7684;&#x80FD;&#x529B;&#x3002; &#x5BF9;&#x4E8E;&#x533B;&#x7597;&#x4FDD;&#x5065;&#x800C;&#x8A00;&#xFF0C;&#x4E92;&#x64CD;&#x4F5C;&#x6027;&#x5177;&#x6709;&#x591A;&#x4E2A;&#x6F5C;&#x5728;&#x4F18;&#x52BF;&#xFF1A; 1. &#x901A;&#x8BAF;&#x826F;&#x597D;&#x7684;&#x7CFB;&#x7EDF;&#x53EF;&#x4EE5;&#x63D0;&#x9AD8;&#x8FD0;&#x8425;&#x6548;&#x7387;&#xFF0C;&#x51CF;&#x5C11;&#x8BF8;&#x5982;&#x624B;&#x52A8;&#x8F93;&#x5165;&#x4ECE;&#x4F20;&#x771F;&#x63A5;&#x6536;&#x7684;&#x6570;&#x636E;&#x4E4B;&#x7C7B;&#x7684;&#x884C;&#x653F;&#x4EFB;&#x52A1;&#x6240;&#x82B1;&#x8D39;&#x7684;&#x65F6;&#x95F4;&#xFF1B; 2. &#x51CF;&#x5C11;&#x91CD;&#x590D;&#x7684;&#x4E34;&#x5E8A;&#x5E72;&#x9884;&#xFF0C;&#x4F8B;&#x5982;&#x56FE;&#x50CF;&#x7814;&#x7A76;&#x6216;&#x5B9E;&#x9A8C;&#x5BA4;&#x8BA2;&#x5355;&#xFF1B; 3. &#x964D;&#x4F4E;&#x603B;&#x4F53;&#x536B;&#x751F;&#x7CFB;&#x7EDF;&#x6210;&#x672C;&#xFF0C;&#x51CF;&#x5C11;&#x6D6A;&#x8D39;&#xFF1B; 4. &#x901A;&#x8FC7;&#x51CF;&#x5C11;&#x66B4;&#x9732;&#x4E8E;&#x8F90;&#x5C04;&#x6216;&#x4FB5;&#x5165;&#x6027;&#x7A0B;&#x5E8F;&#x6765;&#x63D0;&#x9AD8;&#x60A3;&#x8005;&#x5B89;&#x5168;&#x6027;&#xFF1B; 5. &#x901A;&#x8FC7;&#x4FC3;&#x8FDB;&#x5728;&#x73B0;&#x573A;&#x5373;&#x65F6;&#x8BBF;&#x95EE;&#x76F8;&#x5173;&#x7684;&#x7EB5;&#x5411;&#x4E34;&#x5E8A;&#x6570;&#x636E;&#x7684;&#x9014;&#x5F84;&#x6765;&#x6539;&#x5584;&#x4E34;&#x5E8A;&#x62A4;&#x7406;&#x3002; &#x4E92;&#x64CD;&#x4F5C;&#x6027;&#x7684;&#x8F6C;&#x53D8; &#x4F20;&#x7EDF;&#x4E92;&#x64CD;&#x4F5C;&#x6027;&#xFF08;&#x673A;&#x6784;&#x9A71;&#x52A8;&#x7684;&#x4E92;&#x64CD;&#x4F5C;&#x6027;&#xFF09; &#x4F20;&#x7EDF;&#x533B;&#x7597;&#x4FDD;&#x5065;&#x4E92;&#x64CD;&#x4F5C;&#x6027;&#x683C;&#x5C40;&#x901A;&#x5E38;&#x4EE5;&#x4E1A;&#x52A1;&#x5B9E;&#x4F53;&#x4E3A;&#x4E2D;&#x5FC3;&#xFF0C;&#x4F8B;&#x5982;&#x533B;&#x9662;&#xFF0C;&#x79C1;&#x4EBA;&#x8BCA;&#x6240;&#x548C;&#x836F;&#x623F;&#xFF0C;&#x5E76;&#x4E14;&#x901A;&#x5E38;&#x5728;&#x521B;&#x5EFA;&#x6570;&#x636E;&#x7684;&#x4FE1;&#x606F;&#x7CFB;&#x7EDF;&#x4E2D;&#x521B;&#x5EFA;&#x548C;&#x9694;&#x79BB;&#x6570;&#x636E;&#xFF08;&#x4F8B;&#x5982;&#xFF1A;&#x533B;&#x9662;&#x7684;&#x7535;&#x5B50;&#x5065;&#x5EB7;&#x8BB0;&#x5F55;&#xFF09;&#x3002;&#x5982;&#x56FE;1A&#x6240;&#x793A;&#xFF1A; &#x56FE;1AB &#x9762;&#x4E34;&#x7684;&#x6311;&#x6218; &#x5355;&#x4E2A;&#x60A3;&#x8005;&#x7684;&#x5065;&#x5EB7;&#x6570;&#x636E;&#x5206;&#x6563;&#x5728;&#x4F17;&#x591A;&#x7CFB;&#x7EDF;&#x4E2D;&#xFF0C;&#x5E76;&#x4E14;&#x6CA1;&#x6709;&#x673A;&#x6784;&#x80FD;&#x591F;&#x63D0;&#x4F9B;&#x5B8C;&#x6574;&#x7684;&#x4FE1;&#x606F;&#xFF1B; &#x5373;&#x4F7F;&#x4E0D;&#x540C;&#x7684;&#x7CFB;&#x7EDF;&#x5177;&#x6709;&#x9AD8;&#x5EA6;&#x7684;&#x4E92;&#x64CD;&#x4F5C;&#x6027;&#xFF0C;&#x60A3;&#x8005;&#x4ECD;&#x7136;&#x4F1A;&#x4E22;&#x5931;&#x6570;&#x636E;&#xFF1B; &#x4E0D;&#x540C;&#x673A;&#x6784;&#x4E4B;&#x95F4;&#x7684;&#x4EA4;&#x6D41;&#x53EF;&#x80FD;&#x4F1A;&#x5728;&#x8FD0;&#x8425;&#x4E0A;&#x5E26;&#x6765;&#x6311;&#x6218;&#xFF0C;&#x5E76;&#x4E14;&#x9700;&#x8981;&#x6240;&#x6D89;&#x5B9E;&#x4F53;&#x4E4B;&#x95F4;&#x8FDB;&#x884C;&#x5927;&#x91CF;&#x5408;&#x4F5C;&#xFF1B; &#x6570;&#x636E;&#x5171;&#x4EAB;&#x534F;&#x8BAE;&#xFF0C;&#x590D;&#x6742;&#x7684;&#x60A3;&#x8005;&#x5339;&#x914D;&#x7B97;&#x6CD5;&#xFF0C;&#x7A0B;&#x5E8F;&#x548C;&#x7BA1;&#x7406;&#x89C4;&#x5219;&#xFF1B; &#x8BB8;&#x591A;&#x6280;&#x672F;&#x969C;&#x788D;&#x3002;&#x4F8B;&#x5982;&#xFF0C;&#x4E8B;&#x52A1;&#x548C;&#x5B9E;&#x4F53;&#x8BA4;&#x8BC1;&#x5FC5;&#x987B;&#x662F;&#x5065;&#x58EE;&#x7684;&#xFF08;&#x5E76;&#x4E14;&#x5BF9;&#x4E8E;&#x6BCF;&#x4E2A;&#x5B9E;&#x4F53;&#x5BF9;&#x5B9E;&#x4F53;&#x7684;&#x5173;&#x7CFB;&#x90FD;&#x5FC5;&#x987B;&#x91CD;&#x590D;&#x8FDB;&#x884C;&#xFF09;&#x3002;&#x8FD8;&#x5E94;&#x8BE5;&#x8FDB;&#x884C;&#x6D3B;&#x52A8;&#x548C;&#x9608;&#x503C;&#x76D1;&#x89C6;&#x4EE5;&#x53CA;&#x4E00;&#x4E9B;&#x5F02;&#x5E38;&#x68C0;&#x6D4B;&#xFF1B; &#x6570;&#x636E;&#x4EA4;&#x6362;&#x7684;&#x5B89;&#x5168;&#x6027;&#x81F3;&#x5173;&#x91CD;&#x8981;&#xFF0C;&#x6570;&#x636E;&#x4EA4;&#x6362;&#x7684;&#x6807;&#x51C6;&#xFF08;&#x4F8B;&#x5982;FHIR&#x6216;CDA&#xFF09;&#x4E5F;&#x5FC5;&#x987B;&#x8FBE;&#x6210;&#x5171;&#x8BC6;&#xFF1B; &#x60A3;&#x8005;&#x80FD;&#x591F;&#x8BBF;&#x95EE;&#x5176;&#x5065;&#x5EB7;&#x6570;&#x636E;&#x7684;&#x9700;&#x6C42;&#xFF1B; &#x8F6C;&#x53D8;&#x8D8B;&#x52BF; &#x4EE5;&#x60A3;&#x8005;&#x4E3A;&#x4E3B;&#x5BFC;&#x7684;&#x4E92;&#x64CD;&#x4F5C;&#x6027;&#x7684;&#x65B9;&#x6CD5;&#xFF0C;&#x5065;&#x5EB7;&#x6570;&#x636E;&#x4EA4;&#x6362;&#x662F;&#x7531;&#x60A3;&#x8005;&#x4ECB;&#x5BFC;&#x5E76;&#x7531;&#x60A3;&#x8005;&#x9A71;&#x52A8;&#x3002; &#x533A;&#x5757;&#x94FE;&#x5982;&#x4F55;&#x4FC3;&#x8FDB;&#x8F6C;&#x53D8; &#x964D;&#x4F4E;&#x9A8C;&#x8BC1;&#x548C;&#x8054;&#x7F51;&#x6210;&#x672C; &#x533A;&#x5757;&#x94FE;&#x6280;&#x672F;&#x53EF;&#x4EE5;&#x5141;&#x8BB8;&#x591A;&#x4E2A;&#x5229;&#x76CA;&#x76F8;&#x5173;&#x8005;&#x5B9A;&#x671F;&#x5C31;&#x5171;&#x4EAB;&#x6570;&#x636E;&#x7684;&#x771F;&#x5B9E;&#x72B6;&#x6001;&#x8FBE;&#x6210;&#x4E00;&#x81F4;&#xFF0C;&#x8FD9;&#x6837;&#x7684;&#x5171;&#x4EAB;&#x6570;&#x636E;&#x53EF;&#x4EE5;&#x4EE3;&#x8868;&#x6709;&#x5173;&#x4E2A;&#x4EBA;&#xFF0C;&#x5B9E;&#x4F53;&#x7684;&#x4FE1;&#x606F;&#x4EA4;&#x6613;&#x7684;&#x51ED;&#x8BC1;&#x548C;&#x5C5E;&#x6027;&#x7B49;&#x3002;&#x6839;&#x636E;&#x6280;&#x672F;&#x7684;&#x8BBE;&#x8BA1;&#x548C;&#x5B9E;&#x65BD;&#x65B9;&#x5F0F;&#xFF0C;&#x5B83;&#x8FD8;&#x53EF;&#x4EE5;&#x5229;&#x7528;&#x6FC0;&#x52B1;&#x624B;&#x6BB5;&#x6765;&#x63A8;&#x52A8;&#x5EFA;&#x8BBE;&#xFF0C;&#x7BA1;&#x7406;&#x66F4;&#x65B0;&#x548C;&#x534F;&#x8C03;&#x8BB0;&#x5F55;&#x3002;&#x800C;&#x201C;&#x667A;&#x80FD;&#x5408;&#x7EA6;&#x201D;&#x662F;&#x4EE5;&#x592A;&#x574A;&#x7B49;&#x5E73;&#x53F0;&#x7684;&#x91CD;&#x8981;&#x7EC4;&#x6210;&#x90E8;&#x5206;&#xFF0C;&#x5B83;&#x53EF;&#x4EE5;&#x4F7F;&#x5404;&#x65B9;&#x4E4B;&#x95F4;&#x7684;&#x534F;&#x8BAE;&#x53EF;&#x4EE5;&#x7531;&#x5B58;&#x50A8;&#x5728;&#x533A;&#x5757;&#x94FE;&#x4E2D;&#x7684;&#x8BA1;&#x7B97;&#x673A;&#x4EE3;&#x7801;&#x6765;&#x63A7;&#x5236;&#x548C;&#x6267;&#x884C;&#x3002; &#x533A;&#x5757;&#x94FE;&#x53EF;&#x4EE5;&#x63D0;&#x4F9B;&#x4E0D;&#x540C;&#x7A0B;&#x5EA6;&#x7684;&#x9690;&#x79C1;&#x548C;&#x8BB0;&#x5F55;&#x533F;&#x540D;&#x6027;&#xFF0C;&#x900F;&#x660E;&#x6027;&#x548C;&#x4E0D;&#x53D8;&#x6027;&#x3002;&#x4F8B;&#x5982;&#xFF0C;&#x867D;&#x7136;&#x201C;&#x6BD4;&#x7279;&#x5E01;&#x201D;&#x662F;&#x516C;&#x5F00;&#x7684;&#xFF0C;&#x4F46;&#x201C;&#x8BB8;&#x53EF;&#x7684;&#x201D;&#x533A;&#x5757;&#x94FE;&#x7F51;&#x7EDC;&#x53EF;&#x80FD;&#x4F1A;&#x901A;&#x8FC7;&#x9650;&#x5236;&#x6210;&#x5458;&#x8D44;&#x683C;&#x548C;&#x8BFB;&#x5199;&#x63A7;&#x5236;&#xFF0C;&#x56F4;&#x7ED5;&#x5171;&#x8BC6;&#x673A;&#x5236;&#x6216;&#x667A;&#x80FD;&#x5408;&#x7EA6;&#x521B;&#x5EFA;&#x800C;&#x5177;&#x6709;&#x66F4;&#x4E25;&#x683C;&#x7684;&#x8BBF;&#x95EE;&#x63A7;&#x5236;&#x3002; &#x5BF9;&#x4E24;&#x4E2A;&#x6210;&#x672C;&#x7684;&#x8003;&#x7A76; &#x7B2C;&#x4E00;&#x6210;&#x672C;&#x662F;&#x6307;&#x533A;&#x5757;&#x94FE;&#x9A8C;&#x8BC1;&#x4EA4;&#x6613;&#x5C5E;&#x6027;&#x7684;&#x80FD;&#x529B;&#xFF08;&#x4F8B;&#x5982;&#xFF0C;&#x4EA4;&#x6613;&#x662F;&#x5426;&#x53D1;&#x751F;&#xFF0C;&#x7275;&#x6D89;&#x5230;&#x8C01;&#xFF0C;&#x7275;&#x6D89;&#x5230;&#x7684;&#x4E2A;&#x4EBA;&#x7684;&#x51ED;&#x8BC1;&#x662F;&#x4EC0;&#x4E48;&#x7B49;&#xFF09;&#xFF0C;&#x5E76;&#x4EE5;&#x6BD4;&#x4F20;&#x7EDF;&#x7CFB;&#x7EDF;&#x66F4;&#x4F4E;&#x7684;&#x6210;&#x672C;&#x786E;&#x4FDD;&#x6570;&#x636E;&#x5B8C;&#x6574;&#x6027;&#x3002; &#x7B2C;&#x4E8C;&#x6210;&#x672C;&#x662F;&#x6307;&#x65E0;&#x9700;&#x4F9D;&#x9760;&#x4F20;&#x7EDF;&#x7684;&#x4E2D;&#x4ECB;&#x673A;&#x6784;&#xFF08;&#x4F8B;&#x5982;&#x91D1;&#x878D;&#x673A;&#x6784;&#xFF0C;&#x6216;&#x8005;&#x5C31;&#x533B;&#x7597;&#x6570;&#x636E;&#x800C;&#x8A00;&#x7684;&#x533B;&#x9662;&#x4FE1;&#x606F;&#x7BA1;&#x7406;&#x529E;&#x516C;&#x5BA4;&#xFF09;&#x5C31;&#x80FD;&#x591F;&#x5F15;&#x5BFC;&#x548C;&#x8FD0;&#x8425;&#x5E02;&#x573A;&#x7684;&#x80FD;&#x529B;&#x3002; &#x4E86;&#x89E3;&#x5982;&#x4F55;&#x901A;&#x8FC7;&#x533A;&#x5757;&#x94FE;&#x6280;&#x672F;&#x53EF;&#x4EE5;&#x589E;&#x5F3A;&#x60A3;&#x8005;&#x9A71;&#x52A8;&#x7684;&#x4E92;&#x64CD;&#x4F5C;&#x6027;&#x65B9;&#x9762;&#xFF0C;&#x8FD9;&#x4E24;&#x79CD;&#x6210;&#x672C;&#x90FD;&#x8D77;&#x7740;&#x5173;&#x952E;&#x4F5C;&#x7528;&#x3002; &#x7ED3;&#x8BBA; &#x964D;&#x4F4E;&#x9A8C;&#x8BC1;&#x548C;&#x8054;&#x7F51;&#x6210;&#x672C;&#x90FD;&#x5F88;&#x91CD;&#x8981;&#xFF0C;&#x56E0;&#x4E3A;&#x5B83;&#x4EEC;&#x53EF;&#x4EE5;&#x63D0;&#x9AD8;&#x4E0D;&#x540C;&#x5B9E;&#x4F53;&#x8FDB;&#x884C;&#x4E92;&#x64CD;&#x4F5C;&#x7684;&#x80FD;&#x529B;&#x4EE5;&#x53CA;&#x4E34;&#x5E8A;&#x6570;&#x636E;&#x4EA4;&#x6362;&#x7684;&#x53EF;&#x80FD;&#x6027;&#x548C;&#x5F71;&#x54CD;&#x3002; &#x7ADE;&#x4E89;&#x80FD;&#x529B;&#x8F83;&#x5F31;&#x7684;&#x5E02;&#x573A;&#x5C06;&#x51CF;&#x5C11;&#x5171;&#x4EAB;&#x6570;&#x636E;&#x7684;&#x5B9E;&#x4F53;&#x7684;&#x6570;&#x91CF;&#xFF0C;&#x4ECE;&#x800C;&#x5BFC;&#x81F4;&#x4E34;&#x5E8A;&#x6570;&#x636E;&#x4EA4;&#x6362;&#x7684;&#x5168;&#x9762;&#x6027;&#x964D;&#x4F4E;&#x3002; &#x540C;&#x6837;&#xFF0C;&#x9AD8;&#x6602;&#x7684;&#x9A8C;&#x8BC1;&#x8D39;&#x7528;&#x53EF;&#x80FD;&#x4F1A;&#x5BFC;&#x81F4;&#x4E0D;&#x826F;&#x7684;&#x4E34;&#x5E8A;&#x4E8B;&#x4EF6;&#xFF0C;&#x4F8B;&#x5982;&#x7531;&#x4E8E;&#x60A3;&#x8005;&#x5339;&#x914D;&#x4E0D;&#x5F53;&#x800C;&#x5BFC;&#x81F4;&#x5B9E;&#x9A8C;&#x5BA4;&#x7ED3;&#x679C;&#x9057;&#x6F0F;&#x3002; &#x533A;&#x5757;&#x94FE;&#x53EF;&#x4EE5;&#x63D0;&#x4F9B;&#x91CD;&#x8981;&#x7684;&#x50AC;&#x5316;&#x5242;&#xFF0C;&#x4EE5;&#x6539;&#x5584;&#x6570;&#x636E;&#x4EA4;&#x6362;&#xFF0C;&#x5C24;&#x5176;&#x662F;&#x60A3;&#x8005;&#x9A71;&#x52A8;&#x7684;&#x4E92;&#x64CD;&#x4F5C;&#x6027;&#x3002; &#x533A;&#x5757;&#x94FE;&#x5728;&#x60A3;&#x8005;&#x9A71;&#x52A8;&#x7684;&#x4E92;&#x64CD;&#x4F5C;&#x6027;&#x4E2D;&#x7684;&#x4F5C;&#x7528; &#x4ECE;&#x9AD8;&#x5C42;&#x6B21;&#x4E0A;&#x8BB2;&#xFF0C;&#x53EF;&#x4EE5;&#x5C06;&#x533A;&#x5757;&#x94FE;&#x6280;&#x672F;&#x89C6;&#x4E3A;&#x6570;&#x5B57;&#x4EA4;&#x6362;&#x7684;&#x5E73;&#x53F0;&#xFF0C;&#x8BE5;&#x5E73;&#x53F0;&#x65E0;&#x9700;&#x4F20;&#x7EDF;&#x7684;&#x4E2D;&#x4ECB;&#x5C31;&#x53EF;&#x4EE5;&#x8FD0;&#x884C;&#x3002; &#x5065;&#x5EB7;&#x6570;&#x636E;&#x53EF;&#x4EE5;&#x5B58;&#x5728;&#x4E8E;&#x591A;&#x4E2A;&#x7CFB;&#x7EDF;&#x4E2D;&#xFF0C;&#x5E76;&#x4E14;&#x5171;&#x4EAB;&#x6570;&#x636E;&#x9700;&#x8981;&#x5B9E;&#x4F53;&#x4E4B;&#x95F4;&#x7684;&#x8BB8;&#x591A;&#x534F;&#x4F5C;&#x70B9;&#x3002; &#x968F;&#x7740;&#x4E92;&#x64CD;&#x4F5C;&#x6027;&#x53D8;&#x5F97;&#x66F4;&#x52A0;&#x4EE5;&#x60A3;&#x8005;&#x4E3A;&#x4E2D;&#x5FC3;&#xFF0C;&#x5C31;&#x6709;&#x673A;&#x4F1A;&#x5229;&#x7528;&#x533A;&#x5757;&#x94FE;&#x6280;&#x672F;&#x6765;&#x4FC3;&#x8FDB;&#x8FD9;&#x79CD;&#x4EA4;&#x6362;&#xFF0C;&#x5E76;&#x8BA9;&#x60A3;&#x8005;&#x5BF9;&#x5176;&#x6570;&#x636E;&#x6709;&#x66F4;&#x5927;&#x7684;&#x63A7;&#x5236;&#x6743;&#x3002; &#x53EF;&#x4EE5;&#x5B9E;&#x73B0;&#x60A3;&#x8005;&#x9A71;&#x52A8;&#x7684;&#x4E92;&#x64CD;&#x4F5C;&#x6027;&#x7684;&#x533A;&#x5757;&#x94FE;&#x7279;&#x6027; &#x533A;&#x5757;&#x94FE;&#x529F;&#x80FD; &#x60A3;&#x8005;&#x9A71;&#x52A8;&#x7684;&#x4E92;&#x64CD;&#x4F5C;&#x6027;&#x4E2D;&#x7684;&#x5E94;&#x7528;&#x793A;&#x4F8B; &#x6570;&#x5B57;&#x8BBF;&#x95EE;&#x89C4;&#x5219; &#x4E34;&#x5E8A;&#x6570;&#x636E;&#xFF08;&#x94FE;&#x4E0B;&#x6216;&#x94FE;&#x4E0A;&#x5B58;&#x50A8;&#xFF09;&#x4E0E;&#x60A3;&#x8005;&#x7684;&#x516C;&#x94A5;&#x94FE;&#x63A5;&#x3002;&#x60A3;&#x8005;&#x53EF;&#x4EE5;&#x4F7F;&#x7528;&#x8BF8;&#x5982;&#x667A;&#x80FD;&#x5408;&#x7EA6;&#x4E4B;&#x7C7B;&#x7684;&#x533A;&#x5757;&#x94FE;&#x5C5E;&#x6027;&#x6765;&#x4E3A;&#x6570;&#x636E;&#x5206;&#x914D;&#x8BBF;&#x95EE;&#x89C4;&#x5219;&#x3002;&#x4F8B;&#x5982;&#xFF0C;&#x6388;&#x6743;&#x5728;&#x56FA;&#x5B9A;&#x7684;&#x65F6;&#x95F4;&#x6BB5;&#x5185;&#x91CA;&#x653E;&#x7ED9;&#x7814;&#x7A76;&#x60A3;&#x8005;&#x6CE8;&#x518C;&#x8868;&#x3002; &#x6570;&#x636E;&#x6C47;&#x6574; &#x60A3;&#x8005;&#x4F7F;&#x7528;&#x7279;&#x5B9A;&#x4E8E;&#x673A;&#x6784;&#x7684;&#x767B;&#x5F55;&#x540D;&#x8FDE;&#x63A5;&#x5230;&#x4E0D;&#x540C;&#x7684;&#x673A;&#x6784;&#x754C;&#x9762;&#xFF0C;&#x5411;&#x8BE5;&#x673A;&#x6784;&#x63D0;&#x4F9B;&#x5176;&#x533A;&#x5757;&#x94FE;&#x516C;&#x94A5;&#x4EE5;&#x53CA;&#x5C06;&#x6570;&#x636E;&#x5B89;&#x5168;&#x4F20;&#x8F93;&#x5230;&#x533A;&#x5757;&#x94FE;&#x7684;&#x6743;&#x9650;&#x3002;&#x56E0;&#x6B64;&#xFF0C;&#x8DE8;&#x591A;&#x4E2A;&#x673A;&#x6784;&#x5B8C;&#x6210;&#x7684;&#x4E34;&#x5E8A;&#x6570;&#x636E;&#x53EF;&#x4EE5;&#x4F7F;&#x7528;&#x8BE5;&#x6280;&#x672F;&#x8FDB;&#x884C;&#x6C47;&#x603B;&#x3002; &#x6570;&#x636E;&#x6D41;&#x52A8;&#x6027; &#x9AD8;&#x5EA6;&#x654F;&#x611F;&#x7684;&#x4E34;&#x5E8A;&#x6570;&#x636E;&#xFF08;&#x4F8B;&#x5982;&#xFF0C;&#x9AD8;&#x7EA7;&#x62A4;&#x7406;&#x8BA1;&#x5212;&#x7684;&#x201C;&#x4EE3;&#x7801;&#x72B6;&#x6001;&#x201D;&#x6216;&#x836F;&#x7269;&#x8FC7;&#x654F;&#xFF09;&#x53EF;&#x4EE5;&#x5728;&#x516C;&#x5171;&#x533A;&#x5757;&#x94FE;&#x4E0A;&#x53D1;&#x5E03;&#xFF0C;&#x4EE5;&#x786E;&#x4FDD;&#x9002;&#x5F53;&#x5730;&#xFF0C;&#x5373;&#x65F6;&#x5730;&#x8BBF;&#x95EE;&#x6B64;&#x4FE1;&#x606F;&#x3002; &#x60A3;&#x8005;&#x8EAB;&#x4EFD; &#x60A3;&#x8005;&#x53EF;&#x4EE5;&#x901A;&#x8FC7;&#x591A;&#x7B7E;&#x540D;&#x94B1;&#x5305;&#x6216;&#x79FB;&#x52A8;&#x8BBE;&#x5907;&#x7BA1;&#x7406;&#x516C;&#x5171;&#x5BC6;&#x94A5;&#xFF0C;&#x5E76;&#x4F7F;&#x7528;&#x516C;&#x5171;&#x5BC6;&#x94A5;&#x57FA;&#x7840;&#x7ED3;&#x6784;&#xFF08;PKI&#xFF09;&#x6765;&#x5EFA;&#x7ACB;&#x81EA;&#x5DF1;&#x7684;&#x8EAB;&#x4EFD;&#xFF0C;&#x4EE5;&#x4ECE;&#x533A;&#x5757;&#x94FE;&#x4E2D;&#x68C0;&#x7D22;&#x4E34;&#x5E8A;&#x6570;&#x636E;&#xFF0C;&#x4EE5;&#x53CA;&#x6DFB;&#x52A0;&#x65B0;&#x4FE1;&#x606F;&#xFF08;&#x4F8B;&#x5982;&#x5BB6;&#x5EAD;&#x76D1;&#x63A7;&#x8BBE;&#x5907;&#xFF09;&#x3002;PKI&#x786E;&#x4FDD;&#x63D0;&#x4F9B;&#x8005;&#x548C;&#x673A;&#x6784;&#x53EF;&#x4EE5;&#x76F8;&#x4FE1;&#x60A3;&#x8005;&#x6B63;&#x5728;&#x751F;&#x6210;&#x6570;&#x636E;&#x3002; &#x6570;&#x636E;&#x4E0D;&#x53D8;&#x6027; &#x4E34;&#x5E8A;&#x6570;&#x636E;&#x5B89;&#x5168;&#x5730;&#x5206;&#x5E03;&#x5728;&#x591A;&#x4E2A;&#x5B9E;&#x4F53;&#x4E2D;&#xFF0C;&#x4ECE;&#x800C;&#x786E;&#x4FDD;&#x5B8C;&#x6574;&#x6027;&#xFF0C;&#x964D;&#x4F4E;&#x4E22;&#x5931;&#x98CE;&#x9669;&#x5E76;&#x63D0;&#x4F9B;&#x5BA1;&#x8BA1;&#x8DDF;&#x8E2A;&#xFF08;&#x4EE5;&#x9632;&#x6076;&#x610F;&#x884C;&#x4E3A;&#x8005;&#xFF09;&#x3002;&#x533A;&#x5757;&#x94FE;&#x7684;Append-only&#x6A21;&#x578B;&#x53EF;&#x786E;&#x4FDD;&#x6240;&#x6709;&#x53EF;&#x8BBF;&#x95EE;&#x4FE1;&#x606F;&#x7684;&#x63D0;&#x4F9B;&#x5546;&#x90FD;&#x5177;&#x6709;&#x5B8C;&#x6574;&#x7684;&#x4E34;&#x5E8A;&#x56FE;&#x666F;&#x3002; &#x533A;&#x5757;&#x94FE;&#x6539;&#x5584;&#x65B9;&#x6CD5; &#x6570;&#x5B57;&#x8BBF;&#x95EE;&#x89C4;&#x5219;&#x7684;&#x7BA1;&#x7406; &#x6388;&#x4E88;&#x4E34;&#x5E8A;&#x6570;&#x636E;&#x53D1;&#x5E03;&#x6743;&#x9650;&#x662F;&#x4E00;&#x9879;&#x5177;&#x6709;&#x6311;&#x6218;&#x6027;&#x7684;&#x529F;&#x80FD;&#xFF0C;&#x901A;&#x5E38;&#x7531;&#x6570;&#x636E;&#x5B64;&#x5C9B;&#x6240;&#x6709;&#x8005;&#x63A7;&#x5236;&#x3002;&#x533A;&#x5757;&#x94FE;&#x4E3A;&#x96C6;&#x4E2D;&#x7BA1;&#x7406;&#x5171;&#x4EAB;&#x6570;&#x636E;&#x7684;&#x8EAB;&#x4EFD;&#x9A8C;&#x8BC1;&#x548C;&#x6388;&#x6743;&#x89C4;&#x5219;&#x63D0;&#x4F9B;&#x4E86;&#x4E00;&#x79CD;&#x96C6;&#x4E2D;&#x548C;&#x5171;&#x4EAB;&#x7684;&#x673A;&#x5236;&#x3002; &#x4F8B;&#x5982;&#xFF0C;&#x4E00;&#x4E2A;&#x533A;&#x5757;&#x94FE;&#x53EF;&#x80FD;&#x5177;&#x6709;&#x201C;&#x667A;&#x80FD;&#x8D22;&#x4EA7;&#x201D;&#xFF08;&#x4E00;&#x4E2A;&#x901A;&#x8FC7;&#x533A;&#x5757;&#x94FE;&#x7BA1;&#x7406;&#x6240;&#x6709;&#x6743;&#x7684;&#x5B9E;&#x4F53;&#xFF09;&#xFF0C;&#x4EE5;&#x5141;&#x8BB8;&#x67D0;&#x79CD;&#x5F62;&#x5F0F;&#x7684;&#x6570;&#x5B57;&#x8D22;&#x4EA7;&#x62E5;&#x6709;&#x660E;&#x786E;&#x7684;&#x6240;&#x6709;&#x6743;&#x3002;&#x6570;&#x636E;&#x7684;&#x4FDD;&#x7BA1;&#x4EBA;&#x6E05;&#x6670;&#x5730;&#x663E;&#x793A;&#x5728;&#x533A;&#x5757;&#x94FE;&#x4E0A;&#xFF0C;&#x5E76;&#x4E14;&#x53EF;&#x4EE5;&#x968F;&#x540E;&#x4E3A;&#x5176;&#x6570;&#x636E;&#x5206;&#x914D;&#x8BBF;&#x95EE;&#x89C4;&#x5219;&#x548C;&#x6743;&#x9650;&#xFF0C;&#x4ECE;&#x800C;&#x4F7F;&#x5171;&#x4EAB;&#x66F4;&#x52A0;&#x5BB9;&#x6613;&#x3002; &#x6570;&#x636E;&#x805A;&#x5408; &#x968F;&#x7740;&#x60A3;&#x8005;&#x9010;&#x6E10;&#x62E5;&#x6709;&#x66F4;&#x591A;&#x7684;&#x5065;&#x5EB7;&#x6570;&#x636E;&#x6240;&#x6709;&#x6743;&#xFF0C;&#x4ED6;&#x4EEC;&#x7684;&#x9996;&#x8981;&#x4EFB;&#x52A1;&#x4E4B;&#x4E00;&#x5C31;&#x662F;&#x5C06;&#x6240;&#x6709;&#x4E34;&#x5E8A;&#x6570;&#x636E;&#x6536;&#x96C6;&#x5728;&#x4E00;&#x8D77;&#xFF0C;&#x4F8B;&#x5982;&#xFF0C;&#x901A;&#x8FC7;&#x5EFA;&#x7ACB;&#x4E0E;&#x6BCF;&#x4E2A;&#x8981;&#x4F7F;&#x7528;&#x6570;&#x636E;&#x7684;&#x7CFB;&#x7EDF;&#x7684;API&#x8FDE;&#x63A5;&#x3002;&#x4E00;&#x65E6;&#x60A3;&#x8005;&#x5EFA;&#x7ACB;&#x4E86;&#x8FD9;&#x4E9B;&#x8054;&#x7CFB;&#xFF0C;&#x4ED6;&#x4EEC;&#x5C31;&#x53EF;&#x4EE5;&#x9002;&#x5F53;&#x5730;&#x6536;&#x96C6;&#x548C;&#x6C47;&#x603B;&#x5176;&#x5065;&#x5EB7;&#x6570;&#x636E;&#x3002;&#x533A;&#x5757;&#x94FE;&#x5E73;&#x53F0;&#x53EF;&#x4EE5;&#x4FC3;&#x8FDB;&#x8FD9;&#x4E00;&#x70B9;-&#x5C24;&#x5176;&#x662F;&#x4E0E;&#x652F;&#x6301;&#x533A;&#x5757;&#x94FE;&#x7684;&#x6570;&#x5B57;&#x8BBF;&#x95EE;&#x89C4;&#x5219;&#x7ED3;&#x5408;&#x4F7F;&#x7528;&#x3002;&#x4F8B;&#x5982;&#xFF0C;&#x4F8B;&#x5982;&#xFF0C;&#x4E34;&#x5E8A;&#x4F1A;&#x8BCA;&#x53EF;&#x4EE5;&#x5B89;&#x5168;&#x5730;&#x5E7F;&#x64AD;&#x5230;&#x7F51;&#x7EDC;&#x5E76;&#x8FDE;&#x63A5;&#x5230;&#x60A3;&#x8005;&#x7684;&#x533F;&#x540D;&#x6570;&#x5B57;&#x8EAB;&#x4EFD;&#x3002;&#x5982;&#x679C;&#x6240;&#x6709;&#x673A;&#x6784;&#x7684;&#x6240;&#x6709;&#x4E34;&#x5E8A;&#x7ECF;&#x9A8C;&#x90FD;&#x9075;&#x5FAA;&#x8FD9;&#x4E00;&#x8303;&#x4F8B;&#xFF0C;&#x5219;&#x60A3;&#x8005;&#x53EA;&#x9700;&#x4E0E;&#x4E00;&#x4E2A;&#x5E73;&#x53F0;&#x8FDB;&#x884C;&#x4EA4;&#x4E92;&#xFF0C;&#x56E0;&#x4E3A;&#x6240;&#x6709;&#x5065;&#x5EB7;&#x6570;&#x636E;&#x90FD;&#x53EF;&#x4EE5;&#x901A;&#x8FC7;&#x76F8;&#x540C;&#x7684;&#x534F;&#x8BAE;&#x548C;&#x6807;&#x51C6;&#x83B7;&#x5F97;&#x3002;&#x6B64;&#x5916;&#xFF0C;&#x60A3;&#x8005;&#x53EF;&#x4EE5;&#x5C06;&#x81EA;&#x5DF1;&#x7684;&#x60A3;&#x8005;&#x751F;&#x6210;&#x7684;&#x5065;&#x5EB7;&#x6570;&#x636E;&#xFF08;PGHD&#xFF09;&#x53D1;&#x5E03;&#x5230;&#x533A;&#x5757;&#x94FE;&#x7F51;&#x7EDC;&#x3002;&#x5982;&#x679C;&#x60A3;&#x8005;&#x6388;&#x6743;&#x4E66;&#x53D1;&#x5E03;&#xFF0C;&#x6B64;&#x7C7B;PGHD&#x53EF;&#x4EE5;&#x63D0;&#x4F9B;&#x6D3B;&#x52A8;&#x76D1;&#x6D4B;&#x6216;&#x5728;&#x6B63;&#x5F0F;&#x533B;&#x7597;&#x4FDD;&#x5065;&#x573A;&#x6240;&#x4E4B;&#x5916;&#x6355;&#x83B7;&#x7684;&#x5176;&#x4ED6;&#x4E2A;&#x4EBA;&#x5065;&#x5EB7;&#x6570;&#x636E;&#x3002; &#x6570;&#x636E;&#x6D41;&#x52A8;&#x6027; -&gt; &#x5FEB;&#x901F;&#x8BBF;&#x95EE;&#x4E34;&#x5E8A;&#x4FE1;&#x606F; &#x533A;&#x5757;&#x94FE;&#x63D0;&#x9AD8;&#x4E86;&#x6570;&#x636E;&#x6D41;&#x52A8;&#x6027;&#x548C;&#x6570;&#x636E;&#x53EF;&#x7528;&#x6027;&#xFF0C;&#x5E76;&#x4F7F;&#x60A3;&#x8005;&#x66F4;&#x5BB9;&#x6613;&#x4E0E;&#x5176;&#x4ED6;&#x5B9E;&#x4F53;&#x5171;&#x4EAB;&#x6570;&#x636E; &#x56F4;&#x7ED5;&#x60A3;&#x8005;&#x8EAB;&#x4EFD; &#x6CA1;&#x6709;&#x7F8E;&#x56FD;&#x56FD;&#x6C11;&#x7684;&#x60A3;&#x8005;&#x8BC6;&#x522B;&#x7801;&#xFF0C;&#x4E34;&#x5E8A;&#x4FE1;&#x606F;&#x7CFB;&#x7EDF;&#x7ECF;&#x5E38;&#x6709;&#x4E00;&#x4E2A;&#x4EBA;&#x7684;&#x591A;&#x4E2A;&#x8BB0;&#x5F55;&#x3002;&#x8FD9;&#x4E9B;&#x8BB0;&#x5F55;&#x7684;&#x5B9E;&#x4F53;&#x89E3;&#x6790;&#x662F;&#x8FD0;&#x8425;&#x548C;&#x7814;&#x7A76;&#x5174;&#x8DA3;&#x7684;&#x6D3B;&#x8DC3;&#x9886;&#x57DF;&#xFF0C;&#x5E76;&#x4E14;&#x5728;&#x89C4;&#x6A21;&#x4E0A;&#x53EF;&#x80FD;&#x5177;&#x6709;&#x5F88;&#x5927;&#x6311;&#x6218;&#x6027;&#x3002; &#x533A;&#x5757;&#x94FE;&#x5BF9;&#x516C;&#x94A5;&#x57FA;&#x7840;&#x8BBE;&#x65BD;&#xFF08;PKI&#xFF09;&#x7684;&#x4F7F;&#x7528;&#x63D0;&#x4F9B;&#x4E86;&#x4E00;&#x79CD;&#x96C6;&#x4E2D;&#x5F0F;&#x8BC6;&#x522B;&#x65B9;&#x6CD5;&#xFF08;&#x4E2A;&#x4EBA;&#x7684;&#x516C;&#x94A5;&#xFF09;&#xFF0C;&#x53EF;&#x7528;&#x4E8E;&#x5728;&#x673A;&#x6784;&#x4E4B;&#x95F4;&#x94FE;&#x63A5;&#x8BE5;&#x60A3;&#x8005;&#x7684;&#x8BB0;&#x5F55;&#x3002;&#x5982;&#x679C;&#x6BCF;&#x4E2A;&#x673A;&#x6784;&#x90FD;&#x77E5;&#x9053;&#x60A3;&#x8005;&#x7684;&#x516C;&#x5171;&#x5BC6;&#x94A5;&#xFF0C;&#x5E76;&#x4E14;&#x8BE5;&#x5BC6;&#x94A5;&#x5DF2;&#x94FE;&#x63A5;&#x5230;&#x5176;&#x81EA;&#x5DF1;&#x7684;&#x5185;&#x90E8;&#x6807;&#x8BC6;&#x7B26;&#xFF08;&#x4F8B;&#x5982;&#xFF0C;&#x60A3;&#x8005;&#x5728;&#x6CE8;&#x518C;&#x65F6;&#x5C06;&#x5176;&#x516C;&#x5171;&#x5BC6;&#x94A5;&#x94FE;&#x63A5;&#x5230;&#x5176;&#x60A3;&#x8005;&#x95E8;&#x6237;&#x5E10;&#x6237;&#xFF09;&#xFF0C;&#x5219;&#x968F;&#x540E;&#x7684;&#x4E34;&#x5E8A;&#x4E8B;&#x4EF6;&#x4F1A;&#x5E7F;&#x64AD;&#x5230;&#x533A;&#x5757;&#x94FE;&#x7F51;&#x7EDC;&#x53EF;&#x4EE5;&#x5C06;&#x8BE5;&#x516C;&#x94A5;&#x4F5C;&#x4E3A;&#x60A3;&#x8005;&#x53C2;&#x8003;&#xFF0C;&#x4EE5;&#x65B9;&#x4FBF;&#x60A3;&#x8005;&#x5339;&#x914D;&#x3002; &#x6570;&#x636E;&#x4E0D;&#x53D8;&#x6027;&#xFF08;&#x7A33;&#x5B9A;&#x6027;&#xFF09; &#x7531;&#x4E8E;&#x533A;&#x5757;&#x94FE;&#x901A;&#x5E38;&#x662F;&#x4E0D;&#x53EF;&#x53D8;&#x7684;&#xFF0C;&#x56E0;&#x6B64;&#x6DFB;&#x52A0;&#x5230;&#x94FE;&#x4E2D;&#x7684;&#x6570;&#x636E;&#x5C06;&#x6301;&#x7EED;&#x5B58;&#x5728;&#x3002;&#x8FD9;&#x964D;&#x4F4E;&#x4E86;&#x4E22;&#x5931;&#x7684;&#x98CE;&#x9669;&#xFF0C;&#x63D0;&#x4F9B;&#x4E86;&#x5BA1;&#x8BA1;&#x8DDF;&#x8E2A;&#xFF08;&#x4F8B;&#x5982;&#xFF0C;&#x5728;&#x6076;&#x610F;&#x884C;&#x4E3A;&#x8005;&#x7684;&#x60C5;&#x51B5;&#x4E0B;&#xFF09;&#xFF0C;&#x5E76;&#x786E;&#x4FDD;&#x6240;&#x6709;&#x65B9;&#x90FD;&#x53EF;&#x4EE5;&#x83B7;&#x5F97;&#x5B8C;&#x6574;&#x7684;&#x6570;&#x5B57;&#x5386;&#x53F2;&#x8BB0;&#x5F55;&#xFF08;&#x63D0;&#x4F9B;&#x9002;&#x5F53;&#x7684;&#x8BBF;&#x95EE;&#x63A7;&#x5236;&#xFF09;&#x3002; &#x56FE;1C&#x63CF;&#x8FF0;&#x4E86;&#x4E00;&#x79CD;&#x65B9;&#x6CD5;&#xFF0C;&#x5176;&#x4E2D;&#x4E24;&#x4E2A;&#x6CA1;&#x6709;&#x6B63;&#x5F0F;&#x4E1A;&#x52A1;&#x5173;&#x7CFB;&#xFF08;&#x4F46;&#x5177;&#x6709;&#x6807;&#x51C6;&#x6570;&#x636E;&#x63A5;&#x53E3;&#xFF09;&#x7684;&#x7EC4;&#x7EC7;&#x53EF;&#x4EE5;&#x5229;&#x7528;&#x533A;&#x5757;&#x94FE;&#x5C42;&#x8FDB;&#x884C;&#x6570;&#x636E;&#x8BBF;&#x95EE;&#x548C;&#x6388;&#x6743;&#x89C4;&#x5219;&#x3002; &#x533A;&#x5757;&#x94FE;&#x652F;&#x6301;&#x7684;&#x57FA;&#x4E8E;&#x60A3;&#x8005;&#x9A71;&#x52A8;&#x7684;&#x4E92;&#x64CD;&#x4F5C;&#x6027;&#x7684;&#x5F20;&#x529B;&#x548C;&#x969C;&#x788D; &#x969C;&#x788D; &#x5927;&#x6279;&#x91CF;&#xFF0C;&#x9AD8;&#x9891;&#x4EA4;&#x6613;&#x662F;&#x4E34;&#x5E8A;&#x6570;&#x636E;&#x7684;&#x6311;&#x6218; &#x5927;&#x6279;&#x91CF;&#xFF0C;&#x9AD8;&#x9891;&#x4EA4;&#x6613;&#x662F;&#x4E34;&#x5E8A;&#x6570;&#x636E;&#x7684;&#x57FA;&#x77F3;&#xFF0C;&#x5E76;&#x4E14;&#x968F;&#x7740;&#x73B0;&#x4EE3;&#x6280;&#x672F;&#x7684;&#x8FDB;&#x6B65;&#xFF0C;&#x4E34;&#x5E8A;&#x6570;&#x636E;&#x7684;&#x89C4;&#x6A21;&#x5448;&#x6307;&#x6570;&#x589E;&#x957F;&#x3002;&#x4F8B;&#x5982;&#xFF0C;&#x5355;&#x4E2A;&#x5FC3;&#x810F;&#x78C1;&#x5171;&#x632F;&#x56FE;&#x50CF;&#x53EF;&#x80FD;&#x9700;&#x8981;200&#x5146;&#x5B57;&#x8282;&#x7684;&#x5B58;&#x50A8;&#x7A7A;&#x95F4;&#x3002;&#x8003;&#x8651;&#x5230;&#x533A;&#x5757;&#x94FE;&#x7684;&#x5206;&#x5E03;&#x5F0F;&#x6027;&#x8D28;&#xFF0C;&#x4F7F;&#x7528;&#x5F53;&#x524D;&#x6280;&#x672F;&#x5C06;&#x6570;&#x636E;&#x5B58;&#x50A8;&#x5728;&#x94FE;&#x4E0A;&#x662F;&#x4E0D;&#x53EF;&#x884C;&#x7684;&#x3002;&#x6B64;&#x5916;&#xFF0C;&#x57FA;&#x4E8E;&#x5DE5;&#x4F5C;&#x91CF;&#x8BC1;&#x660E;&#xFF08;&#x4F8B;&#x5982;&#x6BD4;&#x7279;&#x5E01;&#xFF09;&#xFF0C;&#x9A8C;&#x8BC1;&#x65B0;&#x4EA4;&#x6613;&#x53EF;&#x80FD;&#x9700;&#x8981;&#x82B1;&#x8D39;&#x5927;&#x91CF;&#x65F6;&#x95F4;&#x5728;&#x533A;&#x5757;&#x94FE;&#x4E0A;&#x3002;&#x8FD9;&#x4E9B;&#x9650;&#x5236;&#x6709;&#x5229;&#x4E8E;&#x5C0F;&#x89C4;&#x6A21;&#xFF0C;&#x76F8;&#x5BF9;&#x5C11;&#x89C1;&#x7684;&#x4EA4;&#x6613;&#x3002; &#x6709;&#x5F88;&#x591A;&#x65B9;&#x6CD5;&#x53EF;&#x4EE5;&#x89E3;&#x51B3;&#x8FD9;&#x4E2A;&#x95EE;&#x9898;&#xFF0C;&#x4F8B;&#x5982;&#x6BD4;&#x7279;&#x5E01;&#x7684;&#x95EA;&#x7535;&#x7F51;&#x7EDC;&#xFF0C;&#x57FA;&#x4E8E;&#x5171;&#x8BC6;&#x7684;&#x66FF;&#x4EE3;&#x65B9;&#x6CD5;&#xFF08;&#x4F8B;&#x5982;&#xFF0C;&#x80A1;&#x6743;&#x8BC1;&#x660E;&#xFF09;&#x6216;&#x8BB8;&#x53EF;&#x7684;&#x533A;&#x5757;&#x94FE;&#x7684;&#x533A;&#x5757;&#x94FE;&#xFF0C;&#x4F46;&#x662F;&#x9700;&#x8981;&#x8FDB;&#x4E00;&#x6B65;&#x7684;&#x5DE5;&#x4F5C;&#x6765;&#x4E86;&#x89E3;&#x8FD9;&#x4E9B;&#x89E3;&#x51B3;&#x65B9;&#x6848;&#x662F;&#x5426;&#x53EF;&#x4EE5;&#x907F;&#x514D;&#x89C4;&#x6A21;&#x6269;&#x5F20;&#x6311;&#x6218;&#x3002; &#x6D89;&#x53CA;&#x9690;&#x79C1;&#x548C;&#x5B89;&#x5168;&#x6027;&#x7684;&#x6311;&#x6218; &#x533A;&#x5757;&#x94FE;&#x6280;&#x672F;&#x7684;&#x67D0;&#x4E9B;&#x5B9E;&#x73B0;&#x662F;&#x533F;&#x540D;&#x7684;&#x2014;&#x8EAB;&#x4EFD;&#x901A;&#x5E38;&#x5728;&#x516C;&#x94A5;&#x540E;&#x88AB;&#x63A9;&#x76D6;&#xFF0C;&#x4F46;&#x662F;&#x4EA4;&#x6613;&#x7684;&#x5176;&#x4ED6;&#x5C5E;&#x6027;&#x662F;&#x516C;&#x5F00;&#x5171;&#x4EAB;&#x7684;&#x3002;&#x8FD9;&#x5BF9;&#x4E8E;&#x5065;&#x5EB7;&#x6570;&#x636E;&#x662F;&#x6709;&#x95EE;&#x9898;&#x7684;&#x3002; &#x9996;&#x5148;&#xFF0C;&#x57FA;&#x672C;&#x7684;&#x4EBA;&#x53E3;&#x7EDF;&#x8BA1;&#x4FE1;&#x606F;&#x53EF;&#x4EE5;&#x8BC6;&#x522B;&#x4EBA;&#xFF0C;&#x5E76;&#x4E14;&#x5982;&#x679C;&#x4E00;&#x4E2A;&#x4EBA;&#x7684;&#x516C;&#x94A5;&#x4E0E;&#x4ED6;&#x4EEC;&#x7684;&#x8EAB;&#x4EFD;&#x5339;&#x914D;&#xFF0C;&#x5219;&#x4E0E;&#x8BE5;&#x516C;&#x94A5;&#x76F8;&#x5173;&#x7684;&#x6240;&#x6709;&#x4EA4;&#x6613;&#x90FD;&#x5C06;&#x88AB;&#x94FE;&#x63A5;&#x5230;&#x4E2A;&#x4EBA;&#x3002;&#x7136;&#x800C;&#x5BF9;&#x516C;&#x5171;&#x533A;&#x5757;&#x94FE;&#x9020;&#x6210;&#x707E;&#x96BE;&#x6027;&#x5F71;&#x54CD;&#x7684;&#x540C;&#x65F6;&#xFF0C;&#x79C1;&#x6709;&#x533A;&#x5757;&#x94FE;&#x4E5F;&#x5B58;&#x5728;&#x95EE;&#x9898;&#xFF0C;&#x56E0;&#x4E3A;&#x4E2A;&#x4EBA;&#x53EF;&#x80FD;&#x4E0D;&#x5E0C;&#x671B;&#x79C1;&#x6709;&#x533A;&#x5757;&#x94FE;&#x7684;&#x6240;&#x6709;&#x6210;&#x5458;&#x90FD;&#x53EF;&#x4EE5;&#x8BBF;&#x95EE;&#x540C;&#x4E00;&#x6570;&#x636E;&#xFF0C;&#x6216;&#x8005;&#x4ED6;&#x4EEC;&#x53EF;&#x80FD;&#x5E0C;&#x671B;&#x5728;&#x4E4B;&#x540E;&#x7684;&#x67D0;&#x4E2A;&#x65F6;&#x95F4;&#x70B9;&#x64A4;&#x6D88;&#x5BF9;&#x5176;&#x6570;&#x636E;&#x7684;&#x6388;&#x6743;&#xFF0C;&#x4F46;&#x662F;&#x7528;&#x6237;&#x4E00;&#x65E6;&#x5C06;&#x5176;&#x8EAB;&#x4EFD;&#x94FE;&#x63A5;&#x5230;&#x5176;&#x516C;&#x94A5;&#xFF0C;&#x5219;&#x4E24;&#x8005;&#x5747;&#x65E0;&#x6CD5;&#x5B9E;&#x73B0;&#x3002;&#x4FDD;&#x5065;&#x884C;&#x4E1A;&#x5C06;&#x9700;&#x8981;&#x533A;&#x5757;&#x94FE;&#x7684;&#x5B9E;&#x73B0;&#x5141;&#x8BB8;&#x9009;&#x62E9;&#x6027;&#x5730;&#x516C;&#x5F00;&#x79C1;&#x4EBA;&#x4FE1;&#x606F;&#xFF08;&#x4F8B;&#x5982;Zcash&#xFF09;&#xFF0C;&#x5E76;&#x4F9D;&#x9760;&#x96F6;&#x77E5;&#x8BC6;&#x5BC6;&#x7801;&#x5B66;&#x6765;&#x63D0;&#x4F9B;&#x5BF9;&#x5E95;&#x5C42;&#x6570;&#x636E;&#x5177;&#x6709;&#x9AD8;&#x5EA6;&#x9690;&#x79C1;&#x6027;&#x7684;&#x4EA4;&#x6613;&#x9A8C;&#x8BC1;&#x3002; &#x60A3;&#x8005;&#x53C2;&#x4E0E;&#x7684;&#x6311;&#x6218; &#x4EE5;&#x60A3;&#x8005;&#x4E3A;&#x4E3B;&#x5BFC;&#x7684;&#x4E92;&#x64CD;&#x4F5C;&#x6027;&#x6846;&#x67B6;&#x4E0E;&#x673A;&#x6784;&#x9A71;&#x52A8;&#x7684;&#x67B6;&#x6784;&#x76F8;&#x6BD4;&#xFF0C;&#x5FC5;&#x7136;&#x9700;&#x8981;&#x66F4;&#x591A;&#x7684;&#x60A3;&#x8005;&#x53C2;&#x4E0E;&#x3002; &#x5982;&#x679C;&#x60A3;&#x8005;&#x8981;&#x6210;&#x4E3A;&#x81EA;&#x4E3B;&#x7684;&#x6570;&#x5B57;&#x7BA1;&#x7406;&#x5458;&#xFF0C;&#x4ED6;&#x4EEC;&#x5C06;&#x9700;&#x8981;&#x67D0;&#x79CD;&#x65B9;&#x5F0F;&#x6765;&#x7BA1;&#x7406;&#x5176;&#x6570;&#x5B57;&#x8D44;&#x4EA7;&#xFF08;&#x4F8B;&#x5982;&#x94A5;&#x5319;&#x6216;&#x5BC6;&#x7801;&#xFF09;&#x3002; &#x9700;&#x8981;&#x8003;&#x8651;&#x7528;&#x4E8E;&#x7BA1;&#x7406;&#x4E22;&#x5931;&#x7684;&#x6570;&#x5B57;&#x8D44;&#x4EA7;&#x7684;&#x673A;&#x5236;&#xFF08;&#x4F8B;&#x5982;&#x5FD8;&#x8BB0;&#x5BC6;&#x7801;&#xFF0C;&#x4E22;&#x5931;&#x5BC6;&#x94A5;&#x7B49;&#xFF09;&#x3002; &#x8FD9;&#x53EF;&#x80FD;&#x9700;&#x8981;&#x989D;&#x5916;&#x7684;&#x4E2D;&#x4ECB;&#xFF0C;&#x800C;&#x4E14;&#x5C1A;&#x4E0D;&#x6E05;&#x695A;&#x8C01;&#x5C06;&#x626E;&#x6F14;&#x8FD9;&#x4E2A;&#x89D2;&#x8272;&#x2014;&#x4E5F;&#x8BB8;&#x662F;&#x4E00;&#x4E2A;&#x65B0;&#x7684;&#x5546;&#x4E1A;&#x5E02;&#x573A;&#x7684;&#x673A;&#x4F1A;&#xFF0C;&#x7C7B;&#x4F3C;&#x4E8E;&#x52A0;&#x5BC6;&#x8D27;&#x5E01;&#x4EA4;&#x6613;&#x6240;&#x3002; &#x6FC0;&#x52B1;&#x63AA;&#x65BD;&#x7684;&#x6311;&#x6218; &#x5C3D;&#x7BA1;&#x6CD5;&#x5F8B;&#x73B0;&#x5728;&#x8981;&#x6C42;EHR&#x5FC5;&#x987B;&#x5177;&#x6709;&#x9762;&#x5411;&#x60A3;&#x8005;&#x7684;API&#xFF0C;&#x4F46;&#x5E76;&#x975E;&#x6240;&#x6709;&#x533B;&#x7597;&#x6570;&#x636E;&#x90FD;&#x4E00;&#x6837;&#xFF0C;&#x5E76;&#x4E14;&#x6FC0;&#x52B1;&#x673A;&#x6784;&#x5728;&#x6CA1;&#x6709;&#x7ECF;&#x6D4E;&#x52A8;&#x673A;&#x7684;&#x60C5;&#x51B5;&#x4E0B;&#x5EFA;&#x7ACB;&#x9762;&#x5411;&#x60A3;&#x8005;&#x7684;&#x6570;&#x636E;&#x8FDE;&#x63A5;&#x5C06;&#x5177;&#x6709;&#x6311;&#x6218;&#x6027;&#x2013;&#x5408;&#x89C4;&#x6027;&#x4E0E;&#x771F;&#x5B9E;&#x6027;&#x4E4B;&#x95F4;&#x7684;&#x533A;&#x522B;&#x3002; &#x4F8B;&#x5982;&#xFF0C;&#x867D;&#x7136;&#x836F;&#x7269;&#x6E05;&#x5355;&#x53EF;&#x80FD;&#x662F;&#x533B;&#x9662;&#x9762;&#x5411;&#x60A3;&#x8005;&#x7684;EHR API&#x7684;&#x5FC5;&#x586B;&#x6570;&#x636E;&#x8F93;&#x51FA;&#xFF0C;&#x4F46;&#x5C1A;&#x4E0D;&#x6E05;&#x695A;&#x5236;&#x836F;&#x6536;&#x76CA;&#x7BA1;&#x7406;&#x8005;&#x662F;&#x5426;&#x9700;&#x8981;&#x5728;&#x6CA1;&#x6709;&#x660E;&#x786E;&#x4E1A;&#x52A1;&#x4EF7;&#x503C;&#x7684;&#x60C5;&#x51B5;&#x4E0B;&#x6784;&#x9020;&#x548C;&#x516C;&#x5F00;&#x6240;&#x6709;&#x836F;&#x7269;&#x6279;&#x51C6;&#x6216;&#x4EA4;&#x6613;&#x3002;&#x56F4;&#x7ED5;&#x6570;&#x636E;&#x5171;&#x4EAB;&#x7684;&#x8FDB;&#x4E00;&#x6B65;&#x6FC0;&#x52B1;&#x63AA;&#x65BD;&#x5C06;&#x8FDB;&#x4E00;&#x6B65;&#x52A0;&#x5F3A;API&#x7ECF;&#x6D4E;&#x6027;&#xFF0C;&#x5E76;&#x5BFC;&#x81F4;&#x66F4;&#x591A;&#x7684;&#x60A3;&#x8005;&#x6570;&#x636E;&#x81EA;&#x4E3B;&#x6743;&#x3002; &#x8868;2&#x63CF;&#x8FF0;&#x4E86;&#x8FD9;&#x4E9B;&#x6311;&#x6218;&#x4EE5;&#x53CA;&#x6F5C;&#x5728;&#x7684;&#x7F13;&#x89E3;&#x63AA;&#x65BD;&#xFF1A; &#x6311;&#x6218; &#x7F13;&#x89E3;&#x63AA;&#x65BD; &#x4E34;&#x5E8A;&#x6570;&#x636E;&#x4EA4;&#x6613;&#x91CF; 1. &#x5C06;&#x6570;&#x636E;&#x4EA4;&#x6362;&#x96C6;&#x4E2D;&#x5728;&#x6C47;&#x603B;&#x7684;&#x4E34;&#x5E8A;&#x6570;&#x636E;&#x4E0A;&#xFF1B;2. &#x672C;&#x5730;&#x5730;&#x7406;&#x533A;&#x57DF;&#x7684;&#x8BB8;&#x53EF;&#x533A;&#x5757;&#x94FE;&#x53EF;&#x5904;&#x7406;&#x5927;&#x91CF;&#x4EA4;&#x6613;&#x800C;&#x65E0;&#x9700;&#x65F6;&#x95F4;&#x5BC6;&#x96C6;&#x9A8C;&#x8BC1;&#xFF1B;3. &#x533A;&#x5757;&#x94FE;&#x6269;&#x5C55;&#x65B9;&#x6CD5;&#x5B66;&#x7684;&#x65B0;&#x6280;&#x672F;&#x548C;&#x7814;&#x7A76; &#x9690;&#x79C1;&#x4E0E;&#x5B89;&#x5168; 1.&#x6388;&#x6743;&#x7684;&#x4EC5;&#x9650;&#x4F1A;&#x5458;&#x7684;&#x533A;&#x5757;&#x94FE;&#x5708;&#xFF0C;&#x4EE5;&#x6700;&#x5927;&#x7A0B;&#x5EA6;&#x5730;&#x51CF;&#x5C11;&#x516C;&#x4F17;&#x66DD;&#x5149;&#xFF1B;2. &#x94FE;&#x4E0B;&#x6570;&#x636E;&#x5B58;&#x50A8;&#xFF0C;&#x94FE;&#x4E0A;&#x4FA7;&#x91CD;&#x4E8E;&#x6743;&#x9650;&#x6216;&#x5176;&#x4ED6;&#x5143;&#x6570;&#x636E; &#x60A3;&#x8005;&#x53C2;&#x4E0E; &#x4E2D;&#x4ECB;&#x4EBA;&#x201C;APP&#x201D;&#x751F;&#x6001;&#x7CFB;&#x7EDF;&#xFF0C;&#x7528;&#x4E8E;&#x7BA1;&#x7406;&#x516C;&#x5171;&#x5BC6;&#x94A5;&#x548C;&#x6743;&#x9650; &#x6FC0;&#x52B1;&#x63AA;&#x65BD; 1. &#x8054;&#x90A6;&#x653F;&#x5E9C;&#x7EE7;&#x7EED;&#x9F13;&#x52B1;&#x6269;&#x5927;API&#x8986;&#x76D6;&#x8303;&#x56F4;&#xFF1B;2. &#x5F00;&#x653E;&#x6570;&#x636E;&#x4E0E;&#x62A5;&#x9500;&#x4EF7;&#x503C;&#x7684;&#x5173;&#x8054;&#xFF1B;3.&#x652F;&#x6301;API&#x7684;&#x7CFB;&#x7EDF;&#x7684;&#x7ADE;&#x4E89;&#x538B;&#x529B;&#xFF0C;&#x9F13;&#x52B1;&#x4E0D;&#x652F;&#x6301;API&#x7684;&#x7CFB;&#x7EDF;&#x6295;&#x8D44;API&#x57FA;&#x7840;&#x8BBE;&#x65BD; &#x603B;&#x7ED3; &#x8FD9;&#x7BC7;&#x6587;&#x7AE0;&#x597D;&#x50CF;&#x53EA;&#x662F;&#x63D0;&#x51FA;&#x4E86;&#x6982;&#x5FF5;&#xFF0C;&#x4F46;&#x662F;&#x5E76;&#x6CA1;&#x6709;&#x5BF9;&#x5177;&#x4F53;&#x65B9;&#x6848;&#x5B9E;&#x65BD;&#x8FDB;&#x884C;&#x89E3;&#x8BF4;&#x3002;","categories":[{"name":"Technology","slug":"Technology","permalink":"https://littlemeemoon.cn/categories/Technology/"},{"name":"Paper Smash","slug":"Technology/Paper-Smash","permalink":"https://littlemeemoon.cn/categories/Technology/Paper-Smash/"}],"tags":[{"name":"Paper","slug":"Paper","permalink":"https://littlemeemoon.cn/tags/Paper/"},{"name":"Patient-Driven Interoperability","slug":"Patient-Driven-Interoperability","permalink":"https://littlemeemoon.cn/tags/Patient-Driven-Interoperability/"},{"name":"Blockchain","slug":"Blockchain","permalink":"https://littlemeemoon.cn/tags/Blockchain/"}],"keywords":[{"name":"Technology","slug":"Technology","permalink":"https://littlemeemoon.cn/categories/Technology/"},{"name":"Paper Smash","slug":"Technology/Paper-Smash","permalink":"https://littlemeemoon.cn/categories/Technology/Paper-Smash/"}]},{"title":"Leetcode Note in Apri 2020 | part 3 | day 15-21 | (一)","slug":"Technology/Coding/Leetcode/Leetcode-Note-in-Apri-2020-part-3-day-15-21-(一)","date":"2020-04-15T12:33:23.000Z","updated":"2020-06-04T04:19:01.758Z","comments":true,"path":"2020/04/15/Technology/Coding/Leetcode/Leetcode-Note-in-Apri-2020-part-3-day-15-21-(一)/","link":"","permalink":"https://littlemeemoon.cn/2020/04/15/Technology/Coding/Leetcode/Leetcode-Note-in-Apri-2020-part-3-day-15-21-(%E4%B8%80)/","excerpt":"","text":"&#x5199;&#x5728;&#x524D;&#x9762;&#x7684;&#x8BDD; &#x7B2C;&#x4E09;&#x6B21;&#x66F4;&#x65B0;&#xFF0C;&#x8FD9;&#x6B21;&#x66F4;&#x65B0;&#x53EF;&#x80FD;&#x4F1A;&#x628A;&#x4E00;&#x5468;&#x7684;&#x5185;&#x5BB9;&#x5206;&#x4E3A;&#x4E24;&#x7BC7;&#x6587;&#x7AE0;&#xFF0C;&#x56E0;&#x4E3A;&#x653E;&#x4E00;&#x7BC7;&#x6587;&#x7AE0;&#x7684;&#x8BDD;&#x5185;&#x5BB9;&#x6709;&#x70B9;&#x592A;&#x957F;&#x4E86;&#x3002;&#x65B0;&#x7684;&#x6311;&#x6218;&#xFF01;&#x7EE7;&#x7EED;&#x524D;&#x8FDB;~ Product of Array Except Self Given an array nums of n integers where n &gt; 1, return an array output such that output[i] is equal to the product of all the elements of nums except nums[i]. Example: Input: [1,2,3,4] Output: [24,12,8,6] Constraint: It&apos;s guaranteed that the product of the elements of any prefix or suffix of the array (including the whole array) fits in a 32 bit integer. Note: Please solve it without division and in O(n). Follow up: Could you solve it with constant space complexity? (The output array does not count as extra space for the purpose of space complexity analysis.) Solution &#x5177;&#x4F53;&#x601D;&#x8DEF;&#x5728;&#x4EE3;&#x7801;&#x6CE8;&#x91CA;&#x4E2D;&#x5DF2;&#x7ECF;&#x8BF4;&#x7684;&#x5F88;&#x6E05;&#x695A;&#x4E86;&#xFF0C;&#x6211;&#x8FD9;&#x91CC;&#x7B80;&#x5355;&#x6982;&#x62EC;&#x4E00;&#x4E0B;&#xFF1A; &#x8FD9;&#x4E2A;&#x9898;&#x6709;&#x4E2A;&#x9650;&#x5236;&#xFF1A;&#x4E0D;&#x80FD;&#x4F7F;&#x7528;&#x9664;&#x6CD5;&#xFF0C;&#x8FD9;&#x4E2A;&#x9650;&#x5236;&#x8BA9;&#x8FD9;&#x9053;&#x9898;&#x53D8;&#x5F97;&#x6709;&#x70B9;&#x96BE;&#x5EA6;&#x3002;&#x672C;&#x6765;&#x6211;&#x4EEC;&#x53EF;&#x4EE5;&#x628A;&#x6570;&#x7EC4;&#x91CC;&#x9762;&#x6240;&#x6709;&#x5143;&#x7D20;&#x76F8;&#x4E58;&#xFF0C;&#x7136;&#x540E;&#x901A;&#x8FC7;&#x9664;&#x4EE5;&#x76F8;&#x5E94;index&#x7684;&#x6570;&#x5C31;&#x53EF;&#x4EE5;&#x5F97;&#x5230;&#x6BCF;&#x4E2A;&#x6570;&#x5BF9;&#x5E94;&#x7684;&#x9664;&#x81EA;&#x5DF1;&#x4EE5;&#x5916;&#x7684;&#x6570;&#x7684;&#x79EF;&#x3002; &#x6709;&#x4E86;&#x9650;&#x5236;&#x6761;&#x4EF6;&#x4E4B;&#x540E;&#xFF0C;&#x6211;&#x60F3;&#x4E86;&#x5F88;&#x4E45;&#x4E5F;&#x6CA1;&#x6709;&#x60F3;&#x5230;&#x5F88;&#x597D;&#x7684;&#x65B9;&#x6CD5;&#xFF0C;&#x4E4B;&#x540E;&#x770B;&#x5230;&#x5176;&#x4ED6;&#x5C0F;&#x4F19;&#x4F34;&#x7684;&#x89E3;&#x9898;&#x601D;&#x8DEF;&#xFF0C;&#x5C31;&#x7A81;&#x7136;&#x6765;&#x4E86;&#x7075;&#x611F;&#x3002;&#x6211;&#x4EEC;&#x53EF;&#x4EE5;&#x5C06;&#x6570;&#x7EC4;&#x6839;&#x636E;&#x5F53;&#x524D;&#x5143;&#x7D20;&#x5206;&#x4E3A;&#x4E24;&#x90E8;&#x5206;&#xFF08;&#x5DE6;&#x8FB9;&#x548C;&#x53F3;&#x8FB9;&#xFF09;&#x3002;&#x7136;&#x540E;&#x5206;&#x522B;&#x8BA1;&#x7B97;&#x5143;&#x7D20;&#x4E24;&#x8FB9;&#x7684;&#x6240;&#x6709;&#x5143;&#x7D20;&#x7684;&#x79EF;&#xFF0C;&#x518D;&#x5C06;&#x4E24;&#x8FB9;&#x6240;&#x5F97;&#x7684;&#x79EF;&#x76F8;&#x4E58;&#xFF0C;&#x5C31;&#x5F97;&#x5230;&#x4E86;&#x5F53;&#x524D;&#x5143;&#x7D20;&#x5E94;&#x8BE5;&#x5BF9;&#x5E94;&#x7684;&#x79EF;&#x3002;&#x5177;&#x4F53;&#x770B;&#x4EE3;&#x7801;&#x5B9E;&#x73B0;&#x548C;&#x6CE8;&#x91CA;&#x3002; class Solution: def productExceptSelf(self, nums: List[int]) -&gt; List[int]: # The length of the input array n_len = len(nums) # The product array to be returned product = [0] * n_len # product[i] contains the product of all the elements to the left # Note: for the element at index &apos;0&apos;, there are no elements to the left, # so the product[0] would be 1 product[0] = 1 for i in range(1, n_len): # product[i - 1] already contains the product of elements to the left of &apos;i - 1&apos; # Simply multiplying it with nums[i - 1] would give the product of all # elements to the left of index &apos;i&apos; product[i] = nums[i - 1] * product[i - 1] # R contains the product of all the elements to the right # Note: for the element at index &apos;length - 1&apos;, there are no elements to the right, # so the R would be 1 R = 1; for i in reversed(range(n_len)): # For the index &apos;i&apos;, R would contain the # product of all elements to the right. We update R accordingly product[i] = product[i] * R R *= nums[i] return product Valid Parenthesis String Given a string containing only three types of characters: &apos;(&apos;, &apos;)&apos; and &apos;&apos;, write a function to check whether this string is valid. We define the validity of a string by these rules: 1. Any left parenthesis &apos;(&apos; must have a corresponding right parenthesis &apos;)&apos;. 2. Any right parenthesis &apos;)&apos; must have a corresponding left parenthesis &apos;(&apos;. 3. Left parenthesis &apos;(&apos; must go before the corresponding right parenthesis &apos;)&apos;. 4. &apos;&apos; could be treated as a single right parenthesis &apos;)&apos; or a single left parenthesis &apos;(&apos; or an empty string. 5. An empty string is also valid. Example 1: Input: &quot;()&quot; Output: True Example 2: Input: &quot;()&quot; Output: True Example 3: Input: &quot;())&quot; Output: True Solution &#x8FD9;&#x4E2A;&#x9898;&#x7684;&#x601D;&#x8DEF;&#x4E5F;&#x662F;&#x6BD4;&#x8F83;&#x5E38;&#x89C4;&#xFF0C;&#x53EF;&#x4EE5;&#x901A;&#x8FC7;&#x5224;&#x65AD;&#x5F00;&#x62EC;&#x53F7;&#x7684;&#x4E2A;&#x6570;&#x6765;&#x5224;&#x65AD;&#x5F53;&#x524D;&#x5B57;&#x7B26;&#x4E32;&#x662F;&#x5426;&#x6709;&#x6548;&#xFF08;=0&#xFF1A;&#x6709;&#x6548;&#xFF0C;&#x5176;&#x4ED6;&#x65E0;&#x6548;&#xFF09;&#x3002;&#x4F46;&#x662F;&#x7531;&#x4E8E;*&#x53EF;&#x4EE5;&#x4EE3;&#x66FF;&#x5DE6;&#x62EC;&#x53F7;(&#xFF0C;&#x4E5F;&#x53EF;&#x4EE5;&#x4EE3;&#x66FF;&#x53F3;&#x62EC;&#x53F7;)&#xFF0C;&#x6240;&#x4EE5;&#x9488;&#x5BF9;&#x8FD9;&#x9053;&#x9898;&#xFF0C;&#x6211;&#x4EEC;&#x4E0D;&#x80FD;&#x7B80;&#x5355;&#x7684;&#x7528;&#x4E00;&#x4E2A;&#x53D8;&#x91CF;&#x6765;&#x8BA1;&#x7B97;&#x5F00;&#x62EC;&#x53F7;&#x7684;&#x4E2A;&#x6570;&#x3002;&#x4F46;&#x601D;&#x8DEF;&#x662F;&#x4E00;&#x81F4;&#x7684;&#xFF0C;&#x6211;&#x4EEC;&#x53EF;&#x4EE5;&#x901A;&#x8FC7;&#x5FC5;&#x987B;&#x8981;&#x5FC5;&#x914D;&#x7684;&#x5F00;&#x62EC;&#x53F7;&#x4E2A;&#x6570;&#xFF08;&#x6700;&#x5C0F;&#x5F00;&#x62EC;&#x53F7;&#x4E2A;&#x6570;&#xFF09;&#x548C;&#x6700;&#x5927;&#x9700;&#x8981;&#x5339;&#x914D;&#x7684;&#x5F00;&#x62EC;&#x53F7;&#x4E2A;&#x6570;&#x6765;&#x5224;&#x65AD;&#x5B57;&#x7B26;&#x4E32;&#x662F;&#x5426;&#x6709;&#x6548;&#xFF0C;&#x6545;&#x6211;&#x4EEC;&#x9700;&#x8981;&#x4E24;&#x4E2A;&#x53D8;&#x91CF;&#xFF1A;nrp_min(&#x8BB0;&#x5F55;&#x9700;&#x8981;&#x88AB;&#x5339;&#x914D;&#x7684;&#x6700;&#x5C0F;&#x5F00;&#x62EC;&#x53F7;&#x4E2A;&#x6570;)&#xFF0C;nrp_max&#xFF08;&#x8BB0;&#x5F55;&#x6700;&#x5927;&#x9700;&#x8981;&#x88AB;&#x5339;&#x914D;&#x7684;&#x5F00;&#x62EC;&#x53F7;&#x4E2A;&#x6570;&#xFF09;&#x3002;&#x5177;&#x4F53;&#x5B9E;&#x73B0;&#x8BF4;&#x660E;&#x89C1;&#x4EE3;&#x7801;&#x53CA;&#x6CE8;&#x91CA;&#x3002; class Solution: def checkValidString(self, s: str) -&gt; bool: # nrp_min: counts the minimum open parenthesis # nrp_max: counts the maximum open parenthesis, nrp_min = nrp_max = 0 for i in s: # when we meet a &apos;(&apos;, we need a &apos;)&apos; to match if i == &apos;(&apos;: nrp_max += 1 nrp_min += 1 # when we meet a &apos;)&apos;, we can match a &apos;(&apos; if i == &apos;)&apos;: nrp_max -= 1 nrp_min = max(nrp_min - 1, 0) # when we meet &apos;*&apos;, we can match a &apos;(&apos; and also may need a &apos;)&apos; to match # so the max number of &apos;)&apos; we need should +1, and the min number of &apos;)&apos; # we need should -1 if i == &apos;*&apos;: nrp_max += 1 nrp_min = max(nrp_min - 1, 0) # if at the end of the loop, the max number of &apos;)&apos; we need is &lt; 0, it means the # number of &apos;(&apos; is bigger than the number of &apos;)&apos;,this string is invalid. if nrp_max &lt; 0: return False # if the min number of &apos;)&apos; we need is 0, it means all of the &apos;(&apos; have one &apos;)&apos; be paired return nrp_min == 0 &#x603B;&#x7ED3; &#x8FD9;&#x5468;&#x7684;&#x9898;&#x6BD4;&#x4E4B;&#x524D;&#x7684;&#x8981;&#x96BE;&#x4E00;&#x70B9;&#xFF0C;&#x4ECA;&#x5929;&#x505A;&#x4E86;&#x4E00;&#x9053;&#x9898;&#x8BA9;&#x6211;&#x61F5;&#x5708;&#x4E86;&#xFF0C;&#x56E0;&#x4E3A;&#x6211;&#x5DF2;&#x7ECF;&#x628A;&#x4E4B;&#x524D;&#x5B66;&#x7684;&#x5173;&#x4E8E;&#x56FE;&#x7684;&#x76F8;&#x5173;&#x7B97;&#x6CD5;&#x5FD8;&#x5B8C;&#x4E86;&#xFF0C;&#x5176;&#x5B9E;&#x4E5F;&#x4E0D;&#x7B97;&#x662F;&#x5FD8;&#x4E86;&#x76F8;&#x5173;&#x7B97;&#x6CD5;&#xFF0C;&#x800C;&#x662F;&#x4E0D;&#x80FD;&#x5C06;&#x5B66;&#x8FC7;&#x7684;&#x7B97;&#x6CD5;&#x548C;&#x5B9E;&#x9645;&#x95EE;&#x9898;&#x8054;&#x7CFB;&#x8D77;&#x6765;&#xFF0C;&#x4E0B;&#x4E00;&#x7BC7;&#x6587;&#x7AE0;&#x6211;&#x4F1A;&#x8BE6;&#x7EC6;&#x5199;&#x4E00;&#x7BC7;&#x5173;&#x4E8E;&#x8FD9;&#x9053;&#x9898;&#x7684;&#x89E3;&#x6CD5;&#xFF0C;&#x4E5F;&#x7B97;&#x662F;&#x5DE9;&#x56FA;&#x548C;&#x5E94;&#x7528;&#x4EE5;&#x524D;&#x5B66;&#x8FC7;&#x7684;&#x77E5;&#x8BC6;&#x5427;&#xFF01;&#x518D;&#x63A5;&#x518D;&#x5389;&#xFF01;","categories":[{"name":"Technology","slug":"Technology","permalink":"https://littlemeemoon.cn/categories/Technology/"},{"name":"Coding","slug":"Technology/Coding","permalink":"https://littlemeemoon.cn/categories/Technology/Coding/"},{"name":"Leetcode","slug":"Technology/Coding/Leetcode","permalink":"https://littlemeemoon.cn/categories/Technology/Coding/Leetcode/"}],"tags":[{"name":"Leetcode","slug":"Leetcode","permalink":"https://littlemeemoon.cn/tags/Leetcode/"},{"name":"Python","slug":"Python","permalink":"https://littlemeemoon.cn/tags/Python/"},{"name":"Algorithm","slug":"Algorithm","permalink":"https://littlemeemoon.cn/tags/Algorithm/"}],"keywords":[{"name":"Technology","slug":"Technology","permalink":"https://littlemeemoon.cn/categories/Technology/"},{"name":"Coding","slug":"Technology/Coding","permalink":"https://littlemeemoon.cn/categories/Technology/Coding/"},{"name":"Leetcode","slug":"Technology/Coding/Leetcode","permalink":"https://littlemeemoon.cn/categories/Technology/Coding/Leetcode/"}]},{"title":"僵尸企业分类 | 模型训练 | LightGBM","slug":"Technology/Machine-Learning/僵尸企业分类-模型训练-LightGBM","date":"2020-04-11T11:25:37.000Z","updated":"2020-06-04T04:21:24.110Z","comments":true,"path":"2020/04/11/Technology/Machine-Learning/僵尸企业分类-模型训练-LightGBM/","link":"","permalink":"https://littlemeemoon.cn/2020/04/11/Technology/Machine-Learning/%E5%83%B5%E5%B0%B8%E4%BC%81%E4%B8%9A%E5%88%86%E7%B1%BB-%E6%A8%A1%E5%9E%8B%E8%AE%AD%E7%BB%83-LightGBM/","excerpt":"","text":"&#x5199;&#x5230;&#x524D;&#x9762;&#x7684;&#x8BDD; &#x5728;&#x4E0A;&#x4E00;&#x7BC7;&#x6587;&#x7AE0;&#x4E2D;&#xFF0C;&#x6211;&#x5BF9;&#x50F5;&#x5C38;&#x4F01;&#x4E1A;&#x5206;&#x7C7B;&#x95EE;&#x9898;&#x7684;&#x6570;&#x636E;&#x9884;&#x5904;&#x7406;&#x505A;&#x4E86;&#x4ECB;&#x7ECD;&#xFF0C;&#x8FD9;&#x7BC7;&#x6587;&#x7AE0;&#x4E3B;&#x8981;&#x4ECB;&#x7ECD;&#x6A21;&#x578B;&#x8BAD;&#x7EC3;&#x90E8;&#x5206;&#xFF0C;&#x91C7;&#x7528;&#x7684;&#x7B97;&#x6CD5;&#x6846;&#x67B6;&#x662F;LightGBM(Light Gradient Boosting Machine)&#xFF0C;&#x662F;&#x4E00;&#x4E2A;&#x5B9E;&#x73B0; GBDT &#x7B97;&#x6CD5;&#x7684;&#x6846;&#x67B6;&#x3002;&#x800C;GBDT(Gradient Boosting Decision Tree)&#x7684;&#x4E3B;&#x8981;&#x601D;&#x60F3;&#x662F;&#x5229;&#x7528;&#x5F31;&#x5206;&#x7C7B;&#x5668;&#xFF08;&#x51B3;&#x7B56;&#x6811;&#xFF09;&#x8FED;&#x4EE3;&#x8BAD;&#x7EC3;&#x4EE5;&#x5F97;&#x5230;&#x6700;&#x4F18;&#x6A21;&#x578B;&#xFF0C;&#x8BE5;&#x6A21;&#x578B;&#x5177;&#x6709;&#x8BAD;&#x7EC3;&#x6548;&#x679C;&#x597D;&#x3001;&#x4E0D;&#x6613;&#x8FC7;&#x62DF;&#x5408;&#x7B49;&#x4F18;&#x70B9;&#x3002; LightGBM&#x6709;&#x5404;&#x79CD;&#x5F88;&#x597D;&#x7684;&#x7279;&#x6027;&#xFF0C;&#x7C7B;&#x6BD4;&#x5F88;&#x591A;boosting tools&#x4F18;&#x5316;&#x901F;&#x5EA6;&#x548C;&#x5185;&#x5B58;&#x7684;&#x4F7F;&#x7528;&#x4E0A;&#x91C7;&#x7528;&#x57FA;&#x4E8E;&#x9884;&#x6392;&#x5E8F;&#x7684;&#x7B97;&#x6CD5;&#x8FDB;&#x884C;&#x51B3;&#x7B56;&#x6811;&#x5B66;&#x4E60;&#xFF0C;LightGBM&#x4F7F;&#x7528;&#x57FA;&#x4E8E;&#x76F4;&#x65B9;&#x56FE;&#x7684;&#x7B97;&#x6CD5;&#xFF0C;&#x652F;&#x6301;&#x9AD8;&#x6548;&#x7387;&#x7684;&#x5E76;&#x884C;&#x8BAD;&#x7EC3;&#xFF0C;&#x5E76;&#x4E14;&#x5177;&#x6709;&#x4EE5;&#x4E0B;&#x4F18;&#x70B9;&#xFF1A; 1. &#x66F4;&#x5FEB;&#x7684;&#x8BAD;&#x7EC3;&#x901F;&#x5EA6; 2. &#x66F4;&#x4F4E;&#x7684;&#x5185;&#x5B58;&#x6D88;&#x8017; 3. &#x66F4;&#x597D;&#x7684;&#x51C6;&#x786E;&#x7387; 4. &#x5206;&#x5E03;&#x5F0F;&#x652F;&#x6301;&#xFF0C;&#x53EF;&#x4EE5;&#x5FEB;&#x901F;&#x5904;&#x7406;&#x6D77;&#x91CF;&#x6570;&#x636E; &#x5177;&#x4F53;&#x7B97;&#x6CD5;&#x539F;&#x7406;&#x6211;&#x4E5F;&#x6CA1;&#x641E;&#x592A;&#x660E;&#x767D;&#xFF0C;&#x54C8;&#x54C8;&#x3002;&#x6211;&#x51C6;&#x5907;&#x540E;&#x9762;&#x597D;&#x597D;&#x5B66;&#x4E60;&#x4E00;&#x756A;&#xFF0C;&#x7136;&#x540E;&#x518D;&#x5199;&#x4E00;&#x7BC7;&#x5173;&#x4E8E;LightGBM&#x7684;&#x6587;&#x7AE0;&#xFF0C;&#x4E3B;&#x8981;&#x662F;&#x8BB0;&#x5F55;&#x81EA;&#x5DF1;&#x7684;&#x5B66;&#x4E60;&#x8FC7;&#x7A0B;&#xFF0C;&#x5199;&#x4E00;&#x4E9B;&#x81EA;&#x5DF1;&#x7684;&#x7406;&#x89E3;&#x3002;&#x8FD9;&#x91CC;&#x5927;&#x5BB6;&#x5982;&#x679C;&#x611F;&#x5174;&#x8DA3;&#x53EF;&#x4EE5;&#x53BB;&#x770B;&#x770B;&#x5B98;&#x65B9;&#x6587;&#x6863;. &#x6A21;&#x578B;&#x8BAD;&#x7EC3; &#x5B9A;&#x4E49;&#x6A21;&#x578B;&#x8BAD;&#x7EC3;&#x51FD;&#x6570; import lightgbm as lgb from sklearn import metrics def train_model(X_train, y_train, X_valid, y_valid, test=None, feature_cols=None, is_base=True): if feature_cols is None: feature_cols = X_train.columns.drop([&quot;&#x884C;&#x4E1A;&quot;, &quot;&#x533A;&#x57DF;&quot;, &quot;&#x4F01;&#x4E1A;&#x7C7B;&#x578B;&quot;, &quot;&#x63A7;&#x5236;&#x4EBA;&#x7C7B;&#x578B;&quot;]) dtrain = lgb.Dataset(X_train[feature_cols], label=y_train) dvalid = lgb.Dataset(X_valid[feature_cols], label=y_valid) param = {&apos;num_leaves&apos;: 64, &apos;objective&apos;: &apos;binary&apos;, &apos;metric&apos;: &apos;auc&apos;, &apos;seed&apos;: 7} num_round = 1000 print(&quot;Training model!&quot;) bst = lgb.train(param, dtrain, num_round, valid_sets=[dvalid], early_stopping_rounds=20, verbose_eval=False) # &#x9884;&#x6D4B;&#x7ED3;&#x679C;&#x662F;&#x6982;&#x7387;&#x503C;&#xFF0C;&#x5C06;&#x5176;&#x8F6C;&#x6362;&#x4E3A;binary value valid_pred = bst.predict(X_valid[feature_cols]) valid_pred = valid_pred &gt; 0.5 valid_pred = valid_pred.astype(int) valid_score = metrics.roc_auc_score(y_valid, valid_pred) print(&quot;precision recall fscore support:&quot;) print(metrics.precision_recall_fscore_support(y_valid, valid_pred, average=&apos;micro&apos;)) print(f&quot;Validation AUC score: {valid_score}&quot;) if test is not None: test_pred = bst.predict(test[feature_cols]) test_pred = test_pred &gt; 0.5 test_pred = test_pred.astype(int) test_pred = test[[&apos;ID&apos;]].join(pd.DataFrame({&apos;flag&apos;: test_pred})) if is_base: test_pred.to_csv(&apos;test_base.txt&apos;, sep=&apos;,&apos;, index=False) else: test_pred.to_csv(&apos;test_.txt&apos;, sep=&apos;,&apos;, index=False) return bst, valid_score else: return bst, valid_score &#x52A0;&#x8F7D;&#x5904;&#x7406;&#x597D;&#x7684;&#x6570;&#x636E;&#x96C6; import pandas as pd # load training data all_data = pd.read_csv(&quot;data/train/train.csv&quot;) # load testing data test = pd.read_csv(&quot;data/test/test.csv&quot;) test_base = pd.read_csv(&quot;data/test/base-test.csv&quot;) &#x5C06;&#x8BAD;&#x7EC3;&#x6570;&#x636E;&#x96C6;&#x62C6;&#x5206;&#x4E3A;&#x8BAD;&#x7EC3;&#x96C6;&#x4E0E;&#x9A8C;&#x8BC1;&#x96C6; from sklearn.preprocessing import OneHotEncoder, LabelEncoder from sklearn.model_selection import train_test_split import category_encoders as ce from sklearn.utils import shuffle all_data_X = all_data[all_data.columns.drop([&quot;flag&quot;])] all_data_y = all_data[&quot;flag&quot;] # shuffle data&#xFF08;optional&#xFF09; all_data_X, all_data_y = shuffle(all_data_X, all_data_y) # test = shuffle(test) train_X, valid_X, train_y, valid_y = train_test_split(all_data_X, all_data_y, random_state=66) &#x7C7B;&#x578B;&#x53D8;&#x91CF;&#x5904;&#x7406; &#x901A;&#x5E38;&#xFF0C;&#x672C;&#x8D28;&#x4E0A;&#x662F;&#x5206;&#x7C7B;&#x7684;&#x4EFB;&#x4F55;&#x6570;&#x636E;&#x5C5E;&#x6027;&#x90FD;&#x662F;&#x79BB;&#x6563;&#x503C;&#xFF0C;&#x8FD9;&#x4E9B;&#x79BB;&#x6563;&#x503C;&#x5C5E;&#x4E8E;&#x7C7B;&#x522B;&#x6216;&#x7C7B;&#x7684;&#x7279;&#x5B9A;&#x6709;&#x9650;&#x96C6;&#x5408;&#x3002;&#x5728;&#x5C5E;&#x6027;&#x6216;&#x7531;&#x6A21;&#x578B;&#x9884;&#x6D4B;&#x7684;&#x53D8;&#x91CF;&#x7684;&#x4E0A;&#x4E0B;&#x6587;&#x4E2D;&#xFF0C;&#x901A;&#x5E38;&#x4E5F;&#x79F0;&#x4E3A;&#x7C7B;&#x6216;&#x6807;&#x7B7E;&#x3002; &#x8FD9;&#x4E9B;&#x79BB;&#x6563;&#x503C;&#x672C;&#x8D28;&#x4E0A;&#x53EF;&#x4EE5;&#x662F;&#x6587;&#x672C;&#x6216;&#x6570;&#x5B57;&#x3002;&#x8FD9;&#x6B21;base data&#x91CC;&#x9762;&#x7684;&#x884C;&#x4E1A;&#xFF0C;&#x533A;&#x57DF;&#xFF0C;&#x4F01;&#x4E1A;&#x7C7B;&#x578B;&#xFF0C;&#x63A7;&#x5236;&#x4EBA;&#x7C7B;&#x578B;&#x7B49;&#x5C31;&#x662F;&#x5C5E;&#x4E8E;&#x8FD9;&#x4E00;&#x7C7B;&#x5C5E;&#x6027;&#xFF0C;&#x6211;&#x521A;&#x5F00;&#x59CB;&#x7684;&#x60F3;&#x6CD5;&#x662F;&#x628A;&#x8FD9;&#x7C7B;&#x5C5E;&#x6027;&#x503C;&#x505A;&#x4E00;&#x4E2A;encoding&#xFF0C;&#x5177;&#x4F53;&#x4EC0;&#x4E48;&#x7C7B;&#x578B;&#x7684;encoding&#x53EF;&#x4EE5;&#x6839;&#x636E;&#x5C5E;&#x6027;&#x5BF9;&#x6A21;&#x578B;&#x7684;&#x5F71;&#x54CD;&#x7A0B;&#x5EA6;&#x548C;&#x6A21;&#x578B;&#x8BAD;&#x7EC3;&#x6548;&#x679C;&#x6765;&#x786E;&#x5B9A;&#x3002;&#x8FD9;&#x91CC;&#x53EA;&#x7ED9;&#x51FA;&#x4E86;count encoding&#x7684;&#x4F8B;&#x5B50;&#xFF0C;&#x5982;&#x679C;&#x540E;&#x9762;&#x6709;&#x65F6;&#x95F4;&#x6211;&#x4F1A;&#x4E13;&#x95E8;&#x5199;&#x4E00;&#x7BC7;&#x5904;&#x7406;&#x8FD9;&#x7C7B;&#x5C5E;&#x6027;&#x7684;&#x5E38;&#x7528;&#x65B9;&#x6CD5;&#xFF0C;&#x505A;&#x4E00;&#x4E2A;&#x8BE6;&#x7EC6;&#x7684;&#x603B;&#x7ED3;&#xFF0C;&#x8FD9;&#x91CC;&#x5C31;&#x4E0D;&#x5C55;&#x5F00;&#x4E86;&#x3002; Count Encoding for categorical variables cat_features = [&quot;&#x884C;&#x4E1A;&quot;, &quot;&#x533A;&#x57DF;&quot;, &quot;&#x4F01;&#x4E1A;&#x7C7B;&#x578B;&quot;, &quot;&#x63A7;&#x5236;&#x4EBA;&#x7C7B;&#x578B;&quot;] count_enc = ce.CountEncoder(cols=cat_features) # Learn encoding from the training set count_enc.fit(train_X[cat_features]) train_encoded_X = train_X.join(count_enc.transform(train_X[cat_features]) .add_suffix(&quot;_count&quot;)) valid_encoded_X = valid_X.join(count_enc.transform(valid_X[cat_features]) .add_suffix(&quot;_count&quot;)) test_encoded = test.join(count_enc.transform(test[cat_features]) .add_suffix(&quot;_count&quot;)) &#x6A21;&#x578B;&#x8BAD;&#x7EC3; &#x539F;&#x59CB;&#x6570;&#x636E; &#x4E3A;&#x4E86;&#x770B;&#x5206;&#x7C7B;&#x6570;&#x636E;&#x5904;&#x7406;&#x5BF9;&#x6A21;&#x578B;&#x6027;&#x80FD;&#x7684;&#x5F71;&#x54CD;&#xFF0C;&#x4E0B;&#x9762;&#x7684;&#x8BAD;&#x7EC3;&#x6CA1;&#x6709;&#x7528;&#x7F16;&#x7801;&#x540E;&#x7684;&#x7C7B;&#x522B;&#x6570;&#x636E;&#xFF0C;&#x8BAD;&#x7EC3;&#x7684;&#x65F6;&#x5019;&#x4F1A;&#x628A;&#x7C7B;&#x522B;&#x5C5E;&#x6027;&#x5217;&#x5220;&#x6389;&#x3002; print(&quot;Baseline model&quot;) _ = train_model(train_X, train_y, valid_X, valid_y, test, is_base=True) Baseline model Training model! precision recall fscore support: (1.0, 1.0, 1.0, None) Validation AUC score: 1.0 &#x7ED3;&#x679C;&#x8D85;&#x51FA;&#x610F;&#x6599;&#xFF0C;&#x5C31;&#x662F;&#x6700;&#x7C97;&#x7CD9;&#x7684;&#x6570;&#x636E;&#xFF0C;&#x6CA1;&#x6709;&#x505A;&#x4EFB;&#x4F55;&#x7279;&#x5F81;&#x9009;&#x62E9;&#x548C;&#x4F18;&#x5316;&#xFF0C;&#x5C31;&#x53EF;&#x4EE5;&#x5F97;&#x5230;&#x8FD9;&#x4E48;&#x641E;&#x5F97;&#x7CBE;&#x5EA6;&#xFF0C;&#x8BF4;&#x5B9E;&#x8BDD;&#x6211;&#x5F53;&#x65F6;&#x662F;&#x6000;&#x7591;&#x81EA;&#x5DF1;&#x7684;&#xFF0C;&#x53CD;&#x590D;&#x786E;&#x8BA4;&#x4E86;&#x597D;&#x51E0;&#x904D;&#x4EE3;&#x7801;&#xFF0C;&#x53D1;&#x73B0;&#x6CA1;&#x5565;&#x95EE;&#x9898;&#x3002;&#x1F923;&#x518D;&#x6B21;&#x8BC1;&#x660E;&#x6570;&#x636E;&#x9884;&#x5904;&#x7406;&#x7684;&#x91CD;&#x8981;&#x6027;&#xFF0C;&#x6570;&#x636E;&#x5904;&#x7406;&#x597D;&#x4E86;&#xFF0C;&#x6700;&#x7B80;&#x5355;&#x7684;&#x6A21;&#x578B;&#x4E5F;&#x53EF;&#x4EE5;&#x8FBE;&#x5230;&#x5F88;&#x597D;&#x7684;&#x6548;&#x679C;&#x3002; Count Encoding&#x7C7B;&#x522B;&#x5C5E;&#x6027;&#x540E;&#x7684;&#x6570;&#x636E; print(&quot;Count Encoding model&quot;) _ = train_model(train_encoded_X, train_y, valid_encoded_X, valid_y, test_encoded, is_base=False) Count Encoding model Training model! precision recall fscore support: (1.0, 1.0, 1.0, None) Validation AUC score: 1.0 &#x4E24;&#x6B21;&#x7684;&#x8BAD;&#x7EC3;&#x7ED3;&#x679C;&#x6CA1;&#x6709;&#x4EFB;&#x4F55;&#x5DEE;&#x522B;&#xFF0C;&#x4E5F;&#x5931;&#x53BB;&#x4E86;&#x7279;&#x5F81;&#x4F18;&#x5316;&#x7684;&#x52A8;&#x529B;&#x1F603;","categories":[{"name":"Technology","slug":"Technology","permalink":"https://littlemeemoon.cn/categories/Technology/"},{"name":"Machine Learning","slug":"Technology/Machine-Learning","permalink":"https://littlemeemoon.cn/categories/Technology/Machine-Learning/"},{"name":"Modeling","slug":"Technology/Machine-Learning/Modeling","permalink":"https://littlemeemoon.cn/categories/Technology/Machine-Learning/Modeling/"}],"tags":[{"name":"LightGBM","slug":"LightGBM","permalink":"https://littlemeemoon.cn/tags/LightGBM/"},{"name":"Count Encoding","slug":"Count-Encoding","permalink":"https://littlemeemoon.cn/tags/Count-Encoding/"}],"keywords":[{"name":"Technology","slug":"Technology","permalink":"https://littlemeemoon.cn/categories/Technology/"},{"name":"Machine Learning","slug":"Technology/Machine-Learning","permalink":"https://littlemeemoon.cn/categories/Technology/Machine-Learning/"},{"name":"Modeling","slug":"Technology/Machine-Learning/Modeling","permalink":"https://littlemeemoon.cn/categories/Technology/Machine-Learning/Modeling/"}]},{"title":"僵尸企业分类 | 数据预处理","slug":"Technology/Machine-Learning/僵尸企业分类-数据预处理","date":"2020-04-10T12:02:34.000Z","updated":"2020-06-04T04:21:24.111Z","comments":true,"path":"2020/04/10/Technology/Machine-Learning/僵尸企业分类-数据预处理/","link":"","permalink":"https://littlemeemoon.cn/2020/04/10/Technology/Machine-Learning/%E5%83%B5%E5%B0%B8%E4%BC%81%E4%B8%9A%E5%88%86%E7%B1%BB-%E6%95%B0%E6%8D%AE%E9%A2%84%E5%A4%84%E7%90%86/","excerpt":"","text":"&#x95EE;&#x9898;&#x63CF;&#x8FF0; &#x50F5;&#x5C38;&#x4F01;&#x4E1A;&#x662F;&#x6307;&#x7F3A;&#x4E4F;&#x76C8;&#x5229;&#x80FD;&#x529B;&#x5374;&#x80FD;&#x591F;&#x4EE5;&#x4F4E;&#x4E8E;&#x5E02;&#x573A;&#x6700;&#x4F18;&#x5229;&#x7387;&#x6210;&#x672C;&#x83B7;&#x5F97;&#x4FE1;&#x8D37;&#x8D44;&#x6E90;&#xFF0C;&#x4F9D;&#x9760;&#x5916;&#x754C;&#x8F93;&#x8840;&#x800C;&#x7F3A;&#x4E4F;&#x81EA;&#x751F;&#x80FD;&#x529B;&#x7684;&#x4F01;&#x4E1A;&#x3002;&#x50F5;&#x5C38;&#x4F01;&#x4E1A;&#x7684;&#x5B58;&#x5728;&#x7834;&#x574F;&#x4E86;&#x5E02;&#x573A;&#x673A;&#x5236;&#xFF0C;&#x52A0;&#x5267;&#x4E86;&#x4FE1;&#x8D37;&#x8D44;&#x6E90;&#x7684;&#x9519;&#x914D;&#xFF0C;&#x5E26;&#x6765;&#x4E86;&#x4E25;&#x91CD;&#x7684;&#x4EA7;&#x80FD;&#x8FC7;&#x5269;&#x95EE;&#x9898;&#xFF0C;&#x8FD8;&#x5BF9;&#x5176;&#x4ED6;&#x975E;&#x50F5;&#x5C38;&#x4F01;&#x4E1A;&#x4EA7;&#x751F;&#x4E86;&#x6295;&#x8D44;&#x6324;&#x51FA;&#x6548;&#x5E94;&#x3002; &#x56E0;&#x6B64;&#x9700;&#x8981;&#x5BF9;&#x6B63;&#x5E38;&#x4F01;&#x4E1A;&#x548C;&#x50F5;&#x5C38;&#x4F01;&#x4E1A;&#x8FDB;&#x884C;&#x5206;&#x7C7B;&#xFF0C;&#x73B0;&#x7ED9;&#x51FA;&#x4E00;&#x6279;&#x6709;&#x6807;&#x7B7E;&#x7684;&#x4F01;&#x4E1A;&#x6570;&#x636E;&#x4F5C;&#x4E3A;&#x8BAD;&#x7EC3;&#x96C6;&#xFF0C;&#x6807;&#x7B7E;&#x4E3A;0&#x8868;&#x793A;&#x6B63;&#x5E38;&#x4F01;&#x4E1A;&#xFF0C;&#x6807;&#x7B7E;&#x4E3A;1&#x8868;&#x793A;&#x50F5;&#x5C38;&#x4F01;&#x4E1A;&#xFF1B;&#x540C;&#x65F6;&#x7ED9;&#x51FA;&#x65E0;&#x6807;&#x7B7E;&#x6570;&#x636E;&#x4F5C;&#x4E3A;&#x6D4B;&#x8BD5;&#x96C6;&#xFF0C;&#x8BF7;&#x5BF9;&#x65E0;&#x6807;&#x7B7E;&#x6570;&#x636E;&#x8FDB;&#x884C;&#x5206;&#x7C7B;&#x3002; &#x6570;&#x636E;&#x96C6;&#x8BF4;&#x660E; &#x6570;&#x636E;&#x96C6;&#x5305;&#x62EC;&#x8BAD;&#x7EC3;&#x96C6;&#x548C;&#x6D4B;&#x8BD5;&#x96C6;&#x4E24;&#x90E8;&#x5206;&#xFF0C;&#x6BCF;&#x4E2A;&#x90E8;&#x5206;&#x53C8;&#x5305;&#x62EC;: 1. &#x4F01;&#x4E1A;&#x57FA;&#x672C;&#x6570;&#x636E;: &#x5305;&#x542B;&#x4F01;&#x4E1A;&#x7684;&#x4E00;&#x4E9B;&#x57FA;&#x672C;&#x5C5E;&#x6027;&#x4EE5;&#x53CA;&#x4F01;&#x4E1A;&#x7684;&#x6807;&#x7B7E;&#xFF08;&#x5373;flag--0&#xFF1A;&#x6B63;&#x5E38;&#x4F01;&#x4E1A;&#xFF0C;1&#xFF1A;&#x50F5;&#x5C38;&#x4F01;&#x4E1A;&#xFF09;; 2. &#x4F01;&#x4E1A;&#x77E5;&#x8BC6;&#x4EA7;&#x6743;&#x6570;&#x636E;: &#x5305;&#x542B;&#x4F01;&#x4E1A;&#x7684;&#x77E5;&#x8BC6;&#x4EA7;&#x6743;&#x76F8;&#x5173;&#x4FE1;&#x606F;&#xFF0C;&#x6839;&#x636E;id&#x53EF;&#x4E0E;&#x57FA;&#x672C;&#x6570;&#x636E;&#x4E00;&#x4E00;&#x5BF9;&#x5E94;; 3. &#x4F01;&#x4E1A;&#x91D1;&#x878D;&#x6570;&#x636E;: &#x5305;&#x542B;&#x4F01;&#x4E1A;2015~2017&#x4E09;&#x5E74;&#x7684;&#x91D1;&#x878D;&#x76F8;&#x5173;&#x4FE1;&#x606F;&#xFF0C;&#x6839;&#x636E;id&#x53EF;&#x4E0E;&#x57FA;&#x672C;&#x6570;&#x636E;&#x76F8;&#x5BF9;&#x5E94;; 4. &#x4F01;&#x4E1A;&#x5E74;&#x62A5;&#x6570;&#x636E;: &#x5305;&#x542B;&#x4F01;&#x4E1A;2015~2017&#x4E09;&#x5E74;&#x7684;&#x5E74;&#x62A5;&#x6570;&#x636E;&#xFF0C;&#x6839;&#x636E;id&#x53EF;&#x4E0E;&#x57FA;&#x672C;&#x6570;&#x636E;&#x76F8;&#x5BF9;&#x5E94;&#x3002; &#x6570;&#x636E;&#x9884;&#x5904;&#x7406; &#x5DE5;&#x5177;&#x51FD;&#x6570;&#x5B9A;&#x4E49; combined_base_knowledge_data &#x51FD;&#x6570;&#x8BF4;&#x660E; &#x8BE5;&#x51FD;&#x6570;&#x7528;&#x4E8E;&#x6839;&#x636E;ID&#x5408;&#x5E76;base data&#x548C;knowledge data&#x6570;&#x636E;&#x96C6;&#x3002; &#x51FD;&#x6570;&#x5B9E;&#x73B0; def combined_base_knowledge_data(base_data, knowledge_data): combined_base_knowledge_data = base_data .set_index(&apos;ID&apos;) .join(knowledge_data .set_index(&apos;ID&apos;)) combined_base_knowledge_data = combined_base_knowledge_data .fillna(combined_base_knowledge_data .median()) return combined_base_knowledge_data fill_na &#x51FD;&#x6570;&#x8BF4;&#x660E; &#x8BE5;&#x51FD;&#x6570;&#x7528;&#x4E8E;&#x586B;&#x5145;&#x6570;&#x636E;&#x96C6;&#x4E2D;&#x7F3A;&#x5931;&#x7684;&#x6570;&#x636E;&#xFF1A; 1. &#x5E74;&#x4EFD;&#x6570;&#x636E;&#xFF1A;&#x6839;&#x636E;ID&#x548C;&#x5E74;&#x4EFD;&#x67E5;&#x627E;&#x51FA;&#x5BF9;&#x5E94;ID&#x7F3A;&#x5931;&#x7684;&#x5E74;&#x4EFD;&#xFF0C;&#x7136;&#x540E;&#x8865;&#x5168;&#x7F3A;&#x5931;&#x7684;&#x5E74;&#x4EFD;&#xFF1B; 2. &#x5176;&#x4ED6;&#x7F3A;&#x5931;&#x6570;&#x636E;&#x7EDF;&#x4E00;&#x7528;&#x4E2D;&#x4F4D;&#x6570;&#x8865;&#x9F50;&#x3002; &#x51FD;&#x6570;&#x5B9E;&#x73B0; # fill null year def fill(oragin_data, years = [2015, 2016, 2017]): # pick null year data null_years = oragin_data.loc[oragin_data.year.isna()] # fill year for year in years: IDs = oragin_data[[&quot;ID&quot;]].loc[oragin_data.year == year] for null_year_id in null_years[&quot;ID&quot;].unique(): tmp = IDs.loc[IDs.ID == null_year_id] if tmp.empty: index = oragin_data.loc[( oragin_data.ID == null_year_id) &amp; (oragin_data.year.isna() )].index.tolist() if len(index) != 0: oragin_data.loc[index[0]:index[0], &quot;year&quot;] = year # fill other missing value with median value new_data = oragin_data.fillna(oragin_data.median()) return new_data; combined_new_year_money_data &#x51FD;&#x6570;&#x8BF4;&#x660E; &#x8BE5;&#x65B9;&#x6CD5;&#x7528;&#x4E8E;&#x6839;&#x636E;ID&#x548C;year&#x5408;&#x5E76;year data&#x548C;money data&#x3002; &#x51FD;&#x6570;&#x5B9E;&#x73B0; def combined_new_year_money_data(new_year_data, new_money_data): return pd.merge(new_year_data, new_money_data, on=[&apos;ID&apos;, &apos;year&apos;]) split_data &#x51FD;&#x6570;&#x8BF4;&#x660E; &#x8BE5;&#x51FD;&#x6570;&#x7528;&#x4E8E;&#x6839;&#x636E;ID&#x548C;year&#x62C6;&#x5206;&#x65B0;&#x7279;&#x5F81;&#xFF0C;&#x5C06;&#x539F;&#x6570;&#x636E;&#x96C6;&#x4E09;&#x5E74;&#x7684;&#x6570;&#x636E;&#x6309;&#x5E74;&#x4EFD;&#x62C6;&#x5206;&#x6210;&#x65B0;&#x7684;&#x7279;&#x5F81;&#xFF0C;&#x4F7F;&#x62C6;&#x5206;&#x540E;&#x7684;&#x6570;&#x636E;&#x96C6;&#x53EF;&#x4E0E;base data&#x6570;&#x636E;&#x96C6;&#x7528;ID&#x4E00;&#x4E00;&#x5BF9;&#x5E94;&#x3002;&#x4E3B;&#x8981;&#x7528;&#x4E8E;year data&#x6570;&#x636E;&#x96C6;&#x548C;money data&#x6570;&#x636E;&#x96C6;&#x7684;&#x62C6;&#x5206;&#x3002; &#x51FD;&#x6570;&#x5B9E;&#x73B0; def split_data(combined_new_year_money_data): # split data with year combined_new_year_data_2015 = combined_new_year_money_data.loc[ combined_new_year_money_data.year == 2015] .set_index(&apos;ID&apos;) .add_suffix(&quot;_2015&quot;).drop(columns=[&apos;year_2015&apos;]) combined_new_year_data_2016 = combined_new_year_money_data.loc[ combined_new_year_money_data.year == 2016] .set_index(&apos;ID&apos;) .add_suffix(&quot;_2016&quot;).drop(columns=[&apos;year_2016&apos;]) combined_new_year_data_2017 = combined_new_year_money_data.loc[ combined_new_year_money_data.year == 2017] .set_index(&apos;ID&apos;) .add_suffix(&quot;_2017&quot;).drop(columns=[&apos;year_2017&apos;]) # marge data with ID combined_new_splited_year_money_data = pd.merge( combined_new_year_data_2015, combined_new_year_data_2016, on=[&apos;ID&apos;]) combined_new_splited_year_money_data = pd.merge( combined_new_splited_year_money_data, combined_new_year_data_2017, on=[&apos;ID&apos;]) return combined_new_splited_year_money_data &#x8BAD;&#x7EC3;&#x6570;&#x636E;&#x96C6;&#x5904;&#x7406; &#x52A0;&#x8F7D;&#x539F;&#x59CB;&#x6570;&#x636E; import pandas as pd # load training data base_train_data = pd.read_csv(&quot;data/train/base-train.csv&quot;) year_train_data = pd.read_csv(&quot;data/train/year-train.csv&quot;) knowledge_train_data = pd.read_csv(&quot;data/train/knowledge-train.csv&quot;) money_train_data = pd.read_csv(&quot;data/train/money-train.csv&quot;) &#x67E5;&#x770B;&#x539F;&#x59CB;&#x6570;&#x636E;&#x96C6;&#x4FE1;&#x606F;&#xFF1A;base data and knowledge data base_train_data base_train_data.head() .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } ID &#x6CE8;&#x518C;&#x65F6;&#x95F4; &#x6CE8;&#x518C;&#x8D44;&#x672C; &#x884C;&#x4E1A; &#x533A;&#x57DF; &#x4F01;&#x4E1A;&#x7C7B;&#x578B; &#x63A7;&#x5236;&#x4EBA;&#x7C7B;&#x578B; &#x63A7;&#x5236;&#x4EBA;&#x6301;&#x80A1;&#x6BD4;&#x4F8B; flag 0 5986361 2014.0 7090.0 &#x670D;&#x52A1;&#x4E1A; &#x6E56;&#x5317; &#x6709;&#x9650;&#x8D23;&#x4EFB;&#x516C;&#x53F8; &#x81EA;&#x7136;&#x4EBA; 0.93 0 1 5991749 2007.0 5940.0 &#x96F6;&#x552E;&#x4E1A; &#x6E56;&#x5357; &#x5408;&#x4F19;&#x4F01;&#x4E1A; &#x4F01;&#x4E1A;&#x6CD5;&#x4EBA; 0.57 0 2 5998154 2002.0 9720.0 &#x5DE5;&#x4E1A; &#x798F;&#x5EFA; &#x5408;&#x4F19;&#x4F01;&#x4E1A; &#x81EA;&#x7136;&#x4EBA; 0.74 0 3 5984390 2000.0 4800.0 &#x5546;&#x4E1A;&#x670D;&#x52A1;&#x4E1A; &#x5C71;&#x4E1C; &#x80A1;&#x4EFD;&#x6709;&#x9650;&#x516C;&#x53F8; NaN 0.90 0 4 5980535 2004.0 4530.0 &#x96F6;&#x552E;&#x4E1A; &#x5E7F;&#x4E1C; &#x519C;&#x6C11;&#x4E13;&#x4E1A;&#x5408;&#x4F5C;&#x793E; &#x81EA;&#x7136;&#x4EBA; 0.95 0 base_train_data.describe() .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } ID &#x6CE8;&#x518C;&#x65F6;&#x95F4; &#x6CE8;&#x518C;&#x8D44;&#x672C; &#x63A7;&#x5236;&#x4EBA;&#x6301;&#x80A1;&#x6BD4;&#x4F8B; flag count 2.851900e+04 28230.000000 28220.000000 28223.000000 28519.000000 mean 4.332423e+06 2007.010627 5024.659816 0.754786 0.392721 std 2.161092e+06 4.326800 2860.157458 0.145008 0.488364 min 2.800000e+01 2000.000000 100.000000 0.510000 0.000000 25% 2.324856e+06 2003.000000 2530.000000 0.630000 0.000000 50% 5.981915e+06 2007.000000 5010.000000 0.750000 0.000000 75% 5.990992e+06 2011.000000 7490.000000 0.880000 1.000000 max 6.000000e+06 2014.000000 10000.000000 1.000000 1.000000 knowledge_train_data knowledge_train_data.head() .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } ID &#x4E13;&#x5229; &#x5546;&#x6807; &#x8457;&#x4F5C;&#x6743; 0 28 0.0 1.0 1.0 1 230 0.0 0.0 0.0 2 693 0.0 0.0 0.0 3 990 0.0 0.0 0.0 4 1274 0.0 0.0 0.0 knowledge_train_data.describe() .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } ID &#x4E13;&#x5229; &#x5546;&#x6807; &#x8457;&#x4F5C;&#x6743; count 2.851900e+04 28233.000000 28216.00000 28237.000000 mean 4.332423e+06 0.342507 0.36334 0.371428 std 2.161092e+06 0.474557 0.48097 0.483195 min 2.800000e+01 0.000000 0.00000 0.000000 25% 2.324856e+06 0.000000 0.00000 0.000000 50% 5.981915e+06 0.000000 0.00000 0.000000 75% 5.990992e+06 1.000000 1.00000 1.000000 max 6.000000e+06 1.000000 1.00000 1.000000 &#x5408;&#x5E76; base data &#x548C; knowledge data combined_base_knowledge_train_data = combined_base_knowledge_data( base_train_data, knowledge_train_data ) combined_base_knowledge_train_data.head() .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } &#x6CE8;&#x518C;&#x65F6;&#x95F4; &#x6CE8;&#x518C;&#x8D44;&#x672C; &#x884C;&#x4E1A; &#x533A;&#x57DF; &#x4F01;&#x4E1A;&#x7C7B;&#x578B; &#x63A7;&#x5236;&#x4EBA;&#x7C7B;&#x578B; &#x63A7;&#x5236;&#x4EBA;&#x6301;&#x80A1;&#x6BD4;&#x4F8B; flag &#x4E13;&#x5229; &#x5546;&#x6807; &#x8457;&#x4F5C;&#x6743; ID 5986361 2014.0 7090.0 &#x670D;&#x52A1;&#x4E1A; &#x6E56;&#x5317; &#x6709;&#x9650;&#x8D23;&#x4EFB;&#x516C;&#x53F8; &#x81EA;&#x7136;&#x4EBA; 0.93 0 0.0 0.0 0.0 5991749 2007.0 5940.0 &#x96F6;&#x552E;&#x4E1A; &#x6E56;&#x5357; &#x5408;&#x4F19;&#x4F01;&#x4E1A; &#x4F01;&#x4E1A;&#x6CD5;&#x4EBA; 0.57 0 1.0 1.0 0.0 5998154 2002.0 9720.0 &#x5DE5;&#x4E1A; &#x798F;&#x5EFA; &#x5408;&#x4F19;&#x4F01;&#x4E1A; &#x81EA;&#x7136;&#x4EBA; 0.74 0 1.0 1.0 0.0 5984390 2000.0 4800.0 &#x5546;&#x4E1A;&#x670D;&#x52A1;&#x4E1A; &#x5C71;&#x4E1C; &#x80A1;&#x4EFD;&#x6709;&#x9650;&#x516C;&#x53F8; NaN 0.90 0 0.0 0.0 0.0 5980535 2004.0 4530.0 &#x96F6;&#x552E;&#x4E1A; &#x5E7F;&#x4E1C; &#x519C;&#x6C11;&#x4E13;&#x4E1A;&#x5408;&#x4F5C;&#x793E; &#x81EA;&#x7136;&#x4EBA; 0.95 0 0.0 1.0 1.0 &#x67E5;&#x770B; year data &#x548C; money data&#x6570;&#x636E;&#x96C6;&#x4FE1;&#x606F; year_train_data year_train_data.head(10) .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } ID year &#x4ECE;&#x4E1A;&#x4EBA;&#x6570; &#x8D44;&#x4EA7;&#x603B;&#x989D; &#x8D1F;&#x503A;&#x603B;&#x989D; &#x8425;&#x4E1A;&#x603B;&#x6536;&#x5165; &#x4E3B;&#x8425;&#x4E1A;&#x52A1;&#x6536;&#x5165; &#x5229;&#x6DA6;&#x603B;&#x989D; &#x7EB3;&#x7A0E;&#x603B;&#x989D; &#x6240;&#x6709;&#x8005;&#x6743;&#x76CA;&#x5408;&#x8BA1; 0 28 2015.0 794.0 16400.0 28700.0 72160.0 28864.0 7216.0 0.0 -12300.0 1 230 2015.0 485.0 23520.0 10080.0 115248.0 57624.0 57624.0 0.0 13440.0 2 693 2015.0 534.0 133760.0 125400.0 655424.0 262169.6 196627.2 0.0 8360.0 3 990 2015.0 863.0 33760.0 25320.0 145168.0 58067.2 14516.8 0.0 8440.0 4 1274 2015.0 254.0 74900.0 104325.0 277130.0 110852.0 55426.0 0.0 -29425.0 5 1560 2015.0 491.0 105000.0 98000.0 147000.0 73500.0 29400.0 0.0 7000.0 6 3261 2015.0 799.0 417000.0 822880.0 1751400.0 1401120.0 350280.0 0.0 -405880.0 7 3313 2015.0 784.0 501600.0 986480.0 2156880.0 1294128.0 431376.0 0.0 -484880.0 8 3537 2015.0 647.0 17800.0 13350.0 8900.0 4450.0 2670.0 0.0 4450.0 9 3719 2015.0 369.0 317000.0 465990.0 380400.0 228240.0 152160.0 0.0 -148990.0 year_train_data.describe() .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } ID year &#x4ECE;&#x4E1A;&#x4EBA;&#x6570; ... &#x5229;&#x6DA6;&#x603B;&#x989D; &#x7EB3;&#x7A0E;&#x603B;&#x989D; &#x6240;&#x6709;&#x8005;&#x6743;&#x76CA;&#x5408;&#x8BA1; count 8.554800e+04 84692.000000 84743.000000 ... 8.469900e+04 8.473100e+04 84673.000000 mean 4.332626e+06 2015.999870 510.808421 ... 1.027939e+05 7.079659e+04 -27390.880033 std 2.160933e+06 0.816398 283.129690 ... 1.536672e+05 1.588261e+05 108355.730296 min 2.800000e+01 2015.000000 20.000000 ... 7.800000e+00 0.000000e+00 -828340.000000 25% 2.325192e+06 2015.000000 266.000000 ... 1.396755e+04 0.000000e+00 -53130.000000 50% 5.981916e+06 2016.000000 512.000000 ... 4.514400e+04 1.240200e+03 250.000000 75% 5.990992e+06 2017.000000 756.000000 ... 1.238400e+05 6.668040e+04 8900.000000 max 5.999999e+06 2017.000000 1000.000000 ... 1.807398e+06 2.089620e+06 429570.000000 year_train_data money_train_data.head() .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } ID year &#x503A;&#x6743;&#x878D;&#x8D44;&#x989D;&#x5EA6; &#x503A;&#x6743;&#x878D;&#x8D44;&#x6210;&#x672C; &#x80A1;&#x6743;&#x878D;&#x8D44;&#x989D;&#x5EA6; &#x80A1;&#x6743;&#x878D;&#x8D44;&#x6210;&#x672C; &#x5185;&#x90E8;&#x878D;&#x8D44;&#x548C;&#x8D38;&#x6613;&#x878D;&#x8D44;&#x989D;&#x5EA6; &#x5185;&#x90E8;&#x878D;&#x8D44;&#x548C;&#x8D38;&#x6613;&#x878D;&#x8D44;&#x6210;&#x672C; &#x9879;&#x76EE;&#x878D;&#x8D44;&#x548C;&#x653F;&#x7B56;&#x878D;&#x8D44;&#x989D;&#x5EA6; &#x9879;&#x76EE;&#x878D;&#x8D44;&#x548C;&#x653F;&#x7B56;&#x878D;&#x8D44;&#x6210;&#x672C; 0 28 2015.0 0.0 0.0 0.0 0.000 21648.0 1298.88 0.0 0.000 1 230 2015.0 0.0 0.0 0.0 0.000 0.0 0.00 470.4 28.224 2 693 2015.0 0.0 0.0 0.0 0.000 0.0 0.00 5350.4 321.024 3 990 NaN 0.0 0.0 0.0 0.000 0.0 0.00 675.2 40.512 4 1274 2015.0 0.0 0.0 11085.2 443.408 0.0 0.00 NaN 0.000 money_train_data.describe() .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } ID year &#x503A;&#x6743;&#x878D;&#x8D44;&#x989D;&#x5EA6; ... &#x5185;&#x90E8;&#x878D;&#x8D44;&#x548C;&#x8D38;&#x6613;&#x878D;&#x8D44;&#x6210;&#x672C; &#x9879;&#x76EE;&#x878D;&#x8D44;&#x548C;&#x653F;&#x7B56;&#x878D;&#x8D44;&#x989D;&#x5EA6; &#x9879;&#x76EE;&#x878D;&#x8D44;&#x548C;&#x653F;&#x7B56;&#x878D;&#x8D44;&#x6210;&#x672C; count 8.554800e+04 84703.000000 84739.000000 ... 84720.000000 84686.000000 84695.000000 mean 4.332626e+06 2016.000378 3353.349261 ... 1555.894230 1020.851124 61.231978 std 2.160933e+06 0.816496 8883.814614 ... 4811.138407 3000.062130 179.871750 min 2.800000e+01 2015.000000 0.000000 ... 0.000000 0.000000 0.000000 25% 2.325192e+06 2015.000000 0.000000 ... 0.000000 0.000000 0.000000 50% 5.981916e+06 2016.000000 0.000000 ... 0.000000 0.000000 0.000000 75% 5.990992e+06 2017.000000 0.000000 ... 10.719000 41.000000 2.520000 max 5.999999e+06 2017.000000 84830.000000 ... 72925.920000 39720.000000 2383.200000 &#x586B;&#x5145;&#x7F3A;&#x5931;&#x6570;&#x636E; year_train_data # fill null new_year_train_data = fill_na(year_train_data) new_year_train_data.set_index([&apos;ID&apos;, &apos;year&apos;]) new_year_train_data.head() .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } ID year &#x4ECE;&#x4E1A;&#x4EBA;&#x6570; &#x8D44;&#x4EA7;&#x603B;&#x989D; &#x8D1F;&#x503A;&#x603B;&#x989D; &#x8425;&#x4E1A;&#x603B;&#x6536;&#x5165; &#x4E3B;&#x8425;&#x4E1A;&#x52A1;&#x6536;&#x5165; &#x5229;&#x6DA6;&#x603B;&#x989D; &#x7EB3;&#x7A0E;&#x603B;&#x989D; &#x6240;&#x6709;&#x8005;&#x6743;&#x76CA;&#x5408;&#x8BA1; 0 28 2015.0 794.0 16400.0 28700.0 72160.0 28864.0 7216.0 0.0 -12300.0 1 230 2015.0 485.0 23520.0 10080.0 115248.0 57624.0 57624.0 0.0 13440.0 2 693 2015.0 534.0 133760.0 125400.0 655424.0 262169.6 196627.2 0.0 8360.0 3 990 2015.0 863.0 33760.0 25320.0 145168.0 58067.2 14516.8 0.0 8440.0 4 1274 2015.0 254.0 74900.0 104325.0 277130.0 110852.0 55426.0 0.0 -29425.0 money_train_data # fill null new_money_train_data = fill_na(money_train_data) new_money_train_data.set_index([&apos;ID&apos;, &apos;year&apos;]) # new_money_train_data.head(8) new_money_train_data.head() .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } ID year &#x503A;&#x6743;&#x878D;&#x8D44;&#x989D;&#x5EA6; &#x503A;&#x6743;&#x878D;&#x8D44;&#x6210;&#x672C; &#x80A1;&#x6743;&#x878D;&#x8D44;&#x989D;&#x5EA6; &#x80A1;&#x6743;&#x878D;&#x8D44;&#x6210;&#x672C; &#x5185;&#x90E8;&#x878D;&#x8D44;&#x548C;&#x8D38;&#x6613;&#x878D;&#x8D44;&#x989D;&#x5EA6; &#x5185;&#x90E8;&#x878D;&#x8D44;&#x548C;&#x8D38;&#x6613;&#x878D;&#x8D44;&#x6210;&#x672C; &#x9879;&#x76EE;&#x878D;&#x8D44;&#x548C;&#x653F;&#x7B56;&#x878D;&#x8D44;&#x989D;&#x5EA6; &#x9879;&#x76EE;&#x878D;&#x8D44;&#x548C;&#x653F;&#x7B56;&#x878D;&#x8D44;&#x6210;&#x672C; 0 28 2015.0 0.0 0.0 0.0 0.000 21648.0 1298.88 0.0 0.000 1 230 2015.0 0.0 0.0 0.0 0.000 0.0 0.00 470.4 28.224 2 693 2015.0 0.0 0.0 0.0 0.000 0.0 0.00 5350.4 321.024 3 990 2015.0 0.0 0.0 0.0 0.000 0.0 0.00 675.2 40.512 4 1274 2015.0 0.0 0.0 11085.2 443.408 0.0 0.00 0.0 0.000 &#x5408;&#x5E76;year data&#x548C;money data&#x6570;&#x636E;&#x96C6; # Merge new year and money data combined_new_year_money_train_data = combined_new_year_money_data( new_year_train_data, new_money_train_data ) combined_new_year_money_train_data.head() .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } ID year &#x4ECE;&#x4E1A;&#x4EBA;&#x6570; &#x8D44;&#x4EA7;&#x603B;&#x989D; ... &#x5185;&#x90E8;&#x878D;&#x8D44;&#x548C;&#x8D38;&#x6613;&#x878D;&#x8D44;&#x989D;&#x5EA6; &#x5185;&#x90E8;&#x878D;&#x8D44;&#x548C;&#x8D38;&#x6613;&#x878D;&#x8D44;&#x6210;&#x672C; &#x9879;&#x76EE;&#x878D;&#x8D44;&#x548C;&#x653F;&#x7B56;&#x878D;&#x8D44;&#x989D;&#x5EA6; &#x9879;&#x76EE;&#x878D;&#x8D44;&#x548C;&#x653F;&#x7B56;&#x878D;&#x8D44;&#x6210;&#x672C; 0 28 2015.0 794.0 16400.0 ... 21648.0 1298.88 0.0 0.000 1 230 2015.0 485.0 23520.0 ... 0.0 0.00 470.4 28.224 2 693 2015.0 534.0 133760.0 ... 0.0 0.00 5350.4 321.024 3 990 2015.0 863.0 33760.0 ... 0.0 0.00 675.2 40.512 4 1274 2015.0 254.0 74900.0 ... 0.0 0.00 0.0 0.000 &#x62C6;&#x5206;&#x65B0;&#x7279;&#x5F81; &#x5C06;&#x5408;&#x5E76;&#x540E;&#x7684;&#x6570;&#x636E;&#x96C6;&#x4E2D;&#x6BCF;&#x4E00;&#x5E74;&#x7684;&#x6570;&#x636E;&#x62C6;&#x5206;&#x6210;&#x65B0;&#x7684;&#x7279;&#x5F81;&#xFF0C;&#x4F7F;&#x4E4B;&#x4E0E;base data&#x901A;&#x8FC7;ID&#x4E00;&#x4E00;&#x5BF9;&#x5E94;&#x3002; splited_year_money_train_data = split_data(combined_new_year_money_train_data) splited_year_money_train_data.head() .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } &#x4ECE;&#x4E1A;&#x4EBA;&#x6570;_2015 &#x8D44;&#x4EA7;&#x603B;&#x989D;_2015 &#x8D1F;&#x503A;&#x603B;&#x989D;_2015 ... &#x5185;&#x90E8;&#x878D;&#x8D44;&#x548C;&#x8D38;&#x6613;&#x878D;&#x8D44;&#x989D;&#x5EA6;_2017 &#x5185;&#x90E8;&#x878D;&#x8D44;&#x548C;&#x8D38;&#x6613;&#x878D;&#x8D44;&#x6210;&#x672C;_2017 &#x9879;&#x76EE;&#x878D;&#x8D44;&#x548C;&#x653F;&#x7B56;&#x878D;&#x8D44;&#x989D;&#x5EA6;_2017 &#x9879;&#x76EE;&#x878D;&#x8D44;&#x548C;&#x653F;&#x7B56;&#x878D;&#x8D44;&#x6210;&#x672C;_2017 ID 28 794.0 16400.0 28700.0 ... 0.0 0.000 0.0 0.0 230 485.0 23520.0 10080.0 ... 0.0 0.000 0.0 0.0 693 534.0 133760.0 125400.0 ... 0.0 0.000 0.0 0.0 990 863.0 33760.0 25320.0 ... 111661.2 6699.672 0.0 0.0 1274 254.0 74900.0 104325.0 ... 0.0 0.000 0.0 0.0 5 rows &#xD7; 48 columns &#x5408;&#x5E76;&#x5904;&#x7406;&#x597D;&#x7684;&#x6570;&#x636E;&#x96C6; train = pd.merge(combined_base_knowledge_train_data, splited_year_money_train_data, on=[&apos;ID&apos;]) train.head() .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } &#x6CE8;&#x518C;&#x65F6;&#x95F4; &#x6CE8;&#x518C;&#x8D44;&#x672C; &#x884C;&#x4E1A; ... &#x5185;&#x90E8;&#x878D;&#x8D44;&#x548C;&#x8D38;&#x6613;&#x878D;&#x8D44;&#x989D;&#x5EA6;_2017 &#x5185;&#x90E8;&#x878D;&#x8D44;&#x548C;&#x8D38;&#x6613;&#x878D;&#x8D44;&#x6210;&#x672C;_2017 &#x9879;&#x76EE;&#x878D;&#x8D44;&#x548C;&#x653F;&#x7B56;&#x878D;&#x8D44;&#x989D;&#x5EA6;_2017 &#x9879;&#x76EE;&#x878D;&#x8D44;&#x548C;&#x653F;&#x7B56;&#x878D;&#x8D44;&#x6210;&#x672C;_2017 ID 5986361 2014.0 7090.0 &#x670D;&#x52A1;&#x4E1A; ... 0.0 0.0 0.0 0.0 5991749 2007.0 5940.0 &#x96F6;&#x552E;&#x4E1A; ... 80190.0 4811.4 0.0 0.0 5998154 2002.0 9720.0 &#x5DE5;&#x4E1A; ... 0.0 0.0 0.0 0.0 5984390 2000.0 4800.0 &#x5546;&#x4E1A;&#x670D;&#x52A1;&#x4E1A; ... 48960.0 2937.6 0.0 0.0 5980535 2004.0 4530.0 &#x96F6;&#x552E;&#x4E1A; ... 0.0 0.0 0.0 0.0 5 rows &#xD7; 59 columns &#x4FDD;&#x5B58;&#x5904;&#x7406;&#x597D;&#x7684;&#x8BAD;&#x7EC3;&#x6570;&#x636E;&#x96C6; train.to_csv(&quot;data/train/train.csv&quot;) train.describe() .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } &#x6CE8;&#x518C;&#x65F6;&#x95F4; &#x6CE8;&#x518C;&#x8D44;&#x672C; &#x63A7;&#x5236;&#x4EBA;&#x6301;&#x80A1;&#x6BD4;&#x4F8B; ... &#x5185;&#x90E8;&#x878D;&#x8D44;&#x548C;&#x8D38;&#x6613;&#x878D;&#x8D44;&#x989D;&#x5EA6;_2017 &#x5185;&#x90E8;&#x878D;&#x8D44;&#x548C;&#x8D38;&#x6613;&#x878D;&#x8D44;&#x6210;&#x672C;_2017 &#x9879;&#x76EE;&#x878D;&#x8D44;&#x548C;&#x653F;&#x7B56;&#x878D;&#x8D44;&#x989D;&#x5EA6;_2017 &#x9879;&#x76EE;&#x878D;&#x8D44;&#x548C;&#x653F;&#x7B56;&#x878D;&#x8D44;&#x6210;&#x672C;_2017 count 28516.000000 28516.000000 28516.000000 ... 2.851600e+04 28516.000000 28516.000000 28516.000000 mean 2007.010836 5024.064385 0.754743 ... 2.850957e+04 1712.928322 1115.153493 67.013075 std 4.304831 2844.938780 0.144249 ... 8.651585e+04 5202.890113 3229.079861 193.992216 min 2000.000000 100.000000 0.510000 ... 0.000000e+00 0.000000 0.000000 0.000000 25% 2003.000000 2560.000000 0.630000 ... 0.000000e+00 0.000000 0.000000 0.000000 50% 2007.000000 5010.000000 0.750000 ... 0.000000e+00 0.000000 0.000000 0.000000 75% 2011.000000 7470.000000 0.880000 ... 0.000000e+00 0.000000 0.000000 0.000000 max 2014.000000 10000.000000 1.000000 ... 1.215432e+06 72925.920000 38930.000000 2335.800000 8 rows &#xD7; 55 columns &#x6D4B;&#x8BD5;&#x6570;&#x636E;&#x96C6;&#x5904;&#x7406; &#x6309;&#x7167;&#x521A;&#x521A;&#x5904;&#x7406;&#x8BAD;&#x7EC3;&#x96C6;&#x7684;&#x6D41;&#x7A0B;&#x5904;&#x7406;&#x6D4B;&#x8BD5;&#x6570;&#x636E;&#x96C6;&#x3002; ### &#x52A0;&#x8F7D;&#x539F;&#x59CB;&#x6570;&#x636E;&#x96C6; # load testing data base_test_data = pd.read_csv(&quot;data/test/base-test.csv&quot;) year_test_data = pd.read_csv(&quot;data/test/year-test.csv&quot;) knowledge_test_data = pd.read_csv(&quot;data/test/knowledge-test.csv&quot;) money_test_data = pd.read_csv(&quot;data/test/money-test.csv&quot;) &#x5408;&#x5E76; base data &#x548C; knowledge data combined_base_knowledge_test_data = combined_base_knowledge_data( base_test_data, knowledge_test_data ) combined_base_knowledge_test_data.describe() .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } &#x6CE8;&#x518C;&#x65F6;&#x95F4; &#x6CE8;&#x518C;&#x8D44;&#x672C; &#x63A7;&#x5236;&#x4EBA;&#x6301;&#x80A1;&#x6BD4;&#x4F8B; &#x4E13;&#x5229; &#x5546;&#x6807; &#x8457;&#x4F5C;&#x6743; count 7132.000000 7132.000000 7132.000000 7132.000000 7132.000000 7132.000000 mean 2007.077257 5039.914470 0.754799 0.342821 0.358385 0.373528 std 4.321929 2839.476208 0.143953 0.474686 0.479560 0.483774 min 2000.000000 100.000000 0.510000 0.000000 0.000000 0.000000 25% 2003.000000 2640.000000 0.630000 0.000000 0.000000 0.000000 50% 2007.000000 5040.000000 0.750000 0.000000 0.000000 0.000000 75% 2011.000000 7450.000000 0.880000 1.000000 1.000000 1.000000 max 2014.000000 10000.000000 1.000000 1.000000 1.000000 1.000000 year data and money data &#x586B;&#x5145;&#x7F3A;&#x5931;&#x503C;&#x5E76;&#x9A8C;&#x8BC1;&#x586B;&#x5145;&#x7ED3;&#x679C; year_test_data # fill null new_year_test_data = fill_na(year_test_data) new_year_test_data.set_index([&apos;ID&apos;, &apos;year&apos;]) new_year_test_data.describe() print(&quot;unique ID count in base data:&quot;, base_test_data[&quot;ID&quot;] .nunique()) print(&quot;2015 unique ID count in year data:&quot;, new_year_test_data[&quot;ID&quot;] .loc[new_year_test_data.year==2015] .nunique()) print(&quot;2016 unique ID count in year data:&quot;, new_year_test_data[&quot;ID&quot;] .loc[new_year_test_data.year==2016] .nunique()) print(&quot;2017 unique ID count in year data:&quot;, new_year_test_data[&quot;ID&quot;] .loc[new_year_test_data.year==2017] .nunique()) unique ID count in base data: 7132 2015 unique ID count in year data: 7132 2016 unique ID count in year data: 7132 2017 unique ID count in year data: 7132 money_test_data # fill null new_money_test_data = fill_na(money_test_data) new_money_test_data.set_index([&apos;ID&apos;, &apos;year&apos;]) # new_money_train_data.head(8) new_money_test_data.describe() .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } ID year &#x503A;&#x6743;&#x878D;&#x8D44;&#x989D;&#x5EA6; ... &#x5185;&#x90E8;&#x878D;&#x8D44;&#x548C;&#x8D38;&#x6613;&#x878D;&#x8D44;&#x989D;&#x5EA6; &#x5185;&#x90E8;&#x878D;&#x8D44;&#x548C;&#x8D38;&#x6613;&#x878D;&#x8D44;&#x6210;&#x672C; &#x9879;&#x76EE;&#x878D;&#x8D44;&#x548C;&#x653F;&#x7B56;&#x878D;&#x8D44;&#x989D;&#x5EA6; &#x9879;&#x76EE;&#x878D;&#x8D44;&#x548C;&#x653F;&#x7B56;&#x878D;&#x8D44;&#x6210;&#x672C; count 2.139600e+04 21396.000000 21396.000000 ... 2.139600e+04 21396.000000 21396.000000 21396.000000 mean 4.332655e+06 2016.000000 3209.631146 ... 2.677436e+04 1598.629057 1025.091606 61.698997 std 2.163020e+06 0.816516 8711.231069 ... 8.272665e+04 4950.288392 3050.157292 183.387577 min 4.290000e+02 2015.000000 0.000000 ... 0.000000e+00 0.000000 0.000000 0.000000 25% 2.331607e+06 2015.000000 0.000000 ... 0.000000e+00 0.000000 0.000000 0.000000 50% 5.981952e+06 2016.000000 0.000000 ... 0.000000e+00 0.000000 0.000000 0.000000 75% 5.990780e+06 2017.000000 0.000000 ... 2.565000e+02 0.850500 0.000000 0.000000 max 5.999998e+06 2017.000000 80410.000000 ... 1.257150e+06 75429.000000 40970.000000 2458.200000 print(&quot;unique ID count in base data:&quot;, base_test_data[&quot;ID&quot;].nunique()) print(&quot;2015 unique ID count in money data:&quot;, new_money_test_data[&quot;ID&quot;] .loc[new_money_test_data.year==2015] .nunique()) print(&quot;2016 unique ID count in money data:&quot;, new_money_test_data[&quot;ID&quot;] .loc[new_money_test_data.year==2016] .nunique()) print(&quot;2017 unique ID count in money data:&quot;, new_money_test_data[&quot;ID&quot;] .loc[new_money_test_data.year==2017] .nunique()) unique ID count in base data: 7132 2015 unique ID count in money data: 7132 2016 unique ID count in money data: 7132 2017 unique ID count in money data: 7132 &#x5408;&#x5E76; year data &#x548C; money data combined_new_year_money_test_data = combined_new_year_money_data( new_year_test_data, new_money_test_data ) combined_new_year_money_test_data.head() .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } ID year &#x4ECE;&#x4E1A;&#x4EBA;&#x6570; ... &#x5185;&#x90E8;&#x878D;&#x8D44;&#x548C;&#x8D38;&#x6613;&#x878D;&#x8D44;&#x989D;&#x5EA6; &#x5185;&#x90E8;&#x878D;&#x8D44;&#x548C;&#x8D38;&#x6613;&#x878D;&#x8D44;&#x6210;&#x672C; &#x9879;&#x76EE;&#x878D;&#x8D44;&#x548C;&#x653F;&#x7B56;&#x878D;&#x8D44;&#x989D;&#x5EA6; &#x9879;&#x76EE;&#x878D;&#x8D44;&#x548C;&#x653F;&#x7B56;&#x878D;&#x8D44;&#x6210;&#x672C; 0 429 2015.0 136.0 ... 0.0 0.000 0.0 0.00 1 727 2015.0 375.0 ... 0.0 0.000 0.0 0.00 2 1137 2015.0 289.0 ... 24460.8 1467.648 0.0 0.00 3 1873 2015.0 889.0 ... 0.0 0.000 0.0 0.00 4 2260 2015.0 689.0 ... 0.0 0.000 11287.5 677.25 print(&quot;unique ID count in combined data:&quot;, combined_new_year_money_test_data[&quot;ID&quot;].nunique()) unique ID count in combined data: 7132 &#x62C6;&#x5206;&#x65B0;&#x7279;&#x5F81; splited_year_money_test_data = split_data(combined_new_year_money_test_data) splited_year_money_test_data.head() .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } &#x4ECE;&#x4E1A;&#x4EBA;&#x6570;_2015 &#x8D44;&#x4EA7;&#x603B;&#x989D;_2015 &#x8D1F;&#x503A;&#x603B;&#x989D;_2015 ... &#x5185;&#x90E8;&#x878D;&#x8D44;&#x548C;&#x8D38;&#x6613;&#x878D;&#x8D44;&#x989D;&#x5EA6;_2017 &#x5185;&#x90E8;&#x878D;&#x8D44;&#x548C;&#x8D38;&#x6613;&#x878D;&#x8D44;&#x6210;&#x672C;_2017 &#x9879;&#x76EE;&#x878D;&#x8D44;&#x548C;&#x653F;&#x7B56;&#x878D;&#x8D44;&#x989D;&#x5EA6;_2017 &#x9879;&#x76EE;&#x878D;&#x8D44;&#x548C;&#x653F;&#x7B56;&#x878D;&#x8D44;&#x6210;&#x672C;_2017 ID 429 136.0 193400.0 183730.0 ... 0.0 0.000 0.0 0.00 727 375.0 366240.0 536280.0 ... 0.0 0.000 0.0 0.00 1137 289.0 87200.0 40320.0 ... 0.0 0.000 1008.0 60.48 1873 889.0 229320.0 222950.0 ... 12612.6 756.756 0.0 0.00 2260 689.0 225750.0 325080.0 ... 0.0 0.000 0.0 0.00 5 rows &#xD7; 48 columns &#x5408;&#x5E76;&#x5904;&#x7406;&#x597D;&#x7684;&#x6570;&#x636E;&#x96C6; &#x6839;&#x636E;ID&#x5408;&#x5E76;&#x5904;&#x7406;&#x597D;&#x7684;&#x6570;&#x636E;&#x96C6;&#x3002; test = pd.merge(combined_base_knowledge_test_data, splited_year_money_test_data, on=[&apos;ID&apos;]) test.head() .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } &#x6CE8;&#x518C;&#x65F6;&#x95F4; &#x6CE8;&#x518C;&#x8D44;&#x672C; &#x884C;&#x4E1A; ... &#x5185;&#x90E8;&#x878D;&#x8D44;&#x548C;&#x8D38;&#x6613;&#x878D;&#x8D44;&#x989D;&#x5EA6;_2017 &#x5185;&#x90E8;&#x878D;&#x8D44;&#x548C;&#x8D38;&#x6613;&#x878D;&#x8D44;&#x6210;&#x672C;_2017 &#x9879;&#x76EE;&#x878D;&#x8D44;&#x548C;&#x653F;&#x7B56;&#x878D;&#x8D44;&#x989D;&#x5EA6;_2017 &#x9879;&#x76EE;&#x878D;&#x8D44;&#x548C;&#x653F;&#x7B56;&#x878D;&#x8D44;&#x6210;&#x672C;_2017 ID 5991927 2010.0 8790.0 &#x5DE5;&#x4E1A; ... 341491.5 20489.49 0.0 0.000 5998351 2005.0 270.0 &#x670D;&#x52A1;&#x4E1A; ... 0.0 0.00 194.4 11.664 5992703 2012.0 230.0 &#x670D;&#x52A1;&#x4E1A; ... 0.0 0.00 0.0 0.000 5979231 2003.0 5980.0 &#x5546;&#x4E1A;&#x670D;&#x52A1;&#x4E1A; ... 75348.0 4520.88 0.0 0.000 5995422 2007.0 160.0 &#x5DE5;&#x4E1A; ... 8856.0 531.36 0.0 0.000 5 rows &#xD7; 58 columns &#x4FDD;&#x5B58;&#x5904;&#x7406;&#x597D;&#x7684;&#x6D4B;&#x8BD5;&#x6570;&#x636E;&#x96C6; test.to_csv(&quot;data/test/test.csv&quot;) &#x603B;&#x7ED3; &#x8FD9;&#x6B21;&#x6570;&#x636E;&#x5904;&#x7406;&#x6BD4;&#x8F83;&#x7B80;&#x5355;&#xFF0C;&#x4E3B;&#x8981;&#x6CE8;&#x610F;&#x4EE5;&#x4E0B;&#x51E0;&#x4E2A;&#x70B9;&#xFF1A; 1. &#x5BF9;&#x4E8E;&#x5E74;&#x4EFD;&#x6570;&#x636E;&#x7F3A;&#x5931;&#x503C;&#x7684;&#x5904;&#x7406;&#xFF0C;&#x53EF;&#x4EE5;&#x6839;&#x636E;ID&#x548C;&#x5E74;&#x4EFD;&#x5224;&#x65AD;&#x7F3A;&#x5931;&#x7684;&#x5E74;&#x4EFD;&#x5E94;&#x8BE5;&#x662F;&#x54EA;&#x4E00;&#x5E74;&#xFF0C;&#x7136;&#x540E;&#x586B;&#x5145;&#x76F8;&#x5E94;&#x7684;&#x5E74;&#x4EFD;&#x503C;&#x5373;&#x53EF;&#xFF0C;&#x5982;&#x679C;&#x662F;&#x540C;&#x4E00;ID&#x7F3A;&#x5931;&#x4E24;&#x5E74;&#x6570;&#x636E;&#xFF0C;&#x8FD9;&#x4E2A;&#x5C31;&#x968F;&#x7F18;&#x4E86;&#x1F606;&#xFF0C;&#x6211;&#x662F;&#x6309;&#x7167;&#x4ECE;&#x4E0A;&#x5230;&#x4E0B;&#x7684;&#x987A;&#x5E8F;&#x586B;&#x5145;&#x7684;&#xFF08;&#x53EF;&#x80FD;&#x6709;&#x66F4;&#x597D;&#x7684;&#x65B9;&#x6CD5;&#xFF0C;&#x5927;&#x5BB6;&#x53EF;&#x4EE5;&#x63D0;&#x51FA;&#x81EA;&#x5DF1;&#x7684;&#x60F3;&#x6CD5;&#xFF09;&#xFF0C;&#x4F8B;&#x5982;ID&#x4E3A;123&#x7684;&#x4F01;&#x4E1A;&#x7F3A;&#x5931;2015&#x548C;2017&#x7684;&#x5E74;&#x4EFD;&#xFF0C;&#x90A3;&#x4E48;&#x4F9D;&#x6B21;&#x5C06;year&#x5C5E;&#x6027;&#x503C;&#x586B;&#x5145;&#x4E3A;2015&#x548C;2017&#xFF1B; 2. &#x5BF9;&#x4E8E;&#x5176;&#x4ED6;&#x6570;&#x636E;&#x6211;&#x5C31;&#x76F4;&#x63A5;&#x7C97;&#x66B4;&#x7684;&#x586B;&#x5145;&#x4E2D;&#x4F4D;&#x6570;&#xFF0C;&#x672C;&#x6765;&#x662F;&#x60F3;&#x5148;&#x8FD9;&#x4E48;&#x586B;&#x5145;&#x7136;&#x540E;&#x770B;&#x770B;&#x6548;&#x679C;&#x518D;&#x4F18;&#x5316;&#xFF0C;&#x7ED3;&#x679C;&#x8BAD;&#x7EC3;&#x6D4B;&#x8BD5;&#x540E;&#x7684;&#x7ED3;&#x679C;&#x8FD8;&#x4E0D;&#x9519;&#xFF0C;&#x6240;&#x4EE5;&#x4E5F;&#x5C31;&#x6CA1;&#x6709;&#x518D;&#x4F18;&#x5316;&#x4E86;&#xFF1B; &#x4E0B;&#x7BC7;&#x6587;&#x7AE0;&#x4E2D;&#x6211;&#x4F1A;&#x5BF9;&#x6A21;&#x578B;&#x8BAD;&#x7EC3;&#x8FC7;&#x7A0B;&#x4F5C;&#x4E00;&#x4E2A;&#x8BF4;&#x660E;&#xFF0C;&#x4F7F;&#x7528;&#x7684;&#x662F;LightGBM&#x6846;&#x67B6;&#xFF08;LightGBM&#x662F;&#x4F7F;&#x7528;&#x57FA;&#x4E8E;&#x6811;&#x7684;&#x5B66;&#x4E60;&#x7B97;&#x6CD5;&#x7684;&#x68AF;&#x5EA6;&#x589E;&#x5F3A;&#x6846;&#x67B6;&#xFF09;&#x3002;","categories":[{"name":"Technology","slug":"Technology","permalink":"https://littlemeemoon.cn/categories/Technology/"},{"name":"Machine Learning","slug":"Technology/Machine-Learning","permalink":"https://littlemeemoon.cn/categories/Technology/Machine-Learning/"},{"name":"Data pre-processing","slug":"Technology/Machine-Learning/Data-pre-processing","permalink":"https://littlemeemoon.cn/categories/Technology/Machine-Learning/Data-pre-processing/"}],"tags":[{"name":"Data pre-processing","slug":"Data-pre-processing","permalink":"https://littlemeemoon.cn/tags/Data-pre-processing/"},{"name":"Categorical Data","slug":"Categorical-Data","permalink":"https://littlemeemoon.cn/tags/Categorical-Data/"},{"name":"Missing value","slug":"Missing-value","permalink":"https://littlemeemoon.cn/tags/Missing-value/"}],"keywords":[{"name":"Technology","slug":"Technology","permalink":"https://littlemeemoon.cn/categories/Technology/"},{"name":"Machine Learning","slug":"Technology/Machine-Learning","permalink":"https://littlemeemoon.cn/categories/Technology/Machine-Learning/"},{"name":"Data pre-processing","slug":"Technology/Machine-Learning/Data-pre-processing","permalink":"https://littlemeemoon.cn/categories/Technology/Machine-Learning/Data-pre-processing/"}]},{"title":"Leetcode Note in Apri 2020 | part 2 |day 08-14","slug":"Technology/Coding/Leetcode/Leetcode-Note-in-Apri-2020-part-2-day-08-14","date":"2020-04-08T05:54:16.000Z","updated":"2020-06-04T04:19:01.758Z","comments":true,"path":"2020/04/08/Technology/Coding/Leetcode/Leetcode-Note-in-Apri-2020-part-2-day-08-14/","link":"","permalink":"https://littlemeemoon.cn/2020/04/08/Technology/Coding/Leetcode/Leetcode-Note-in-Apri-2020-part-2-day-08-14/","excerpt":"","text":"&#x5199;&#x5728;&#x524D;&#x9762;&#x7684;&#x8BDD; &#x7B2C;&#x4E8C;&#x6B21;&#x66F4;&#x65B0;&#xFF0C;&#x7EE7;&#x7EED;&#x524D;&#x8FDB;~ Backspace String Compare Given two strings S and T, return if they are equal when both are typed into empty text editors. # means a backspace character. Examples: Input: S = &quot;ab#c&quot;, T = &quot;ad#c&quot; Output: true Explanation: Both S and T become &quot;ac&quot;. Input: S = &quot;ab##&quot;, T = &quot;c#d#&quot; Output: true Explanation: Both S and T become &quot;&quot;. Input: S = &quot;a##c&quot;, T = &quot;#a#c&quot; Output: true Explanation: Both S and T become &quot;c&quot;. Input: S = &quot;a#c&quot;, T = &quot;b&quot; Output: false Explanation: S becomes &quot;c&quot; while T becomes &quot;b&quot;. Solution &#x8FD9;&#x4E2A;&#x9898;&#x5BF9;&#x4E8E;&#x6211;&#x6765;&#x8BF4;&#x6709;&#x70B9;&#x96BE;&#x5EA6;&#xFF0C;&#x6628;&#x5929;(9&#x53F7;)&#x665A;&#x4E0A;&#x505A;&#x4E86;&#x4E24;&#x4E2A;&#x5C0F;&#x65F6;&#x5427;&#xFF0C;&#x91CD;&#x70B9;&#x662F;&#x901A;&#x4E0D;&#x8FC7;&#x6240;&#x6709;&#x6D4B;&#x8BD5;&#x7528;&#x4F8B;&#xFF0C;&#x603B;&#x662F;&#x6709;&#x4E00;&#x4E9B;&#x7EC6;&#x8282;&#x6CA1;&#x6709;&#x8003;&#x8651;&#x5230;&#xFF0C;&#x800C;&#x4E14;&#x4EE3;&#x7801;&#x8D8A;&#x5199;&#x8D8A;&#x590D;&#x6742;&#xFF0C;&#x52A0;&#x4E0A;&#x6628;&#x5929;&#x4E2D;&#x5348;&#x6CA1;&#x7761;&#x5348;&#x89C9;&#xFF0C;&#x5230;&#x6700;&#x540E;&#x81EA;&#x5DF1;&#x628A;&#x81EA;&#x5DF1;&#x90FD;&#x641E;&#x61F5;&#x4E86;&#xFF0C;&#x6C14;&#x1F620;&#x3002;&#x540E;&#x9762;&#x7761;&#x89C9;&#x7684;&#x65F6;&#x5019;&#x53D1;&#x73B0;&#x81EA;&#x5DF1;&#x8111;&#x5B50;&#x771F;&#x7684;&#x662F;&#x4E00;&#x6839;&#x7B4B;&#xFF0C;&#x6362;&#x4E2A;&#x601D;&#x8DEF;&#x8FD9;&#x9898;&#x4F1A;&#x7B80;&#x5355;&#x5F88;&#x591A;&#x3002;&#x5148;&#x770B;&#x770B;&#x4EE3;&#x7801;&#x5427;&#x3002; Mine &#x6838;&#x5FC3;&#x601D;&#x8DEF;&#xFF1A;&#x4ECE;&#x540E;&#x5F80;&#x524D;&#x627E;&#x53EF;&#x80FD;&#x7559;&#x4E0B;&#x6765;&#x7684;&#x5B57;&#x7B26;&#xFF0C;&#x5E76;&#x4E00;&#x4E00;&#x6BD4;&#x5BF9;&#x4E24;&#x4E2A;&#x5B57;&#x7B26;&#x4E32;&#x5BF9;&#x5E94;&#x4F4D;&#x7F6E;&#x80FD;&#x7559;&#x4E0B;&#x6765;&#x7684;&#x7684;&#x5B57;&#x7B26;&#x662F;&#x5426;&#x76F8;&#x7B49;&#x3002;&#x6CE8;&#x610F;&#x5FAA;&#x73AF;&#x5224;&#x65AD;&#x6761;&#x4EF6;&#x7684;&#x8BBE;&#x7F6E;&#xFF01; class Solution: def backspaceCompare(self, S: str, T: str) -&gt; bool: s_i = len(S) - 1 t_i = len(T) - 1 s_back = t_back = 0 while True: # Loop will be stoped when any of the following situations occur: # 1. s_i completed the last character access # 2. S[s_i] is a letter (S[s_i] != &apos;#&apos;) and don&apos;t need to go back # currently (s_back = 0) # Same as T, t_i and t_back while s_i &gt;= 0: if S[s_i] == &apos;#&apos;: s_i, s_back = s_i - 1, s_back + 1 elif S[s_i] != &apos;#&apos; and s_back &gt; 0: s_i, s_back = s_i - 1, s_back - 1 else: break while t_i &gt;= 0: if T[t_i] == &apos;#&apos;: t_i, t_back = t_i - 1, t_back + 1 elif T[t_i] != &apos;#&apos; and t_back &gt; 0: t_i, t_back = t_i - 1, t_back - 1 else: break # There are only two situations will return True: # 1. both s_i and t_i are not out of index and S[s_i] = T[t_i] # 2. both s_i and t_i are out of index, it means no letter needs # to be compared and previous corresponding letters are equal. # otherwise, it will return false in situation 1 if s_i &gt;= 0 and t_i &gt;= 0: if S[s_i] != T[t_i]: return False s_i, t_i = s_i - 1, t_i - 1 else: return s_i &lt; 0 and t_i &lt; 0 &#x5176;&#x5B9E;&#x8FD8;&#x662F;&#x86EE;&#x590D;&#x6742;&#x7684;&#xFF0C;&#x53EF;&#x80FD;&#x6709;&#x66F4;&#x597D;&#x7684;&#x89E3;&#x51B3;&#x65B9;&#x6CD5;&#xFF0C;&#x5E0C;&#x671B;&#x5C0F;&#x4F19;&#x4F34;&#x4EEC;&#x7ED9;&#x51FA;&#x4F60;&#x4EEC;&#x7684;&#x601D;&#x8DEF;&#x548C;&#x5EFA;&#x8BAE;&#x3002;&#x6211;&#x521A;&#x5F00;&#x59CB;&#x7684;&#x601D;&#x8DEF;&#x662F;&#x4ECE;&#x524D;&#x5F80;&#x540E;&#x53BB;&#x627E;&#x53EF;&#x80FD;&#x7559;&#x4E0B;&#x7684;&#x5B57;&#x6BCD;&#xFF0C;&#x4F46;&#x662F;&#x8FD9;&#x4E2A;&#x53D8;&#x5316;&#x592A;&#x5927;&#x4E86;&#xFF0C;&#x800C;&#x4E14;&#x5224;&#x65AD;&#x6761;&#x4EF6;&#x7279;&#x522B;&#x591A;&#xFF0C;&#x603B;&#x662F;&#x6709;&#x5F88;&#x591A;&#x60C5;&#x51B5;&#x8003;&#x8651;&#x4E0D;&#x5230;&#xFF0C;&#x6574;&#x4E86;&#x4E00;&#x665A;&#x4E0A;&#x4E5F;&#x6CA1;&#x6574;&#x51FA;&#x6765;&#x3002;&#x540E;&#x9762;&#x7761;&#x89C9;&#x7684;&#x65F6;&#x5019;&#x7A81;&#x7136;&#x60F3;&#x8D77;&#x6211;&#x4E3A;&#x5565;&#x4E0D;&#x4ECE;&#x540E;&#x5F80;&#x524D;&#x627E;&#x5462;&#xFF1F;&#x1F923;&#x5177;&#x4F53;&#x89E3;&#x6CD5;&#x90FD;&#x5728;&#x6CE8;&#x91CA;&#x91CC;&#xFF0C;emmmm&#xFF0C;&#x53EF;&#x80FD;&#x8FD8;&#x6709;&#x8BED;&#x6CD5;&#x9519;&#x8BEF;&#xFF0C;&#x52FF;&#x4ECB;&#x1F60A;&#x3002; Min Stack Design a stack that supports push, pop, top, and retrieving the minimum element in constant time. push(x) -- Push element x onto stack. pop() -- Removes the element on top of the stack. top() -- Get the top element. getMin() -- Retrieve the minimum element in the stack. Example: MinStack minStack = new MinStack(); minStack.push(-2); minStack.push(0); minStack.push(-3); minStack.getMin(); --&gt; Returns -3. minStack.pop(); minStack.top(); --&gt; Returns 0. minStack.getMin(); --&gt; Returns -2. Solution &#x8FD9;&#x4E2A;&#x9898;&#x4E0D;&#x96BE;&#xFF0C;&#x5E76;&#x4E14;&#x6709;&#x5F88;&#x591A;&#x4E2D;&#x5B9E;&#x73B0;&#x65B9;&#x5F0F;&#x3002;&#x6211;&#x4EEC;&#x9700;&#x8981;&#x5B9E;&#x73B0;&#x7684;&#x8FD9;&#x4E2A;&#x6808;&#x662F;&#x5728;&#x4F20;&#x7EDF;&#x7684;&#x6808;&#x5DF2;&#x6709;&#x7684;&#x529F;&#x80FD;&#x4E0A;&#x589E;&#x52A0;&#x4E86;&#x8FD4;&#x56DE;&#x6700;&#x5C0F;&#x503C;&#x7684;&#x529F;&#x80FD;&#xFF0C;&#x8FD9;&#x5C31;&#x6D89;&#x53CA;&#x5230;&#x600E;&#x4E48;&#x5B58;&#x50A8;&#x6700;&#x5C0F;&#x503C;&#x7684;&#x95EE;&#x9898;&#xFF0C;&#x8FD9;&#x91CC;&#x6709;&#x4E09;&#x4E2A;&#x601D;&#x8DEF;&#xFF0C;&#x5927;&#x5BB6;&#x6709;&#x66F4;&#x597D;&#x7684;&#x601D;&#x8DEF;&#x4E5F;&#x53EF;&#x4EE5;&#x5728;&#x8BC4;&#x8BBA;&#x533A;&#x7ED9;&#x51FA;&#xFF1A; &#x65F6;&#x95F4;&#x6362;&#x7A7A;&#x95F4; &#x53EA;&#x8BBE;&#x8BA1;&#x4E00;&#x4E2A;&#x6808;&#xFF0C;&#x8FD4;&#x56DE;&#x6700;&#x5C0F;&#x503C;&#x65F6;&#x901A;&#x8FC7;&#x6392;&#x5E8F;&#x65B9;&#x5F0F;&#x8FD4;&#x56DE;&#x3002; class MinStack: def __init__(self): &quot;&quot;&quot; initialize your data structure here. &quot;&quot;&quot; self.stack = [] def push(self, x: int) -&gt; None: self.stack.append(x) def pop(self) -&gt; None: self.stack.pop() def top(self) -&gt; int: if len(self.stack) &lt; 0: return None return self.stack[len(self.stack)-1] def getMin(self) -&gt; int: if len(self.stack) &lt; 0: return None s_sorted = sorted(self.stack) return s_sorted[0] &#x66F4;&#x8282;&#x7701;&#x65F6;&#x95F4;&#x548C;&#x7A7A;&#x95F4;&#x7684;&#x65B9;&#x5F0F;(&#x66F4;&#x5DE7;&#x5999;) &#x8BBE;&#x8BA1;&#x4E00;&#x4E2A;&#x6808;&#xFF0C;&#x4E00;&#x4E2A;min&#x53D8;&#x91CF;&#xFF0C;&#x4F46;&#x662F;&#x6808;&#x91CC;&#x9762;&#x53EA;&#x5B58;&#x653E;&#x6BCF;&#x4E2A;&#x5143;&#x7D20;&#x4E0E;&#x6700;&#x5C0F;&#x503C;&#x7684;&#x5DEE;&#x503C;&#xFF08;x-min&#xFF09;&#xFF0C;&#x5F53;&#x51FA;&#x73B0;&#x66F4;&#x5C0F;&#x7684;&#x6700;&#x5C0F;&#x503C;&#x65F6;&#xFF0C;&#x4FDD;&#x5B58;&#x7684;&#x662F;&#x8D1F;&#x6570;&#xFF0C;&#x6545;&#x8BFE;&#x901A;&#x8FC7;&#x8FD9;&#x4E2A;&#x6761;&#x4EF6;&#x8FFD;&#x6EAF;&#x4E4B;&#x524D;&#x7684;&#x6700;&#x5C0F;&#x503C;&#xFF0C;&#x5177;&#x4F53;&#x5B9E;&#x73B0;&#x89C1;&#x4E0B;&#x9762;&#x7684;&#x4EE3;&#x7801;&#x3002; class MinStack: def __init__(self): &quot;&quot;&quot; initialize your data structure here. &quot;&quot;&quot; self.stack = [] self.s_min = None def push(self, x: int) -&gt; None: if self.s_min == None: self.s_min = x self.stack.append(x-self.s_min) self.s_min = min(self.s_min, x) def pop(self) -&gt; None: pop = self.stack.pop() if len(self.stack) &gt; 0: if pop &lt; 0: self.s_min = self.s_min - pop else: self.s_min = None def top(self) -&gt; int: if len(self.stack) &lt; 0: return None top = self.stack[len(self.stack)-1] if top &lt; 0: return self.s_min return top + self.s_min def getMin(self) -&gt; int: return self.s_min &#x7A7A;&#x95F4;&#x6362;&#x65F6;&#x95F4; &#x8BBE;&#x8BA1;&#x4E24;&#x4E2A;&#x6808;&#xFF0C;&#x591A;&#x51FA;&#x6765;&#x7684;&#x90A3;&#x4E2A;&#x6808;&#x7528;&#x6765;&#x8BB0;&#x5F55;&#x51FA;&#x73B0;&#x8FC7;&#x7684;&#x6700;&#x5C0F;&#x503C;&#xFF0C;&#x6211;&#x8FD9;&#x91CC;&#x6CA1;&#x6709;&#x53BB;&#x5B9E;&#x73B0;&#x4E86;&#xFF0C;&#x5927;&#x5BB6;&#x53EF;&#x4EE5;&#x8BD5;&#x8BD5;&#x3002; Diameter of Binary Tree Given a binary tree, you need to compute the length of the diameter of the tree. The diameter of a binary tree is the length of the longest path between any two nodes in a tree. This path may or may not pass through the root. Example: Given a binary tree Return 3, which is the length of the path [4,2,1,3] or [5,2,1,3]. Note: The length of path between two nodes is represented by the number of edges between them. Solution &#x6838;&#x5FC3;&#x601D;&#x8DEF;&#xFF1A;&#x6839;&#x636E;&#x534A;&#x5F84;&#x7684;&#x5B9A;&#x4E49;&#x53EF;&#x77E5;&#xFF0C;&#x534A;&#x5F84;&#x6240;&#x5728;&#x7684;&#x8DEF;&#x5F84;&#x4E00;&#x5B9A;&#x6709;&#x4E00;&#x4E2A;&#x4E2D;&#x5FC3;&#x8282;&#x70B9;&#xFF0C;&#x6545;&#x53EF;&#x901A;&#x8FC7;&#x5224;&#x65AD;&#x4E8C;&#x53C9;&#x6811;&#x6BCF;&#x4E2A;&#x8282;&#x70B9;&#xFF08;&#x5F53;&#x524D;&#x53EF;&#x80FD;&#x7684;&#x4E2D;&#x5FC3;&#x70B9;&#xFF09;&#x5DE6;&#x53F3;&#x5B50;&#x6811;&#x7684;&#x6DF1;&#x5EA6;&#x548C;&#x7684;&#x5927;&#x5C0F;&#x6765;&#x786E;&#x5B9A;&#x534A;&#x5F84;&#x3002; # Definition for a binary tree node. class TreeNode: def __init__(self, x): self.val = x self.left = None self.right = None class Solution: def diameterOfBinaryTree(self, root: TreeNode) -&gt; int: self.diameter = 0 def count_depth(node): if not(node): return 0 l_dep, r_dep = count_depth(node.left), count_depth(node.right) self.diameter = max(self.diameter, l_dep+r_dep) # max depth: max(left depth, right depth) # +1: count node return 1 + max(l_dep, r_dep) count_depth(root) return self.diameter &#x8FD9;&#x9898;&#x521A;&#x5F00;&#x59CB;&#x6211;&#x662F;&#x6CA1;&#x6709;&#x4EC0;&#x4E48;&#x597D;&#x7684;&#x601D;&#x8DEF;&#x7684;&#xFF0C;&#x592A;&#x4E45;&#x6CA1;&#x505A;&#x5173;&#x4E8E;&#x4E8C;&#x53C9;&#x6811;&#x7684;&#x9898;&#x4E86;&#xFF0C;&#x4E0D;&#x5BF9;&#xFF0C;&#x51C6;&#x786E;&#x6765;&#x8BB2;&#x5E94;&#x8BE5;&#x662F;&#x8BFE;&#x540E;&#x5C31;&#x4E22;&#x4E86;&#xFF0C;&#x54C8;&#x54C8;&#x54C8;&#xFF0C;&#x540E;&#x6765;&#x53BB;&#x67E5;&#x4E86;&#x4E0B;&#x4E8C;&#x53C9;&#x6811;&#x7684;&#x76F8;&#x5173;&#x8D44;&#x6599;&#xFF0C;&#x770B;&#x5230;&#x6C42;&#x4E8C;&#x53C9;&#x6811;&#x7684;&#x6DF1;&#x5EA6;&#x95EE;&#x9898;&#x7ED9;&#x4E86;&#x6211;&#x7075;&#x611F;&#x3002;&#x5E0C;&#x671B;&#x80FD;&#x628A;&#x4EE5;&#x524D;&#x4E22;&#x6389;&#x7684;&#x77E5;&#x8BC6;&#x70B9;&#x6162;&#x6162;&#x6361;&#x8D77;&#x6765;&#xFF0C;&#x5C31;&#x62FF;&#x8FD9;&#x4E2A;&#x6811;&#x76F8;&#x5173;&#x7684;&#x77E5;&#x8BC6;&#x70B9;&#x6765;&#x8BF4;&#xFF0C;&#x5176;&#x5B9E;&#x5F88;&#x591A;&#x7B97;&#x6CD5;&#x5E95;&#x5C42;&#x539F;&#x7406;&#x90FD;&#x6709;&#x6D89;&#x53CA;&#xFF0C;&#x4E3A;&#x4E86;&#x4EE5;&#x540E;&#x80FD;&#x8D70;&#x5FEB;&#x4E00;&#x70B9;&#xFF0C;&#x73B0;&#x5728;&#x5E94;&#x8BE5;&#x591A;&#x8D70;&#x51E0;&#x6B65;&#x3002; Last Stone Weight We have a collection of stones, each stone has a positive integer weight. Each turn, we choose the two heaviest stones and smash them together. Suppose the stones have weights x and y with x &lt;= y. The result of this smash is: If x == y, both stones are totally destroyed; If x != y, the stone of weight x is totally destroyed, and the stone of weight y has new weight y-x. At the end, there is at most 1 stone left. Return the weight of this stone (or 0 if there are no stones left.) Example 1: Input: [2,7,4,1,8,1] Output: 1 Explanation: We combine 7 and 8 to get 1 so the array converts to [2,4,1,1,1] then, we combine 2 and 4 to get 2 so the array converts to [2,1,1,1] then, we combine 2 and 1 to get 1 so the array converts to [1,1,1] then, we combine 1 and 1 to get 0 so the array converts to [1] then that&apos;s the value of last stone. Solution &#x89E3;&#x6CD5;&#x4E00; &#x2014;&#x2014; &#x5927;&#x6839;&#x5806; &#x8FD9;&#x4E2A;&#x89E3;&#x6CD5;&#x662F;&#x66F4;&#x4F18;&#x7684;&#x89E3;&#x6CD5;&#xFF0C;&#x5F97;&#x529B;&#x4E8E;&#x5927;&#x6839;&#x5806;&#x7684;&#x7279;&#x6027;&#xFF0C;&#x7B97;&#x6CD5;&#x65F6;&#x95F4;&#x590D;&#x6742;&#x5EA6;&#x51CF;&#x5C11;&#x81F3;O(Nlog(N))&#x3002; class Solution: def lastStoneWeight(self, stones: List[int]) -&gt; int: # The heap in python defaults to a small root heap # So heap pops the minimum value when use heappop, take the opposite # value of each list (the weight of each stone &gt; 0) to ensure that the # heaviest stone is poped. stones = list(map(lambda x : -x, stones)) # Convert stone list to heap heapq.heapify(stones) while len(stones) &gt; 1: # Pop and return the smallest element of stones, keeping the heap invariant y = heapq.heappop(stones) if stones: x = heapq.heappop(stones) # if x != y push x-y to heap if x != y: heapq.heappush(stones, y-x) if not(stones): return 0 return -stones[0] &#x65F6;&#x95F4;&#x590D;&#x6742;&#x5EA6;&#xFF1A;O(Nlog(N)) &#x89E3;&#x6CD5;&#x4E8C; &#x8FD9;&#x4E2A;&#x89E3;&#x6CD5;&#x662F;&#x6700;&#x5BB9;&#x6613;&#x60F3;&#x5230;&#x7684;&#x89E3;&#x6CD5;&#xFF0C;&#x601D;&#x60F3;&#x4E5F;&#x6BD4;&#x8F83;&#x7B80;&#x5355;&#xFF0C;&#x65F6;&#x95F4;&#x590D;&#x6742;&#x5EA6;O(N2N^2N2)&#x3002; class Solution: def lastStoneWeight(self, stones: List[int]) -&gt; int: stones = sorted(stones) while len(stones) &gt; 1: y, x = stones.pop(), stones.pop() if x != y: stones.append(y-x) stones = sorted(stones) if not(stones): return 0 return stones[0] &#x65F6;&#x95F4;&#x590D;&#x6742;&#x5EA6;&#xFF1A;O(N2N^2N2) -----&#xFF08;not sure&#xFF09; &#x5B9E;&#x9645;&#x91C7;&#x7528;&#x7B2C;&#x4E8C;&#x79CD;&#x65B9;&#x6CD5;&#x7684;&#x5728;LeetCode&#x4E0A;&#x7684;run time&#x6BD4;&#x7B2C;&#x4E00;&#x79CD;&#x65B9;&#x6CD5;&#x66F4;&#x5C11;&#xFF0C;&#x6240;&#x4EE5;&#x7B2C;&#x4E8C;&#x79CD;&#x65B9;&#x6CD5;&#x65F6;&#x95F4;&#x590D;&#x6742;&#x5EA6;&#x6BD4;&#x7B2C;&#x4E00;&#x79CD;&#x65B9;&#x5F0F;&#x66F4;&#x5C0F;&#xFF0C;&#x6211;&#x53EF;&#x80FD;&#x9700;&#x8981;&#x5B66;&#x4E60;&#x4E00;&#x4E0B;python&#x7684;&#x5185;&#x7F6E;&#x51FD;&#x6570;sorted&#x65B9;&#x6CD5;&#xFF0C;&#x770B;&#x770B;&#x5B83;&#x7684;&#x5B9E;&#x73B0;&#x3002;&#x521D;&#x6B65;&#x4E86;&#x89E3;&#x5230;python&#x4E2D;&#x7684;sorted&#x6392;&#x5E8F;&#xFF0C;&#x7528;&#x7684;Timsort&#x7B97;&#x6CD5;&#xFF0C;&#x7EF4;&#x57FA;&#x767E;&#x79D1;&#x89E3;&#x91CA;&#xFF1A;Timsort&#x662F;&#x4E00;&#x79CD;&#x6DF7;&#x5408;&#x7A33;&#x5B9A;&#x7684;&#x6392;&#x5E8F;&#x7B97;&#x6CD5;&#xFF0C;&#x6E90;&#x81EA;&#x5408;&#x5E76;&#x6392;&#x5E8F;&#x548C;&#x63D2;&#x5165;&#x6392;&#x5E8F;&#xFF0C;&#x65E8;&#x5728;&#x8F83;&#x597D;&#x5730;&#x5904;&#x7406;&#x771F;&#x5B9E;&#x4E16;&#x754C;&#x4E2D;&#x5404;&#x79CD;&#x5404;&#x6837;&#x7684;&#x6570;&#x636E;&#x3002;&#x5177;&#x4F53;&#x539F;&#x7406;&#x8FD8;&#x9700;&#x6DF1;&#x7A76;&#x3002; Contiguous Array Given a binary array, find the maximum length of a contiguous subarray with equal number of 0 and 1. Example 1: Input: [0,1] Output: 2 Explanation: [0, 1] is the longest contiguous subarray with equal number of 0 and 1. Example 2: Input: [0,1,0] Output: 2 Explanation: [0, 1] (or [1, 0]) is a longest contiguous subarray with equal number of 0 and 1. Solution &#x8BB2;&#x771F;&#x5FC3;&#x8BDD;&#xFF0C;&#x6211;&#x7B2C;&#x4E00;&#x904D;&#x6CA1;&#x770B;&#x61C2;&#x9898;&#x1F923;&#xFF0C;&#x9898;&#x76EE;&#x5927;&#x610F;&#x662F;&#x7ED9;&#x4E00;&#x4E2A;&#x4E8C;&#x503C;(0/1)&#x6570;&#x7EC4;&#xFF0C;&#x627E;&#x51FA;&#x8BE5;&#x6570;&#x7EC4;&#x7684;&#x6700;&#x5927;&#x8FDE;&#x7EED;&#x5B50;&#x4E32;&#x7684;&#x957F;&#x5EA6;&#xFF0C;&#x8BE5;&#x5B50;&#x4E32;&#x4E2D;&#x6EE1;&#x8DB3;0&#x548C;1&#x7684;&#x4E2A;&#x6570;&#x76F8;&#x540C;&#x3002; &#x660E;&#x767D;&#x9898;&#x610F;&#x4E4B;&#x540E;&#x7684;&#x7B2C;&#x4E00;&#x60F3;&#x6CD5;&#x662F;&#x901A;&#x8FC7;&#x8BA1;&#x6570;&#x7684;&#x5F62;&#x5F0F;&#x53BB;&#x627E;&#x5B50;&#x4E32;&#xFF0C;&#x4F8B;&#x5982;&#x8BBE;&#x7F6E;&#x4E00;&#x4E2A;count&#x53D8;&#x91CF;&#xFF0C;&#x9047;&#x5230;0&#x5C31;-1&#xFF0C;&#x9047;&#x5230;1&#x5C31;+1&#x3002;&#x90A3;&#x4E48;&#x5982;&#x4F55;&#x901A;&#x8FC7;&#x8FD9;&#x4E2A;&#x53D8;&#x91CF;&#x53BB;&#x5224;&#x65AD;&#x4EC0;&#x4E48;&#x65F6;&#x5019;&#x4F1A;&#x51FA;&#x73B0;&#x6700;&#x5927;&#x5B50;&#x4E32;&#x5462;&#xFF1F; &#x8003;&#x8651;&#x4E0B;&#x9762;&#x51E0;&#x79CD;&#x60C5;&#x51B5;&#xFF1A; &#x5047;&#x8BBE;nums = [0, 1, 0, 0, 1, 1]&#xFF0C; &#x90A3;&#x4E48;count = [-1&#xFF0C; 0&#xFF0C; -1&#xFF0C; -2&#xFF0C; -1&#xFF0C; 0] =&gt; max length&#xFF1A;6&#xFF08;count&#x6570;&#x7EC4;&#x7684;&#x6700;&#x540E;&#x4E00;&#x4E2A;0&#x7684;index+1&#xFF09; nums = [0, 0, 0, 0, 1, 1]&#xFF0C;count = [-1, -2, -3, -4, -3, -2] =&gt; &#x5F88;&#x660E;&#x663E;&#x8FD9;&#x79CD;&#x60C5;&#x51B5;&#x7684;&#x6700;&#x5927;&#x957F;&#x5EA6;&#x4E0D;&#x662F;&#x6700;&#x540E;&#x4E00;&#x4E2A;0&#x7684;index + 1 = 2&#xFF0C;&#x800C;&#x662F;4&#xFF0C;&#x5176;&#x5B9E;&#x4E5F;&#x662F;&#x53EF;&#x4EE5;&#x901A;&#x8FC7;count&#x7684;&#x503C;&#x63A8;&#x6D4B;&#x51FA;&#x6765;&#xFF0C;&#x6700;&#x5927;&#x957F;&#x5EA6;&#x7684;&#x5B50;&#x4E32;&#x662F;[1, 1, 0, 0]&#xFF0C;&#x4E0B;&#x9762;&#x7528;&#x4E00;&#x4E2A;&#x56FE;&#x6765;&#x76F4;&#x89C2;&#x7684;&#x8868;&#x793A;&#x5982;&#x4F55;&#x901A;&#x8FC7;count&#x7684;&#x503C;&#x6765;&#x63A8;&#x51FA;max length&#xFF1A; count&#x521D;&#x59CB;&#x503C;&#x4E3A;0&#xFF0C;&#x6545;&#x8D77;&#x70B9;&#x4E3A;(0, 0)&#xFF0C;&#x4ECE;count&#x4ECE;index=1&#x5F00;&#x59CB;&#x8BA1;&#x6570;&#xFF0C;&#x4ECE;&#x56FE;&#x4E2D;&#x53EF;&#x4EE5;&#x770B;&#x51FA;&#xFF0C;&#x6700;&#x957F;&#x7684;&#x5B50;&#x6570;&#x7EC4;&#x662F;&#x4ECE;&#x7D22;&#x5F15;2&#x5230;6: &#x4ECE;&#x4E0A;&#x9762;&#x7684;&#x63D2;&#x56FE;&#x4E2D;&#xFF0C;&#x53EF;&#x4EE5;&#x5F88;&#x5BB9;&#x6613;&#x5730;&#x7406;&#x89E3;&#x5230;&#xFF0C;&#x5177;&#x6709;&#x76F8;&#x540C;y&#x8F74;&#x503C;&#x7684;&#x4E24;&#x4E2A;&#x70B9;&#x8868;&#x793A;&#x8FD9;&#x4E24;&#x4E2A;&#x70B9;&#x4E4B;&#x95F4;&#x7684;&#x5E8F;&#x5217;&#x5177;&#x6709;&#x76F8;&#x7B49;&#x7684;0&#x548C;1&#x3002; nums = [0&#xFF0C;0&#xFF0C;1&#xFF0C;0&#xFF0C;0&#xFF0C;0&#xFF0C;1&#xFF0C;1]&#xFF0C;&#x5982;&#x4E0B;&#x6240;&#x793A;&#xFF1A; &#x6709;3&#x4E2A;&#x70B9;&#x5177;&#x6709;&#x76F8;&#x540C;&#x7684;y&#x8F74;&#x503C;-2&#x3002;&#x56E0;&#x6B64;&#xFF0C;&#x4ECE;&#x7D22;&#x5F15;2&#x5230;4&#x7684;&#x5B50;&#x6570;&#x7EC4;&#x5177;&#x6709;&#x76F8;&#x7B49;&#x7684;0&#x548C;1&#xFF0C;&#x800C;&#x4ECE;&#x7D22;&#x5F15;4&#x5230;8&#x7684;&#x5B50;&#x6570;&#x7EC4;&#x5177;&#x6709;&#x76F8;&#x7B49;&#x7684;0&#x548C;1&#x3002;&#x53EF;&#x4EE5;&#x5C06;&#x5B83;&#x4EEC;&#x52A0;&#x8D77;&#x6765;&#x4EE5;&#x5F62;&#x6210;&#x4ECE;&#x7D22;&#x5F15;2&#x5230;8&#x7684;&#x6700;&#x957F;&#x5B50;&#x6570;&#x7EC4;&#xFF0C;&#x56E0;&#x6B64;&#x6700;&#x5927;&#x957F;&#x5EA6;&#x5B50;&#x6570;&#x7EC4;&#x7684; 8-2 = 6&#x3002; nums = [0&#xFF0C;1&#xFF0C;1&#xFF0C;0&#xFF0C;1&#xFF0C;1&#xFF0C;1&#xFF0C;0]&#xFF0C;&#x5982;&#x4E0B;&#x6240;&#x793A;&#xFF1A; &#x6700;&#x957F;&#x7684;&#x5B50;&#x6570;&#x7EC4;&#x7684;y&#x8F74;&#x503C;&#x4E3A;0&#x3002; &#x4E3A;&#x4E86;&#x627E;&#x5230;max length&#xFF0C;&#x8FD9;&#x91CC;&#x53EF;&#x4EE5;&#x8003;&#x8651;&#x7528;&#x4E00;&#x4E2A;&#x5B57;&#x5178;&#x6765;&#x5B58;&#x50A8;count&#x7684;&#x503C;&#xFF08;&#x4F5C;&#x4E3A;&#x952E;&#xFF09;&#x53CA;&#x5176;&#x5173;&#x8054;&#x7684;index&#xFF08;&#x4F5C;&#x4E3A;&#x503C;&#xFF09;&#x3002;&#x53EA;&#x9700;&#x8981;&#x5728;count&#x7B2C;&#x4E00;&#x6B21;&#x51FA;&#x73B0;&#x67D0;&#x503C;&#x65F6;&#x4FDD;&#x5B58;&#x5176;&#x8BA1;&#x6570;&#x503C;&#x53CA;&#x5176;&#x7D22;&#x5F15;&#xFF0C;&#x5F53;&#x76F8;&#x540C;&#x7684;&#x8BA1;&#x6570;&#x503C;&#x518D;&#x6B21;&#x51FA;&#x73B0;&#x65F6;&#xFF0C;&#x4F7F;&#x7528;&#x65B0;&#x7D22;&#x5F15;&#x51CF;&#x53BB;&#x65E7;&#x7D22;&#x5F15;&#x6765;&#x8BA1;&#x7B97;&#x5B50;&#x6570;&#x7EC4;&#x7684;&#x957F;&#x5EA6;&#x3002;&#x53D8;&#x91CF;max_length&#x7528;&#x4E8E;&#x8DDF;&#x8E2A;&#x5F53;&#x524D;&#x7684;&#x6700;&#x5927;&#x957F;&#x5EA6;&#x3002; &#x4EE3;&#x7801;&#x5B9E;&#x73B0; class Solution: def findMaxLength(self, nums: List[int]) -&gt; int: count = 0 max_len = 0 dic = {0: 0} for i, num in enumerate(nums, 1): count += 1 if num == 1 else -1 if count in dic: max_len = max(max_len, i - dic[count]) else: dic[count] = i return max_len Reference Python O(n) Solution with Visual Explanation Perform String Shifts You are given a string s containing lowercase English letters, and a matrix shift, where shift[i] = [direction, amount]: 1. direction can be 0 (for left shift) or 1 (for right shift). 2. amount is the amount by which string s is to be shifted. 3. A left shift by 1 means remove the first character of s and append it to the end. 4. Similarly, a right shift by 1 means remove the last character of s and add it to the beginning. Return the final string after all operations. Example 1: Input: s = &quot;abc&quot;, shift = [[0,1],[1,2]] Output: &quot;cab&quot; Explanation: [0,1] means shift to left by 1. &quot;abc&quot; -&gt; &quot;bca&quot; [1,2] means shift to right by 2. &quot;bca&quot; -&gt; &quot;cab&quot; Example 2: Input: s = &quot;abcdefg&quot;, shift = [[1,1],[1,1],[0,2],[1,3]] Output: &quot;efgabcd&quot; Explanation: [1,1] means shift to right by 1. &quot;abcdefg&quot; -&gt; &quot;gabcdef&quot; [1,1] means shift to right by 1. &quot;gabcdef&quot; -&gt; &quot;fgabcde&quot; [0,2] means shift to left by 2. &quot;fgabcde&quot; -&gt; &quot;abcdefg&quot; [1,3] means shift to right by 3. &quot;abcdefg&quot; -&gt; &quot;efgabcd&quot; Solution &#x601D;&#x8DEF;&#xFF1A;&#x8FD9;&#x4E2A;&#x9898;&#x80AF;&#x5B9A;&#x4E0D;&#x80FD;&#x7528;&#x86EE;&#x529B;&#x6CD5;&#xFF0C;&#x6BD4;&#x5982;&#x8BF4;&#x4F60;&#x6328;&#x4E2A;&#x53BB;&#x5224;&#x65AD;&#x77E9;&#x9635;&#x5143;&#x7D20;&#xFF0C;&#x7136;&#x540E;&#x6839;&#x636E;&#x8981;&#x6C42;&#x53BB;&#x79FB;&#x52A8;&#xFF0C;&#x8FD9;&#x6837;&#x590D;&#x6742;&#x5EA6;&#x592A;&#x9AD8;&#x4E86;&#x3002;&#x6838;&#x5FC3;&#x601D;&#x8DEF;&#x662F;&#x5C06;&#x8981;&#x79FB;&#x52A8;&#x7684;&#x6B65;&#x6570;&#x7EDF;&#x8BA1;&#x5728;&#x4E00;&#x8D77;&#xFF0C;&#x7136;&#x540E;&#x53EA;&#x79FB;&#x52A8;&#x4E00;&#x6B21;&#x3002; &#x4F8B;&#x5982;&#xFF0C;&#x9996;&#x5148;&#x8BBE;&#x7F6E;&#x4E00;&#x4E2A;move_steps&#x53D8;&#x91CF;&#xFF0C;&#x5411;&#x5DE6;&#x4E00;&#x6B65;&#x79FB;&#x5C31;-1&#xFF0C;&#x5411;&#x53F3;&#x79FB;&#x4E24;&#x6B65;&#x5C31;+2&#x3002;&#x7136;&#x540E;&#x5224;&#x65AD;&#x79FB;&#x52A8;&#x6B65;&#x6570;&#xFF0C;&#x5982;&#x679C;&#x79FB;&#x52A8;&#x6B65;&#x6570;&#x8D85;&#x8FC7;&#x5B57;&#x7B26;&#x4E32;&#x957F;&#x5EA6;&#xFF0C;&#x90A3;&#x4E48;&#x5C31;&#x901A;&#x8FC7;&#x5B57;&#x7B26;&#x4E32;&#x957F;&#x5EA6;&#x53D6;&#x4F59;&#xFF08;&#x56E0;&#x4E3A;&#x79FB;&#x52A8;&#x5B57;&#x7B26;&#x4E32;&#x957F;&#x5EA6;&#x90A3;&#x4E48;&#x591A;&#x6B65;&#x6700;&#x540E;&#x53C8;&#x6062;&#x590D;&#x539F;&#x6837;&#xFF0C;&#x76F8;&#x5F53;&#x4E8E;&#x6CA1;&#x79FB;&#xFF09;&#x3002;&#x6700;&#x540E;&#x7EDF;&#x4E00;&#x5411;&#x4E00;&#x4E2A;&#x65B9;&#x5411;&#xFF08;&#x4F8B;&#x5982;&#x5411;&#x53F3;&#xFF0C;&#x5982;&#x679C;&#x662F;&#x5DE6;&#x79FB;&#xFF0C;&#x5219;&#x901A;&#x8FC7;&#x5B57;&#x7B26;&#x4E32;&#x957F;&#x5EA6;&#x53D8;&#x4E3A;&#x5411;&#x53F3;&#x79FB;&#x52A8;&#xFF09;&#x79FB;&#x52A8;&#x3002;&#x601D;&#x8DEF;&#x5F88;&#x7B80;&#x5355;&#xFF0C;&#x5177;&#x4F53;&#x5B9E;&#x73B0;&#xFF0C;&#x8BF7;&#x770B;&#x4EE3;&#x7801;~&#x1F60A; class Solution: def stringShift(self, s: str, shift: List[List[int]]) -&gt; str: move_steps = 0 for data in shift: direction = data[0] move_steps += data[1] if direction == 1 else -data[1] s_len = len(s) move_steps %= s_len if move_steps &gt; 0 else -s_len # Do not need to move if move_steps == 0: return s # move right if move_steps &lt; 0: move_steps += s_len # move s_list = list(s) while move_steps &gt; 0: s_list.insert(0, s_list[-1]) s_list = s_list[:-1] move_steps -= 1 return &apos;&apos;.join(s_list) &#x603B;&#x7ED3; &#x8FD9;&#x5468;&#x9898;&#x7684;&#x96BE;&#x5EA6;&#x660E;&#x663E;&#x8981;&#x6BD4;&#x4E0A;&#x5468;&#x7684;&#x9AD8;&#x90A3;&#x4E48;&#x4E00;&#x70B9;&#xFF0C;&#x5E0C;&#x671B;&#x81EA;&#x5DF1;&#x80FD;&#x575A;&#x6301;&#x4E0B;&#x53BB;&#xFF0C;&#x7ED9;&#x81EA;&#x5DF1;&#x4E00;&#x4E9B;&#x4FE1;&#x5FC3;&#x3002;&#x5662;&#x5BF9;&#x4E86;&#xFF0C;&#x6211;&#x611F;&#x89C9;&#x4E00;&#x7BC7;&#x6587;&#x7AE0;&#x66F4;&#x65B0;&#x4E00;&#x5468;&#x7684;&#x5185;&#x5BB9;&#x8FD8;&#x60F3;&#x6709;&#x70B9;&#x592A;&#x957F;&#x4E86;&#xFF0C;&#x4E0B;&#x5468;&#x6211;&#x53EF;&#x80FD;&#x4F1A;&#x8003;&#x8651;&#x4E00;&#x7BC7;&#x6587;&#x7AE0;&#x53EA;&#x6536;&#x7EB3;2-3&#x9053;&#x9898;&#x3002;&#x8FD9;&#x5468;&#x7684;&#x66F4;&#x65B0;&#x5C31;&#x5230;&#x6B64;&#x4E3A;&#x6B62;&#x4E86;&#xFF0C;&#x671F;&#x5F85;&#x4E0B;&#x6B21;&#x66F4;&#x65B0;&#x5427;~&#x1F44B;","categories":[{"name":"Technology","slug":"Technology","permalink":"https://littlemeemoon.cn/categories/Technology/"},{"name":"Coding","slug":"Technology/Coding","permalink":"https://littlemeemoon.cn/categories/Technology/Coding/"},{"name":"Leetcode","slug":"Technology/Coding/Leetcode","permalink":"https://littlemeemoon.cn/categories/Technology/Coding/Leetcode/"}],"tags":[{"name":"Leetcode","slug":"Leetcode","permalink":"https://littlemeemoon.cn/tags/Leetcode/"},{"name":"Python","slug":"Python","permalink":"https://littlemeemoon.cn/tags/Python/"},{"name":"Algorithm","slug":"Algorithm","permalink":"https://littlemeemoon.cn/tags/Algorithm/"}],"keywords":[{"name":"Technology","slug":"Technology","permalink":"https://littlemeemoon.cn/categories/Technology/"},{"name":"Coding","slug":"Technology/Coding","permalink":"https://littlemeemoon.cn/categories/Technology/Coding/"},{"name":"Leetcode","slug":"Technology/Coding/Leetcode","permalink":"https://littlemeemoon.cn/categories/Technology/Coding/Leetcode/"}]},{"title":"Leetcode Note in Apri 2020 | part 1 | day 01-07","slug":"Technology/Coding/Leetcode/Leetcode-Note-in-Apri-2020-part-1-day-01-07","date":"2020-04-01T01:51:55.000Z","updated":"2020-06-04T04:19:01.758Z","comments":true,"path":"2020/04/01/Technology/Coding/Leetcode/Leetcode-Note-in-Apri-2020-part-1-day-01-07/","link":"","permalink":"https://littlemeemoon.cn/2020/04/01/Technology/Coding/Leetcode/Leetcode-Note-in-Apri-2020-part-1-day-01-07/","excerpt":"","text":"&#x5199;&#x5728;&#x524D;&#x9762;&#x7684;&#x8BDD; &#x8FD9;&#x4E00;&#x7CFB;&#x5217;&#x6587;&#x7AE0;&#x4E3B;&#x8981;&#x662F;&#x7528;&#x4E8E;&#x8BB0;&#x5F55;&#x6211;&#x5728;LeetCode&#x4E0A;&#x5237;&#x9898;&#x65F6;&#x9047;&#x5230;&#x7684;&#x6211;&#x8BA4;&#x4E3A;&#x6BD4;&#x8F83;&#x6709;&#x96BE;&#x5EA6;&#x548C;&#x6709;&#x610F;&#x601D;&#x7684;&#x9898;&#xFF0C;&#x4EE5;&#x53CA;&#x662F;&#x6316;&#x6398;&#x5230;&#x7684;&#x5176;&#x4ED6;&#x5C0F;&#x4F19;&#x4F34;&#x6BD4;&#x8F83;&#x597D;&#x7684;&#x89E3;&#x6CD5;&#x548C;&#x601D;&#x8DEF;&#x3002;&#x8FD9;&#x662F;&#x7B2C;&#x4E00;&#x7BC7;&#xFF0C;&#x4E0D;&#x51FA;&#x610F;&#x5916;&#x8FD9;&#x4E2A;&#x7CFB;&#x5217;&#x4F1A;&#x4E00;&#x76F4;&#x66F4;&#x65B0;&#xFF0C;&#x4E5F;&#x7B97;&#x662F;&#x7763;&#x4FC3;&#x81EA;&#x5DF1;&#x575A;&#x6301;&#x4E0B;&#x53BB;&#x5427;&#x3002;&#x5BF9;&#x4E86;&#x6211;&#x5199;&#x4F5C;&#x6C34;&#x5E73;&#x771F;&#x7684;&#x5F88;&#x5DEE;&#xFF0C;&#x5E0C;&#x671B;&#x5927;&#x5BB6;&#x4E0D;&#x8981;&#x5ACC;&#x5F03;&#xFF0C;&#x4E5F;&#x53EF;&#x4EE5;&#x548C;&#x6211;&#x7559;&#x8A00;&#x7ED9;&#x51FA;&#x5EFA;&#x8BAE;&#x4EC0;&#x4E48;&#x7684;&#xFF0C;&#x671F;&#x5F85;&#x548C;&#x5927;&#x5BB6;&#x4E2A;&#x5171;&#x540C;&#x8FDB;&#x6B65;&#xFF01;&#x90A3;&#x6211;&#x4EEC;&#x5F00;&#x59CB;&#x5427; ~ Sigle number Given a non-empty array of integers, every element appears twice except for one. Find that single one. Note: Your algorithm should have a linear runtime complexity. Could you implement it without using extra memory? Example: Input: [4,1,2,1,2] Output: 4 Solution Mine: tuple + list class Solution: def singleNumber(self, nums: List[int]) -&gt; int: # store the count of positive number p_count = [0] * (max(tuple(nums)) + 1) # store the positive number p_nums = () # store the count of negative number n_count = [0] * (abs(min(tuple(nums))) + 1) # store the negative number n_nums = () # counting for num in nums: if num &gt;= 0: p_nums = p_nums + (num, ) p_count[num] = p_count[num] + 1 else: n_nums = n_nums + (num, ) n_count[abs(num)] = n_count[abs(num)] + 1 # find the sigle number for num in p_nums: if p_count[num] == 1: return num for num in n_nums: if n_count[abs(num)] == 1: return num return None Space complexity&#xFF1A; O(n) Time complexity&#xFF1A; O(n) Optimization using XOR The most crucial trick here is to recognize that if you XOR any same number together, you cancel it out (=0). Explanation: nums = [2, 4, 5, 4, 3, 5, 2] XORing everything together = 2 ^ 4 ^ 5 ^ 4 ^ 3 ^ 5 ^ 2 = (2^2) ^ (4^4) ^ (5^5) ^ 3 = 0 ^ 0 ^0 ^ 3 = 3 class Solution: def singleNumber(self, nums: List[int]) -&gt; int: return reduce(lambda x, y: x^y, nums, 0) Space complexity&#xFF1A; O(1) time complexity&#xFF1A; O(n) Reference Reduce list(map(str, [1, 2, 3, 4, 5, 6, 7, 8, 9])) # output: [&apos;1&apos;, &apos;2&apos;, &apos;3&apos;, &apos;4&apos;, &apos;5&apos;, &apos;6&apos;, &apos;7&apos;, &apos;8&apos;, &apos;9&apos;] Map reduce(f, [x1, x2, x3, x4]) = f(f(f(x1, x2), x3), x4) # convert string to integer DIGITS = {&apos;0&apos;: 0, &apos;1&apos;: 1, &apos;2&apos;: 2, &apos;3&apos;: 3, &apos;4&apos;: 4, &apos;5&apos;: 5, &apos;6&apos;: 6, &apos;7&apos;: 7, &apos;8&apos;: 8, &apos;9&apos;: 9} def char2num(s): return DIGITS[s] def str2int(s): return reduce(lambda x, y: x * 10 + y, map(char2num, s)) Happy number A happy number is a number defined by the following process: Starting with any positive integer, replace the number by the sum of the squares of its digits, and repeat the process until the number equals 1 (where it will stay), or it loops endlessly in a cycle which does not include 1. Those numbers for which this process ends in 1 are happy numbers. Example: Input: 19 Output: true Explanation: 12+92=821^2 + 9^2 = 8212+92=82 82+22=688^2 + 2^2 = 6882+22=68 62+82=1006^2 + 8^2 = 10062+82=100 12+02+02=11^2 + 0^2 + 0^2 = 112+02+02=1 Solution Floyd&apos;s cycle detection &#x6838;&#x5FC3;&#x601D;&#x8DEF;&#xFF1A;&#x5982;&#x679C;&#x4E00;&#x4E2A;&#x6570;&#x5B57;&#x4E0D;&#x662F; happy number &#x90A3;&#x4E48;&#x5B83;&#x62C6;&#x5206;&#x540E;&#x7684;&#x6570;&#x5B57;&#x7684;&#x548C;&#x4E00;&#x5B9A;&#x4F1A;&#x5FAA;&#x73AF;&#xFF0C;&#x901A;&#x8FC7;Floyd&apos;s cycle detection&#x7B97;&#x6CD5;&#x505A;&#x5FAA;&#x73AF;&#x68C0;&#x6D4B;&#x3002; Short Version utilizing walrus operator := class Solution: def isHappy(self, n: int) -&gt; bool: def next_num(num): return sum(map(lambda x:int(x)**2, str(num))) slow, fast = n, next_num(n) while (slow:=next_num(slow)) != (fast:=next_num(next_num(fast))) and fast != 1: continue return fast == 1 or not slow == fast Easier to understand version class Solution: def isHappy(self, n: int) -&gt; bool: def next_num(num): return sum(map(lambda x:int(x)**2, str(num))) slow, fast = n, next_num(n) while slow != fast and fast != 1: slow = next_num(slow) fast = next_num(next_num(fast)) return fast == 1 or not slow == fast Reference Algorithm&#xFF1A; Floyd&apos;s cycle detection What we need to do in case we need the starting point of the loop ? - Once we know for sure that a loop is present. - Move the slowPointer to start of the list,(i.e headNode) and let fastPointer remain there at the meeting point - Now move both the pointers one node at a time - The point where both pointers will meet, is our required start of the loop. The algorithm uses O(&#x3BB; + &#x3BC;) operations of these types, and O(1) storage space. Detecting start of a loop in singly Linked List Floyd&apos;s Cycle detection algorithm | Determining the starting point of cycle Another solution class Solution: def isHappy(self, n: int) -&gt; bool: # let&apos;s try different n: # true (1) -&gt; 1 # false (2) -&gt; 4 -&gt; 16 -&gt; 37 -&gt; 58 -&gt; 89 -&gt; 145 -&gt; 42 -&gt; 20 -&gt; 4 # false (3) -&gt; 9 -&gt; 81 -&gt; 65 -&gt; 61 -&gt; 37 (look at 2) # false (4) -&gt; (look at 2) # false (5) -&gt; 25 -&gt; 29 -&gt; 85 -&gt; 89 (look at 2) # false (6) -&gt; 36 -&gt; 45 -&gt; 41 -&gt; 17 -&gt; 50 -&gt; 25 (look at 5) # true (7) -&gt; 49 -&gt; 97 -&gt; 10 # false (8) -&gt; 64 -&gt; 52 -&gt; 29 (look at 5) # false (9) -&gt; 9 -&gt; 81 -&gt; 65 (look at 3) # # All other n &gt;= 10, while computing will become [1-9], # So there are two cases 1 and 7 which are true. # # Notice, that all falses has the same path as 2 (loop). counting = 0 num = n while True: counting = 0 for str_num in str(num): counting = counting + pow(int(str_num), 2) if counting &gt;= 1 and counting &lt;=9: if counting == 1 or counting == 7: return True else: return False else: num = counting Group Anagrams Given an array of strings, group anagrams together. Example: Input: [&quot;eat&quot;, &quot;tea&quot;, &quot;tan&quot;, &quot;ate&quot;, &quot;nat&quot;, &quot;bat&quot;], Output: [ [&quot;ate&quot;,&quot;eat&quot;,&quot;tea&quot;], [&quot;nat&quot;,&quot;tan&quot;], [&quot;bat&quot;] ] My solution&#xFF08;bad&#xFF09; class Solution: def groupAnagrams(self, strs: List[str]) -&gt; List[List[str]]: group_list = [] group_list.append([strs[0]]) for i in range(1, len(strs)): sorted_str = sorted(strs[i]) for j in range(0, len(group_list)): sorted_comp_str = sorted(group_list[j][0]) if sorted_str == sorted_comp_str: group_list[j].append(strs[i]) break if j == len(group_list) - 1: group_list.append([strs[i]]) break return group_list Result: Time Limit Exceeded Summary &#x8FD9;&#x4E2A;&#x89E3;&#x6CD5;&#x770B;&#x8D77;&#x6765;&#x6CA1;&#x4EC0;&#x4E48;&#x6BDB;&#x75C5;&#xFF0C;&#x5982;&#x679C;strs&#x957F;&#x5EA6;&#x5F88;&#x5C0F;&#xFF0C;&#x4E5F;&#x80FD;&#x6B63;&#x5E38;&#x5DE5;&#x4F5C;&#xFF0C;&#x4F46;&#x662F;&#x5F53;&#x5B57;&#x7B26;&#x4E32;&#x6570;&#x7EC4;strs&#x957F;&#x5EA6;&#x7279;&#x522B;&#x5927;&#x65F6;&#xFF0C; &#x6BDB;&#x75C5;&#x5C31;&#x66B4;&#x9732;&#x51FA;&#x6765;&#x4E86;&#xFF0C;&#x901F;&#x5EA6;&#x5F88;&#x6162;&#xFF0C;&#x6548;&#x7387;&#x4F4E;&#xFF0C;&#x4F1A;&#x51FA;&#x73B0;&#x8D85;&#x65F6;&#xFF08;Time Limit Exceeded&#xFF09;&#x672A;&#x5B8C;&#x6210;&#x7684;&#x60C5;&#x51B5;&#x3002; Nice solution with dictionary and tuple class Solution: def groupAnagrams(self, strs: List[str]) -&gt; List[List[str]]: # create a null dictionary group_list = {} for s in strs: # sort the string&apos;s letters and save as a tuple key = tuple(sorted(s)) # search dictionary with the str&apos;s tuple and save the new value group_list[key] = group_list.get(key, []) + [s] return group_list.values() Summary Tuple can be used for the dictionary&apos;s key. wow~ Dictionary can speed up the search. Maximum Subarray Given an integer array nums, find the contiguous subarray (containing at least one number) which has the largest sum and return its sum. Example: Input: [-2,1,-3,4,-1,2,1,-5,4], Output: 6 Explanation: [4,-1,2,1] has the largest sum = 6. Follow up: If you have figured out the O(n) solution, try coding another solution using the divide and conquer approach, which is more subtle. Solution &#x6838;&#x5FC3;&#x601D;&#x8DEF;&#xFF1A; &#x5F53;sum&lt;0&#x65F6;&#xFF0C;sum+x&#x4E00;&#x5B9A;&#x6BD4;x&#x5C0F;&#xFF0C;&#x6545;&#x5F53;sum&#x4E3A;&#x8D1F;&#x6570;&#x65F6;&#xFF0C;&#x53EF;&#x76F4;&#x63A5;&#x5C06;sum&#x7F6E;&#x96F6;&#x3002; class Solution: def maxSubArray(self, nums: List[int]) -&gt; int: sum_ = 0 max_sum = nums[0] for num in nums: sum_ = sum_ + num if sum_ &gt; max_sum: max_sum = sum_ sum_ = max(sum_, 0) return max_sum Best Time to Buy and Sell Stock II Say you have an array prices for which the ith element is the price of a given stock on day i. Design an algorithm to find the maximum profit. You may complete as many transactions as you like (i.e., buy one and sell one share of the stock multiple times). Note: You may not engage in multiple transactions at the same time (i.e., you must sell the stock before you buy again). Example 1: Input: [7,1,5,3,6,4] Output: 7 Explanation: Buy on day 2 (price = 1) and sell on day 3 (price = 5), profit = 5-1 = 4. Then buy on day 4 (price = 3) and sell on day 5 (price = 6), profit = 6-3 = 3. Solution &#x54C7;&#x8FD9;&#x4E2A;&#x9898;&#xFF0C;&#x771F;&#x7684;&#x8BA9;&#x6211;&#x6000;&#x7591;&#x81EA;&#x5DF1;&#x7684;&#x667A;&#x5546;&#x4E86;...&#x1F602;&#xFF0C;&#x6211;&#x521A;&#x5F00;&#x59CB;&#x7684;&#x7B54;&#x6848;&#x5199;&#x4E86;&#x597D;&#x591A;&#x884C;&#x4EE3;&#x7801;&#xFF0C;&#x7136;&#x540E;&#x53BB;&#x8BA8;&#x8BBA;&#x533A;&#x5B66;&#x4E60;&#x7684;&#x65F6;&#x5019;&#x53D1;&#x73B0;&#x5927;&#x5BB6;&#x90FD;&#x662F;&#x4EBA;&#x624D;&#x554A;...&#x6BD4;&#x5982;&#x4E0B;&#x9762;&#x8FD9;&#x4E2A;&#xFF1A; class Solution: def maxProfit(self, prices: List[int]) -&gt; int: max_profit = 0 for i in range(0, len(prices)-1): max_profit += max(prices[i+1]-prices[i], 0) return max_profit Mine class Solution: def maxProfit(self, prices: List[int]) -&gt; int: max_profit = 0 buy_i = 0 sell_i = 1 need_sell = 1 need_buy = 0 for i in range(1, len(prices)): if prices[sell_i] &lt; prices[buy_i]: need_buy = 1 need_sell = 0 else: need_buy = 0 need_sell = 1 if need_buy == 1: if prices[i] &lt; prices[buy_i]: buy_i = i if i &lt; len(prices) - 1: sell_i = i + 1 else: sell_i = i continue if need_sell == 1: if prices[i] &gt;= prices[sell_i]: sell_i = i if i == len(prices) - 1: max_profit += prices[sell_i] - prices[buy_i] else: max_profit += prices[sell_i] - prices[buy_i] buy_i = i if i &lt; len(prices) - 1: sell_i = i + 1 need_buy = 1 need_sell = 0 return max_profit emmmm...&#x6211;&#x9700;&#x8981;&#x53CD;&#x601D;&#x4E00;&#x4E0B;&#x1F61E; Counting Elements Given an integer array arr, count element x such that x + 1 is also in arr. If there&apos;re duplicates in arr, count them seperately. Examples: Input: arr = [1,2,3] Output: 2 Explanation: 1 and 2 are counted cause 2 and 3 are in arr. Input: arr = [1,1,3,3,5,5,7,7] Output: 0 Explanation: No numbers are counted, cause there&apos;s no 2, 4, 6, or 8 in arr. Input: arr = [1,3,2,3,5,0] Output: 3 Explanation: 0, 1 and 2 are counted cause 1, 2 and 3 are in arr. Solution Mine &#x8FD9;&#x4E2A;&#x9898;&#x6CA1;&#x6709;&#x627E;&#x5230;&#x5927;&#x5BB6;&#x7684;&#x8BA8;&#x8BBA;&#xFF0C;&#x6240;&#x4EE5;&#x6211;&#x4E5F;&#x4E0D;&#x77E5;&#x9053;&#x5176;&#x4ED6;&#x5C0F;&#x4F19;&#x4F34;&#x7684;&#x89E3;&#x9898;&#x601D;&#x8DEF;&#x662F;&#x4EC0;&#x4E48;&#x6837;&#x7684;&#xFF0C;&#x4F46;&#x662F;&#x6211;&#x603B;&#x89C9;&#x5F97;&#x5927;&#x5BB6;&#x4F1A;&#x6709;&#x66F4;&#x597D;&#x7684;&#x89E3;&#x51B3;&#x65B9;&#x6848;&#xFF0C;&#x6211;&#x8FD9;&#x8FB9;&#x5C31;&#x5148;po&#x51FA;&#x6211;&#x7684;&#x89E3;&#x6CD5;&#xFF0C;&#x6B22;&#x8FCE;&#x5927;&#x5BB6;&#x63D0;&#x4F9B;&#x81EA;&#x5DF1;&#x7684;&#x601D;&#x8DEF;&#x548C;&#x5EFA;&#x8BAE;&#x3002; &#x601D;&#x8DEF;&#xFF1A; &#x73B0;&#x5C06;&#x6570;&#x7EC4;&#x6392;&#x5E8F;&#xFF0C;&#x7136;&#x540E;&#x901A;&#x8FC7;&#x4E24;&#x4E2A;&#x6307;&#x9488;&#xFF1A;pre&#x548C;cur&#x8FDB;&#x884C;&#x5BF9;&#x6BD4;&#xFF0C;&#x9700;&#x8981;&#x6CE8;&#x610F;&#x7684;&#x662F;&#x6570;&#x5B57;&#x76F8;&#x540C;&#x7684;&#x6570;&#x5E94;&#x8BE5;&#x540C;&#x65F6;&#x88AB;&#x8BA1;&#x6570;&#x6216;&#x90FD;&#x4E0D;&#x8BA1;&#x6570;&#x3002; class Solution: def countElements(self, arr: List[int]) -&gt; int: arr_sorted = sorted(arr) count = 0 # &#x6307;&#x5411;&#x5F53;&#x524D;&#x9700;&#x8981;&#x5224;&#x65AD;&#x662F;&#x5426;&#x80FD;&#x88AB;&#x8BA1;&#x6570;&#x7684;&#x6570; pre = 0 # &#x6307;&#x5411;&#x5F53;&#x524D;pre&#x540E;&#x9762;&#x7684;&#x6570;&#xFF0C;&#x7528;&#x4E8E;&#x5224;&#x65AD;pre&#x662F;&#x5426;&#x80FD;&#x88AB;&#x8BA1;&#x6570; cur = 1 # &#x5982;&#x679C;cur&#x6307;&#x5411;&#x7684;&#x6570;&#x7B49;&#x4E8E;pre&#x6307;&#x5411;&#x7684;&#x6570;&#xFF0C;&#x5219;&#x589E;&#x52A0;leave&#xFF0C; # &#x5982;&#x679C;pre&#x53EF;&#x4EE5;&#x88AB;&#x8BA1;&#x6570;&#xFF0C;&#x5219;&#x548C;pre&#x76F8;&#x7B49;&#x7684;&#x6570;&#x4E5F;&#x5E94;&#x8BE5;&#x88AB;&#x8BA1;&#x6570; leave = 1 # &#x5F53;pre&#x548C;cur&#x6307;&#x5411;&#x540C;&#x4E00;index&#x65F6;&#x505C;&#x6B62;&#x5FAA;&#x73AF; while pre^cur: sub = arr_sorted[cur] - arr_sorted[pre] if sub &lt;= 1: if sub == 1: count += leave pre = cur leave = 1 elif cur == len(arr)-1: break; else: leave +=1 else: pre = cur leave = 1 cur = min(cur+1, len(arr)-1) return count Summary &#x6211;&#x53D1;&#x73B0;&#x6211;&#x7684;&#x5199;&#x4F5C;&#x80FD;&#x529B;&#x771F;&#x7684;&#x597D;&#x5DEE;&#x554A;&#xFF0C;&#x6709;&#x7684;&#x65F6;&#x5019;&#x77E5;&#x9053;&#x600E;&#x4E48;&#x56DE;&#x4E8B;&#x5C31;&#x662F;&#x5199;&#x4E0D;&#x51FA;&#x6765;&#xFF0C;&#x6349;&#x6025;&#x3002;&#x3002;&#x3002;&#x5E0C;&#x671B;&#x770B;&#x5230;&#x7684;&#x5C0F;&#x4F19;&#x4F34;&#x4E0D;&#x8981;&#x4ECB;&#x610F;&#xFF0C;&#x6211;&#x5728;&#x52AA;&#x529B;&#xFF0C;&#x5E0C;&#x671B;&#x4EE5;&#x540E;&#x4F1A;&#x8D8A;&#x6765;&#x8D8A;&#x597D;&#xFF0C;&#x5509;&#x1F60C;&#xFF0C;&#x5BF9;&#x4E0D;&#x8D77;&#x9AD8;&#x4E2D;&#x8BED;&#x6587;&#x8001;&#x5E08;&#x4E00;&#x5BF9;&#x4E00;&#x7684;&#x8F85;&#x5BFC;&#x554A;&#x3002;&#x597D;&#x5566;&#xFF0C;&#x8FD9;&#x671F;&#x5C31;&#x66F4;&#x65B0;&#x5B8C;&#x4E86;&#x3002; &#x5BF9;&#x4E86;&#xFF0C;&#x6211;&#x662F;&#x51C6;&#x5907;&#x4E00;&#x6B21;&#x66F4;&#x65B0;&#x4E00;&#x5468;&#x7684;&#x5185;&#x5BB9;&#xFF0C;&#x7136;&#x540E;&#x53EF;&#x80FD;&#x60F3;&#x8D77;&#x6765;&#x5C31;&#x4F1A;&#x66F4;&#x65B0;&#x4E00;&#x90E8;&#x5206;&#x53D1;&#x5E03;&#x51FA;&#x6765;&#xFF0C;&#x5982;&#x679C;&#x6CA1;&#x66F4;&#x5B8C;&#x6700;&#x540E;&#x4F1A;&#x663E;&#x793A;Updating...&#x3002;&#x4E00;&#x8D77;&#x671F;&#x5F85;&#x7B2C;&#x4E8C;&#x671F;&#x5427;~&#x1F60A;","categories":[{"name":"Technology","slug":"Technology","permalink":"https://littlemeemoon.cn/categories/Technology/"},{"name":"Coding","slug":"Technology/Coding","permalink":"https://littlemeemoon.cn/categories/Technology/Coding/"},{"name":"Leetcode","slug":"Technology/Coding/Leetcode","permalink":"https://littlemeemoon.cn/categories/Technology/Coding/Leetcode/"}],"tags":[{"name":"Leetcode","slug":"Leetcode","permalink":"https://littlemeemoon.cn/tags/Leetcode/"},{"name":"Python","slug":"Python","permalink":"https://littlemeemoon.cn/tags/Python/"},{"name":"Algorithm","slug":"Algorithm","permalink":"https://littlemeemoon.cn/tags/Algorithm/"}],"keywords":[{"name":"Technology","slug":"Technology","permalink":"https://littlemeemoon.cn/categories/Technology/"},{"name":"Coding","slug":"Technology/Coding","permalink":"https://littlemeemoon.cn/categories/Technology/Coding/"},{"name":"Leetcode","slug":"Technology/Coding/Leetcode","permalink":"https://littlemeemoon.cn/categories/Technology/Coding/Leetcode/"}]},{"title":"Fraud Detection | Imbalanced data modeling","slug":"Technology/Machine-Learning/Credit Card Fraud Detection","date":"2020-03-21T13:53:06.000Z","updated":"2020-06-04T04:21:24.110Z","comments":true,"path":"2020/03/21/Technology/Machine-Learning/Credit Card Fraud Detection/","link":"","permalink":"https://littlemeemoon.cn/2020/03/21/Technology/Machine-Learning/Credit%20Card%20Fraud%20Detection/","excerpt":"","text":"LDA, QDA and LR for fraud detection | Imbalanced data modeling %matplotlib inline # import warnings filter from warnings import simplefilter # ignore all future warnings simplefilter(action=&apos;ignore&apos;, category=FutureWarning) prepare data import pandas as pd # load data default_data = pd.read_csv(&quot;data/Default.csv&quot;) # prepare data default_data.loc[default_data[&apos;default&apos;] == &apos;No&apos;, &quot;default&quot;] = 0 default_data.loc[default_data[&apos;default&apos;] == &apos;Yes&apos;, &quot;default&quot;] = 1 default_data.loc[default_data[&apos;student&apos;] == &apos;No&apos;, &quot;student&quot;] = 0 default_data.loc[default_data[&apos;student&apos;] == &apos;Yes&apos;, &quot;student&quot;] = 1 default_data.describe() .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } Unnamed: 0 default student balance income count 10000.00000 10000.000000 10000.000000 10000.000000 10000.000000 mean 5000.50000 0.033300 0.294400 835.374886 33516.981876 std 2886.89568 0.179428 0.455795 483.714985 13336.639563 min 1.00000 0.000000 0.000000 0.000000 771.967729 25% 2500.75000 0.000000 0.000000 481.731105 21340.462903 50% 5000.50000 0.000000 0.000000 823.636973 34552.644802 75% 7500.25000 0.000000 1.000000 1166.308386 43807.729272 max 10000.00000 1.000000 1.000000 2654.322576 73554.233495 split training and testing set from sklearn.model_selection import train_test_split # create features and target features = [&quot;balance&quot;, &quot;income&quot;] X = default_data[features] y = default_data.default # slipt data set into training and testing set train_X, test_X, train_y, test_y = train_test_split(X, y, train_size=0.7, random_state=1) import numpy as np import matplotlib as mpl from scipy import linalg from matplotlib import colors import matplotlib.pyplot as plt from sklearn.discriminant_analysis import LinearDiscriminantAnalysis, QuadraticDiscriminantAnalysis from sklearn.linear_model import LogisticRegression Plot function # set colormap cmap = colors.LinearSegmentedColormap( &apos;red_blue_classes&apos;, {&apos;red&apos;: [(0, 1, 1), (1, 0.7, 0.7)], &apos;green&apos;: [(0, 0.7, 0.7), (1, 0.7, 0.7)], &apos;blue&apos;: [(0, 0.7, 0.7), (1, 1, 1)]}) plt.cm.register_cmap(cmap=cmap) # Plot function def plot_data(model, X, y, y_pred): plt.ylabel(&apos;income&apos;) plt.xlabel(&apos;balance&apos;) tp = (y == y_pred) # True Positive tp0, tp1 = tp[y == 0], tp[y == 1] X0, X1 = X[y == 0], X[y == 1] X0_tp, X0_fp = X0[tp0], X0[~tp0] X1_tp, X1_fp = X1[tp1], X1[~tp1] # true class 0: dots, false class 0: x plt.scatter(X0_tp[&quot;balance&quot;], X0_tp[&quot;income&quot;], marker=&apos;.&apos;, color=&apos;red&apos;) plt.scatter(X0_fp[&quot;balance&quot;], X0_fp[&quot;income&quot;], marker=&apos;x&apos;, s=20, color=&apos;#990000&apos;) # dark red # true class 1: dots, false class 1: x plt.scatter(X1_tp[&quot;balance&quot;], X1_tp[&quot;income&quot;], marker=&apos;.&apos;, color=&apos;blue&apos;) plt.scatter(X1_fp[&quot;balance&quot;], X1_fp[&quot;income&quot;], marker=&apos;x&apos;, s=20, color=&apos;#000099&apos;) # dark blue # class 0 and 1 : all areas for decision boundary nx, ny = 200, 100 x_min, x_max = plt.xlim() y_min, y_max = plt.ylim() xx, yy = np.meshgrid(np.linspace(x_min, x_max, nx), np.linspace(y_min, y_max, ny)) Z = model.predict_proba(np.c_[xx.ravel(), yy.ravel()]) Z = Z[:, 1].reshape(xx.shape) plt.pcolormesh(xx, yy, Z, cmap=&apos;red_blue_classes&apos;, norm=colors.Normalize(0., 1.), zorder=0) # plot decision boundary plt.contour(xx, yy, Z, [0.5], linewidths=2., colors=&apos;white&apos;) plt.axis(&apos;tight&apos;) plt.tight_layout() plt.subplots_adjust(top=0.92) plt.show() Linear Discriminant Analysis # Linear Discriminant Analysis plt.figure(figsize=(6, 7), facecolor=&apos;white&apos;) plt.title(&apos;Linear Discriminant Analysis&apos;, y=1, fontsize=15) lda = LinearDiscriminantAnalysis(solver=&quot;svd&quot;, store_covariance=True) y_pred = lda.fit(train_X, train_y).predict(test_X) plot_data(lda, test_X, test_y, y_pred) png Quadratic Discriminant Analysis # Quadratic Discriminant Analysis plt.figure(figsize=(6, 7), facecolor=&apos;white&apos;) plt.title(&apos;Quadratic Discriminant Analysis&apos;, y=1, fontsize=15) qda = QuadraticDiscriminantAnalysis(store_covariance=True) y_pred = qda.fit(train_X, train_y).predict(test_X) plot_data(qda, test_X, test_y, y_pred) png Use LogisticRegression directly to model the data If I use this data directly to feed the LogisticRegression model, the model will prefer to predict all as 0 for a high accuracy of 0 prediction. print(default_data.default.value_counts(dropna = False)) print(&quot;The mean of default: &quot;, default_data.default.mean()) 0 9667 1 333 Name: default, dtype: int64 The mean of default: 0.0333 NOTE: As it showing above: the provided data with very low proportion of positive signals. Conclusion: The provided data is imbalanced ! Solution: usually for imbalanced data, there are some solutions: 1. Collect more data 2. Down-Sampling or Over-Sampling to get balanced samples 3. Change the Thresholds to adjust the prediction 4. Assign class weights for the low rate class from sklearn.metrics import confusion_matrix, auc, roc_curve, roc_auc_score, recall_score, precision_recall_curve from sklearn.metrics import make_scorer, precision_score from sklearn.model_selection import GridSearchCV # Xtrain, Xtest, ytrain, ytest = train_test_split(X, y, test_size = .33, stratify = y) logitreg_parameters = {&apos;C&apos;: np.power(10.0, np.arange(-3, 3))} logitreg = LogisticRegression(verbose = 3, warm_start = True) logitreg_grid = GridSearchCV(logitreg, param_grid = logitreg_parameters, scoring = &apos;roc_auc&apos;, n_jobs = 1) logitreg_grid.fit(train_X, train_y) GridSearchCV(cv=None, error_score=nan, estimator=LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True, intercept_scaling=1, l1_ratio=None, max_iter=100, multi_class=&apos;auto&apos;, n_jobs=None, penalty=&apos;l2&apos;, random_state=None, solver=&apos;lbfgs&apos;, tol=0.0001, verbose=3, warm_start=True), iid=&apos;deprecated&apos;, n_jobs=1, param_grid={&apos;C&apos;: array([1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02])}, pre_dispatch=&apos;2*n_jobs&apos;, refit=True, return_train_score=False, scoring=&apos;roc_auc&apos;, verbose=0) # draw decision boundary with LogisticRegression directly plt.figure(figsize=(6, 7), facecolor=&apos;white&apos;) plt.title(&apos;Logistic Regression directly&apos;, y=1, fontsize=15) y_pred = logitreg_grid.predict(test_X) splot = plot_data(logitreg_grid, test_X, test_y, y_pred) png # on OVER-Sampled TRAINing data print(&quot;\\n The recall score on Training data is:&quot;, recall_score(train_y, logitreg_grid.predict(train_X))) # 0.32 print(&quot;\\n The precision score on Training data is:&quot;, precision_score(train_y, logitreg_grid.predict(train_X))) # 0.74 # on the separated TEST data print(&quot;\\n Thre recall score on Test data is:&quot;, recall_score(test_y, logitreg_grid.predict(test_X))) # 0.32 print(&quot;\\n Thre precision score on Test data is:&quot;, precision_score(test_y, logitreg_grid.predict(test_X))) # 0.75 print(&quot;\\n Thre Confusion Matrix on Test data is:&quot;, confusion_matrix(test_y, logitreg_grid.predict(test_X))) # [[3178 12][ 74 36]] The recall score on Training data is: 0.32231404958677684 The precision score on Training data is: 0.7222222222222222 Thre recall score on Test data is: 0.3626373626373626 Thre precision score on Test data is: 0.673469387755102 Thre Confusion Matrix on Test data is: [[2893 16] [ 58 33]] Conclusions: From the output above, on the training data, the recall score is 0.32 which means 32 over 100 of the True positive conditions are predicted correctly. And 74 over 100 of the predicted positives are True Positive. On the Test data, the model performance metric evalued by recall or precision are close to the Training data. There is a precision score of 0.81 on the Test data, which means 81 out of 100 predicted positives are True positives. From Confusion Matrix, 36 of 110 True Positives are predicted as positives. And of all 48 predicted as positive, 36 of them are True positives. Change the Thresholds plot roc curve def plot_roc(new_thresholds, logitreg_grid): y_train_pred_probas = logitreg_grid.predict_proba(train_X)[:, 1] # prob of predict as 1 fpr, tpr, thresholds = roc_curve(train_y, y_train_pred_probas) # precision_recall_curve roc = pd.DataFrame({&apos;FPR&apos;:fpr, &apos;TPR&apos;:tpr, &apos;Thresholds&apos;:thresholds}) plt.figure() plt.title(&apos;ROC Curve&apos;, y = 1, fontsize = 15) plt.plot(roc.FPR, roc.TPR) plt.axvline(new_thresholds, color = &apos;#00C851&apos;, linestyle = &apos;--&apos;) plt.xlabel(&quot;FPR&quot;) plt.ylabel(&quot;TPR&quot;) plt.show() new_threshold = 0.1 # 0.5 is the default value plot_roc(new_threshold, logitreg_grid) png By default, the threshold is 0.5. Since the recall score is low, I&apos;m trying to lower the threshold to get more predicted as Positive. At the same time, more True Negative data will be falsely predicted as Positive. So the Precision score will be lower. y_test_pred_probas = logitreg_grid.predict_proba(test_X)[:, 1] y_test_pred = (y_test_pred_probas &gt;= new_threshold).astype(int) print(&quot;After change threshold to 0.1, the recall socre on Test data is:&quot;) print(recall_score(test_y, y_test_pred)) # 0.736 print(&quot;After change threshold to 0.1, the precision socre on Test data is:&quot;) print(precision_score(test_y, y_test_pred)) # 0.301 print(&quot;After change threshold to 0.1, the Confusion Matrix on Test data is:&quot;) print(confusion_matrix(test_y, y_test_pred)) # [[3002 188][ 29 81]] After change threshold to 0.1, the recall socre on Test data is: 0.7142857142857143 After change threshold to 0.1, the precision socre on Test data is: 0.25 After change threshold to 0.1, the Confusion Matrix on Test data is: [[2714 195] [ 26 65]] Create Over-sampling data and Fit the model oversample_ratio = sum(train_y == 0) / sum(train_y == 1) # size to repeat y == 1 # repeat the positive data for X and y y_train_pos_oversample = pd.concat([train_y[train_y==1]] * int(oversample_ratio), axis = 0) X_train_pos_oversample = pd.concat([train_X.loc[train_y==1, :]] * int(oversample_ratio), axis = 0) # concat the repeated data with the original data together y_train_oversample = pd.concat([train_y, y_train_pos_oversample], axis = 0).reset_index(drop = True) X_train_oversample = pd.concat([train_X, X_train_pos_oversample], axis = 0).reset_index(drop = True) print(y_train_oversample.value_counts(dropna = False, normalize = True)) logitreg_parameters = {&apos;C&apos;: np.power(10.0, np.arange(-3, 3))} logitreg = LogisticRegression(verbose = 3, warm_start = True) logitreg_grid = GridSearchCV(logitreg, param_grid = logitreg_parameters, scoring = &apos;roc_auc&apos;, n_jobs = 1) logitreg_grid.fit(X_train_oversample, y_train_oversample) 1 0.500665 0 0.499335 Name: default, dtype: float64 GridSearchCV(cv=None, error_score=nan, estimator=LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True, intercept_scaling=1, l1_ratio=None, max_iter=100, multi_class=&apos;auto&apos;, n_jobs=None, penalty=&apos;l2&apos;, random_state=None, solver=&apos;lbfgs&apos;, tol=0.0001, verbose=3, warm_start=True), iid=&apos;deprecated&apos;, n_jobs=1, param_grid={&apos;C&apos;: array([1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02])}, pre_dispatch=&apos;2*n_jobs&apos;, refit=True, return_train_score=False, scoring=&apos;roc_auc&apos;, verbose=0) # Logistic Regression with Over-sampling plt.figure(figsize=(6, 7), facecolor=&apos;white&apos;) plt.title(&apos;Logistic Regression with Over-sampling&apos;, y=1, fontsize=15) y_pred = logitreg_grid.predict(test_X) plot_data(logitreg_grid, test_X, test_y, y_pred) png # on OVER-Sampled TRAINing data print(&quot;After Over-Sampling, the recall score on Training data is&quot;) print(recall_score(y_train_oversample, logitreg_grid.predict(X_train_oversample))) # 0.865 print(&quot;After Over-Sampling, the precision score on Training data is&quot;) print(precision_score(y_train_oversample, logitreg_grid.predict(X_train_oversample))) # 0.727 # on the TESTing data print(&quot;After Over-Sampling, the recall score on Test data is&quot;) print(recall_score(test_y, logitreg_grid.predict(test_X))) # 0.854 print(&quot;After Over-Sampling, the precision score on Test data is&quot;) print(precision_score(test_y, logitreg_grid.predict(test_X))) # 0.080 print(&quot;After Over-Sampling, the Confusion Matrix on Test data is&quot;) print(confusion_matrix(test_y, logitreg_grid.predict(test_X))) # [[2113 1077][ 16 94]] After Over-Sampling, the recall score on Training data is 0.8884297520661157 After Over-Sampling, the precision score on Training data is 0.8717057631045467 After Over-Sampling, the recall score on Test data is 0.8791208791208791 After Over-Sampling, the precision score on Test data is 0.17094017094017094 After Over-Sampling, the Confusion Matrix on Test data is [[2521 388] [ 11 80]] Conclusion: From the output above, on the training data, the recall score is 0.865 which means 86.5 over 100 of the True conditions are predicted correctly. And 85.4 over 100 of the predicted positives are really positive. However, there is only a precision score of 0.080 on the Test data, which means only 8 out of 100 predicted positives are real positives. From Confusion Matrix, 94 of 110 True Positives are predicted as positives. However, the model predicted 1077 Negative data as Positive. That is, this model has pretty strong over-fitting. Change the Thresholds new_threshold = 0.2 plot_roc(new_threshold, logitreg_grid) png y_test_pred_probas = logitreg_grid.predict_proba(test_X)[:, 1] y_test_pred = (y_test_pred_probas &gt;= new_threshold).astype(int) print(&quot;After change threshold to 0.2, the recall socre on Test data is:&quot;) print(recall_score(test_y, y_test_pred)) # 0.990 print(&quot;After change threshold to 0.2, the precision socre on Test data is:&quot;) print(precision_score(test_y, y_test_pred)) # 0.047 print(&quot;After change threshold to 0.2, the Confusion Matrix on Test data is:&quot;) print(confusion_matrix(test_y, y_test_pred)) # [[ 1013 2177][ 1 109]] After change threshold to 0.2, the recall socre on Test data is: 0.9340659340659341 After change threshold to 0.2, the precision socre on Test data is: 0.10023584905660378 After change threshold to 0.2, the Confusion Matrix on Test data is: [[2146 763] [ 6 85]] Conclusion: After over-sampling, the model will have higher recall rate. That is, the model will work better on detect the Frauds from True Frauds. The price is the lower precision rate. Logistic Regression with class_weight Rather than over-sampling, we can assign more weights to the lower rate class. we can write out the Likelihood function for Logistic Regression, the Over-Sampling and the assigning more Weights will be equivalent. positive_weight = sum(train_y == 0) / sum(train_y == 1) # size to repeat y == 1 logitreg_parameters = {&apos;C&apos;: np.power(10.0, np.arange(-3, 3))} logitreg = LogisticRegression(class_weight = {0 : 1, 1 : positive_weight}, verbose = 3, warm_start = True) logitreg_grid = GridSearchCV(logitreg, param_grid = logitreg_parameters, scoring = &apos;roc_auc&apos;, n_jobs = 1) logitreg_grid.fit(train_X, train_y) GridSearchCV(cv=None, error_score=nan, estimator=LogisticRegression(C=1.0, class_weight={0: 1, 1: 27.925619834710744}, dual=False, fit_intercept=True, intercept_scaling=1, l1_ratio=None, max_iter=100, multi_class=&apos;auto&apos;, n_jobs=None, penalty=&apos;l2&apos;, random_state=None, solver=&apos;lbfgs&apos;, tol=0.0001, verbose=3, warm_start=True), iid=&apos;deprecated&apos;, n_jobs=1, param_grid={&apos;C&apos;: array([1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02])}, pre_dispatch=&apos;2*n_jobs&apos;, refit=True, return_train_score=False, scoring=&apos;roc_auc&apos;, verbose=0) # Logistic Regression with class_weight plt.figure(figsize=(6, 7), facecolor=&apos;white&apos;) plt.title(&apos;Logistic Regression&apos;, y=1, fontsize=15) y_pred = logitreg_grid.predict(test_X) plot_data(logitreg_grid, test_X, test_y, y_pred) png print(&quot;After assign class_weight, the recall score on Training data is&quot;) print(recall_score(y_train_oversample, logitreg_grid.predict(X_train_oversample))) # 0.856 print(&quot;After assign class_weight, the precision score on Training data is&quot;) print(precision_score(y_train_oversample, logitreg_grid.predict(X_train_oversample))) # 0.729 # on the separated TEST data print(&quot;After assign class_weight, the recall score on Test data is&quot;) print(recall_score(test_y, logitreg_grid.predict(test_X))) # 0.845 print(&quot;After assign class_weight, the precision score on Test data is&quot;) print(precision_score(test_y, logitreg_grid.predict(test_X))) # 0.081 print(&quot;After assign class_weight, the Confusion Matrix on Test data is&quot;) print(confusion_matrix(test_y, logitreg_grid.predict(test_X))) # [[2135 1055] [ 17 93]] print(&quot;After assign class_weight, the ROC AUC Score on Test data is&quot;) print(roc_auc_score(test_y, logitreg_grid.predict(test_X))) # 0.757 After assign class_weight, the recall score on Training data is 0.859504132231405 After assign class_weight, the precision score on Training data is 0.7171530599679843 After assign class_weight, the recall score on Test data is 0.8791208791208791 After assign class_weight, the precision score on Test data is 0.075046904315197 After assign class_weight, the Confusion Matrix on Test data is [[1923 986] [ 11 80]] After assign class_weight, the ROC AUC Score on Test data is 0.7700863934965 Conclusion: If I set up the class weight for the positive as the ratio of non-Fault / Fault, I will get the result close to the over-sampling. So, in summary: This specific data is about fraud detection. So the model should focus on to find the frauds to avoid potential loss for the bank. That is, we focus on recall rate. Conclusion If we use the imbalanced data directly, we will get low performance model since the model prefer to predict to the class with dominated frequency class. The recall rate is 0.31. That is, only 31% of the frauds can be detected by this model. To fix that, one way is to do over-sampling or down-sampling. If we use over-sampling, the model performance will be improved a lot. For this specific case, the recall rate on the independent test set will be improved from 0.31 to 0.87 Another way to improve the model performance is to assign more weights to the low frequency class. Generally speaking, for Logistic Regression, assigning weights is similar to over-sampling, from the likelihood function perspective. The final output results are close too as demonstrated above. Reference Credit Card Fraud Detection / Imbalanced data modeling - Part I: Logistic Regression Credit Fraud || Dealing with Imbalanced Datasets","categories":[{"name":"Technology","slug":"Technology","permalink":"https://littlemeemoon.cn/categories/Technology/"},{"name":"Machine Learning","slug":"Technology/Machine-Learning","permalink":"https://littlemeemoon.cn/categories/Technology/Machine-Learning/"},{"name":"Imbalanced Data Modeling","slug":"Technology/Machine-Learning/Imbalanced-Data-Modeling","permalink":"https://littlemeemoon.cn/categories/Technology/Machine-Learning/Imbalanced-Data-Modeling/"}],"tags":[{"name":"LDA","slug":"LDA","permalink":"https://littlemeemoon.cn/tags/LDA/"},{"name":"QDA","slug":"QDA","permalink":"https://littlemeemoon.cn/tags/QDA/"},{"name":"LR","slug":"LR","permalink":"https://littlemeemoon.cn/tags/LR/"},{"name":"Imbalanced Data Modeling","slug":"Imbalanced-Data-Modeling","permalink":"https://littlemeemoon.cn/tags/Imbalanced-Data-Modeling/"},{"name":"Machine Learning","slug":"Machine-Learning","permalink":"https://littlemeemoon.cn/tags/Machine-Learning/"},{"name":"Classify","slug":"Classify","permalink":"https://littlemeemoon.cn/tags/Classify/"}],"keywords":[{"name":"Technology","slug":"Technology","permalink":"https://littlemeemoon.cn/categories/Technology/"},{"name":"Machine Learning","slug":"Technology/Machine-Learning","permalink":"https://littlemeemoon.cn/categories/Technology/Machine-Learning/"},{"name":"Imbalanced Data Modeling","slug":"Technology/Machine-Learning/Imbalanced-Data-Modeling","permalink":"https://littlemeemoon.cn/categories/Technology/Machine-Learning/Imbalanced-Data-Modeling/"}]},{"title":"Hair Thickness | part 1 | Evalution of hair and scalp condition based on microscopy image analysis","slug":"Technology/Paper-Smash/Evalution of hair and scalp condition based on microscopy image analysis  | Hair Thickness - 1","date":"2019-12-29T13:21:24.000Z","updated":"2020-06-04T04:20:03.415Z","comments":true,"path":"2019/12/29/Technology/Paper-Smash/Evalution of hair and scalp condition based on microscopy image analysis  | Hair Thickness - 1/","link":"","permalink":"https://littlemeemoon.cn/2019/12/29/Technology/Paper-Smash/Evalution%20of%20hair%20and%20scalp%20condition%20based%20on%20microscopy%20image%20analysis%20%20|%20Hair%20Thickness%20-%201/","excerpt":"","text":"Paper: Evalution of hair and scalp condition based on microscopy image analysis &#x6458;&#x8981;&#x7FFB;&#x8BD1;&#xFF1A;&#x7531;&#x4E8E;IT&#x6280;&#x672F;&#x7684;&#x5FEB;&#x901F;&#x90E8;&#x7F72;, &#x533B;&#x7597;&#x4FDD;&#x5065;&#x670D;&#x52A1;&#x8FDB;&#x5165;&#x4E86;&#x4E00;&#x4E2A;&#x65B0;&#x65F6;&#x4EE3;&#x3002;&#x8BF8;&#x5982;&#x5FC3;&#x810F;&#x76D1;&#x62A4;&#x4E4B;&#x7C7B;&#x7684;&#x67D0;&#x4E9B;&#x670D;&#x52A1;&#x5BF9;&#x4E8E;&#x751F;&#x547D;&#x81F3;&#x5173;&#x91CD;&#x8981;, &#x5E76;&#x6709;&#x52A9;&#x4E8E;&#x633D;&#x6551;&#x751F;&#x547D;&#x3002;&#x53E6;&#x4E00;&#x65B9;&#x9762;, &#x76D1;&#x6D4B;&#x8131;&#x53D1;&#x662F;&#x53E6;&#x4E00;&#x79CD;&#x6709;&#x8DA3;&#x7684;&#x4FDD;&#x5065;&#x670D;&#x52A1;&#x3002;&#x5C3D;&#x7BA1;&#x8FD9;&#x5BF9;&#x751F;&#x6D3B;&#x5E76;&#x4E0D;&#x91CD;&#x8981;, &#x4F46;&#x4EBA;&#x4EEC;&#x8FD8;&#x662F;&#x4F1A;&#x975E;&#x5E38;&#x6CE8;&#x610F;&#x81EA;&#x5DF1;&#x7684;&#x5934;&#x53D1;&#x72B6;&#x51B5;&#x3002;&#x8131;&#x53D1;&#x662F;&#x4E0E;&#x5934;&#x53D1;&#x72B6;&#x51B5;&#x6709;&#x5173;&#x7684;&#x4E3B;&#x8981;&#x95EE;&#x9898;&#x4E4B;&#x4E00;, &#x56E0;&#x4E3A;&#x8FC7;&#x591A;&#x548C;&#x65E0;&#x610F;&#x7684;&#x8131;&#x53D1;&#x53EF;&#x80FD;&#x5BFC;&#x81F4;&#x79C3;&#x5934;&#x3002;&#x53EF;&#x4EE5;&#x5728;&#x62A4;&#x53D1;&#x5E97;&#x4E13;&#x4E1A;&#x8FDB;&#x884C;&#x62A4;&#x53D1;, &#x4F46;&#x662F;&#x8FD9;&#x9700;&#x8981;&#x5F88;&#x591A;&#x65F6;&#x95F4;&#x548C;&#x6210;&#x672C;&#x3002;&#x6700;&#x8FD1;, &#x7531;&#x4E8E;&#x5EC9;&#x4EF7;&#x7684;&#x667A;&#x80FD;&#x8BBE;&#x5907;, &#x5BF9;&#x5934;&#x53D1;&#x72B6;&#x51B5;&#x7684;&#x81EA;&#x6211;&#x8BCA;&#x65AD;&#x5DF2;&#x6210;&#x4E3A;&#x53EF;&#x80FD;&#x3002;&#x4ECD;&#x7136;&#x5F88;&#x5C11;&#x5F00;&#x53D1;&#x7528;&#x4E8E;&#x8BC4;&#x4F30;&#x5934;&#x53D1;&#x72B6;&#x51B5;&#x7684;&#x5E94;&#x7528;&#x3002;&#x5728;&#x672C;&#x6587;&#x4E2D;, &#x6211;&#x4EEC;&#x63D0;&#x51FA;&#x4E86;&#x4E00;&#x79CD;&#x65B0;&#x65B9;&#x6848;, &#x901A;&#x8FC7;&#x4ECE;&#x663E;&#x5FAE;&#x955C;&#x56FE;&#x50CF;&#x4E2D;&#x63D0;&#x53D6;&#x5404;&#x79CD;&#x7279;&#x5F81;&#x6765;&#x8BC4;&#x4F30;&#x5934;&#x53D1;&#x548C;&#x5934;&#x76AE;&#x7684;&#x72B6;&#x51B5;&#x3002;&#x5176;&#x7279;&#x5F81;&#x5305;&#x62EC;&#x5934;&#x53D1;&#x7684;&#x539A;&#x5EA6;, &#x5934;&#x53D1;&#x7684;&#x5BC6;&#x5EA6;&#x548C;&#x5934;&#x76AE;&#x7684;&#x6591;&#x70B9;&#x3002;&#x901A;&#x8FC7;&#x5BF9;&#x539F;&#x578B;&#x7CFB;&#x7EDF;&#x8FDB;&#x884C;&#x5E7F;&#x6CDB;&#x7684;&#x5B9E;&#x9A8C;, &#x6211;&#x4EEC;&#x8BC1;&#x660E;&#x4E86;&#x8BE5;&#x65B9;&#x6848;&#x7684;&#x6709;&#x6548;&#x6027;&#x3002; &#x4E3A;&#x4E86;&#x5206;&#x6790;&#x5934;&#x76AE;&#x56FE;&#x50CF;, &#x5E94;&#x8BE5;&#x5C06;&#x5934;&#x53D1;&#x548C;&#x5934;&#x76AE;&#x5F7C;&#x6B64;&#x5206;&#x5F00;&#x3002;&#x4E24;&#x8005;&#x4E4B;&#x95F4;&#x6700;&#x660E;&#x663E;&#x7684;&#x533A;&#x522B;&#x662F;&#x5B83;&#x4EEC;&#x7684;&#x989C;&#x8272;&#x3002;&#x5934;&#x76AE;&#x76F8;&#x5BF9;&#x660E;&#x4EAE;, &#x5934;&#x53D1;&#x76F8;&#x5BF9;&#x6DF1;&#x8272;&#x3002;&#x56E0;&#x6B64;, &#x5728;&#x8BB8;&#x591A;&#x7814;&#x7A76;&#x4E2D;, &#x6839;&#x636E;&#x989C;&#x8272;&#x5BF9;&#x5934;&#x53D1;&#x548C;&#x5934;&#x76AE;&#x533A;&#x57DF;&#x8FDB;&#x884C;&#x5206;&#x7C7B;, &#x5E76;&#x6839;&#x636E;&#x8FD9;&#x79CD;&#x5206;&#x79BB;&#x8FDB;&#x884C;&#x56FE;&#x50CF;&#x5206;&#x6790;&#x3002; ## Overall steps for feature extraction Pre-processing &#x8BE5;&#x8BBA;&#x6587;&#x4E2D;&#x6240;&#x63D0;&#x5230;&#x7684;&#x56FE;&#x7247;&#x9884;&#x5904;&#x7406;&#x65B9;&#x6CD5;&#x548C;&#x201C;An Unsupervised Hair Segmentation and Counting System in Microscopy Images&#x201D;&#x4E2D;&#x76F8;&#x4F3C;, &#x5177;&#x4F53;&#x53EF;&#x53C2;&#x8003;&#xFF1A;&#x8BBA;&#x6587;&#x89E3;&#x8BFB; - An Unsupervised Hair Segmentation and Counting System in Microscopy Images &#x4E4B;&#x5934;&#x53D1;&#x8BA1;&#x6570;&#x95EE;&#x9898;&#x3002; 1. &#x88C1;&#x5207;&#x56FE;&#x50CF; 2. &#x56FE;&#x50CF;&#x589E;&#x5F3A;: &#x4F7F;&#x7528;Contrast stretching&#x65B9;&#x6CD5;, &#x589E;&#x52A0;&#x56FE;&#x50CF;&#x7684;&#x5BF9;&#x6BD4;&#x5EA6; 3. Morphological opening&#xFF1A;&#x53BB;&#x9664;&#x6CB9;&#x6027;&#x548C;&#x6E7F;&#x6DA6;&#x7684;&#x5934;&#x53D1;&#x5728;&#x5176;&#x663E;&#x5FAE;&#x955C;&#x56FE;&#x50CF;&#x4E2D;&#x5F62;&#x6210;&#x7684;&#x4EAE;&#x70B9; 4. &#x4E8C;&#x503C;&#x5316;&#xFF1A;&#x7ECF;&#x8FC7;&#x4E0A;&#x8FF0;&#x9884;&#x5904;&#x7406;&#x540E;, &#x5C06;&#x6240;&#x5F97;&#x56FE;&#x50CF;&#x8F6C;&#x6362;&#x4E3A;&#x7070;&#x5EA6;&#x56FE;&#x50CF;, &#x7136;&#x540E;&#x6839;&#x636E;Otsu&#x9608;&#x503C;&#x8F6C;&#x6362;&#x4E3A;&#x4E8C;&#x8FDB;&#x5236;&#x56FE;&#x50CF;&#x3002; &#x5728;&#x4E8C;&#x503C;&#x56FE;&#x50CF;&#x4E2D;, &#x201C; 0&#x201D;&#x548C;&#x201C; 1&#x201D;&#x5206;&#x522B;&#x8868;&#x793A;&#x5934;&#x53D1;&#x50CF;&#x7D20;&#x548C;&#x5934;&#x76AE;&#x50CF;&#x7D20;&#x3002; hair/scalp image analysis &#x5934;&#x53D1;&#x68C0;&#x6D4B; &#x6280;&#x672F; &#x4F7F;&#x7528;Canny&#x8FB9;&#x7F18;&#x68C0;&#x6D4B;&#x7B97;&#x6CD5;&#x4ECE;&#x4E8C;&#x8FDB;&#x5236;&#x56FE;&#x50CF;&#x4E2D;&#x83B7;&#x53D6;&#x6BDB;&#x53D1;&#x8F6E;&#x5ED3;&#x3002; &#x7ED3;&#x679C; - &#x56FE;2&#x663E;&#x793A;&#x4E86;&#x68C0;&#x6D4B;&#x548C;&#x5EFA;&#x6A21;&#x5934;&#x53D1;&#x7684;&#x6240;&#x6709;&#x6B65;&#x9AA4;&#x3002;&#x5BF9;&#x4E8E;&#x56FE;2&#xFF08;a&#xFF09;&#x4E2D;&#x7684;&#x539F;&#x59CB;&#x663E;&#x5FAE;&#x955C;&#x56FE;&#x50CF;, &#x6211;&#x4EEC;&#x53EF;&#x4EE5;&#x8BA1;&#x7B97;&#x51FA;&#x5934;&#x53D1;&#x8F6E;&#x5ED3;&#x548C;&#x9AA8;&#x9ABC;&#x3002; - &#x901A;&#x8FC7;&#x4F7F;&#x7528;&#x4E8C;&#x8FDB;&#x5236;&#x56FE;&#x50CF;&#x4E0A;&#x7684;&#x7A00;&#x758F;&#x8FD0;&#x7B97;&#xFF08;Thinning operation&#xFF09; &#x6765;&#x8BA1;&#x7B97;&#x5934;&#x53D1;&#x9AA8;&#x67B6;&#x3002;Thinning&#x662F;&#x4E00;&#x79CD;&#x5F62;&#x6001;&#x5B66;&#x8FD0;&#x7B97;, &#x53EF;&#x53BB;&#x9664;&#x6574;&#x4E2A;&#x4E8C;&#x8FDB;&#x5236;&#x56FE;&#x50CF;&#x4E2D;&#x7684;&#x524D;&#x666F;&#x3002; - &#x56FE;2&#xFF08;d&#xFF09;&#x663E;&#x793A;&#x4E86;&#x901A;&#x8FC7;&#x53E0;&#x52A0;&#x5934;&#x53D1;&#x8F6E;&#x5ED3;&#x548C;&#x9AA8;&#x9ABC;&#x5F97;&#x5230;&#x7684;&#x6700;&#x7EC8;&#x56FE;&#x50CF;&#x3002; &#x5934;&#x53D1;&#x539A;&#x5EA6;&#x8BA1;&#x7B97; &#x5934;&#x53D1;&#x539A;&#x5EA6;&#x53EF;&#x4EE5;&#x901A;&#x8FC7;&#x4E0E;&#x5934;&#x53D1;&#x5782;&#x76F4;&#x7EBF;&#x7684;&#x957F;&#x5EA6;&#x6765;&#x5B9A;&#x4E49;&#x3002;&#x8981;&#x83B7;&#x5F97;&#x5782;&#x76F4;&#x7EBF;, &#x6211;&#x4EEC;&#x9996;&#x5148;&#x9700;&#x8981;&#x8BA1;&#x7B97;&#x5934;&#x53D1;&#x65B9;&#x5411;. &#x901A;&#x8FC7;&#x8003;&#x8651;&#x76F8;&#x90BB;&#x50CF;&#x7D20;&#x5E76;&#x5E94;&#x7528;PCA&#xFF08;&#x4E3B;&#x6210;&#x5206;&#x5206;&#x6790;&#xFF09;&#x7B97;&#x6CD5;&#x6765;&#x8BA1;&#x7B97;&#x6BCF;&#x4E2A;&#x50CF;&#x7D20;&#x7684;&#x65B9;&#x5411;. &#x5F53;&#x8BA1;&#x7B97;&#x5934;&#x53D1;&#x9AA8;&#x67B6;&#x4E0A;&#x6240;&#x6709;&#x70B9;&#x7684;&#x65B9;&#x5411;&#x65F6;, &#x53EF;&#x4EE5;&#x8BA1;&#x7B97;&#x51FA;&#x6BCF;&#x4E2A;&#x70B9;&#x7684;&#x5782;&#x76F4;&#x7EBF;&#x3002;&#x7136;&#x540E;, &#x5782;&#x76F4;&#x7EBF;&#x4E0E;&#x5934;&#x53D1;&#x8FB9;&#x754C;&#x7684;&#x4EA4;&#x70B9;&#x4E4B;&#x95F4;&#x7684;&#x8DDD;&#x79BB;&#x5C31;&#x662F;&#x5934;&#x53D1;&#x7684;&#x539A;&#x5EA6;, &#x53EF;&#x4EE5;&#x901A;&#x8FC7;&#x4F7F;&#x7528;&#x6B27;&#x6C0F;&#x8DDD;&#x79BB;&#x6765;&#x8BA1;&#x7B97;&#xFF1A; &#x3C1;=(x2&#x2212;x1)2+(y2&#x2212;y1)2 \\rho = \\sqrt{\\smash[b]{(x_2-x_1)^2 + (y_2-y_1)^2}} &#x3C1;=(x2&#x200B;&#x2212;x1&#x200B;)2+(y2&#x200B;&#x2212;y1&#x200B;)2&#x200B; &#x6839;&#x636E;&#x6B27;&#x5F0F;&#x8DDD;&#x79BB;&#x3C1;\\rho&#x3C1;&#x53EF;&#x8BA1;&#x7B97;&#x51FA;&#x5934;&#x53D1;&#x7684;&#x5E73;&#x5747;&#x539A;&#x5EA6;&#xFF1A; Thincknessavg=1n&#x2211;i=1n(xi2&#x2212;xi1)2+(yi2&#x2212;yi1)2 Thinckness_{avg} =\\frac{1}{n}\\displaystyle\\sum_{i=1}^n\\sqrt{\\smash[b]{(x_{i2}-x_{i1})^2 + (y_{i2}-y_{i1})^2}} Thincknessavg&#x200B;=n1&#x200B;i=1&#x2211;n&#x200B;(xi2&#x200B;&#x2212;xi1&#x200B;)2+(yi2&#x200B;&#x2212;yi1&#x200B;)2&#x200B; &#x8FD9;&#x91CC;ThincknessavgThinckness_{avg}Thincknessavg&#x200B;&#x7684;&#x5355;&#x4F4D;&#x662F;&#x50CF;&#x7D20;, &#x56E0;&#x6B64;&#x9700;&#x8981;&#x4F7F;&#x7528;&#x7B49;&#x5F0F;&#x5C06;&#x5176;&#x66F4;&#x6539;&#x4E3A;&#x4EEA;&#x8868;&#x5355;&#x4F4D;: Thincknessactual(um)=Thincknessavg(px)&#xD7;UL(um/px)mf Thinckness_{actual}(um) = \\frac{Thinckness_{avg}(px) &#xD7;UL(um/px)}{mf} Thincknessactual&#x200B;(um)=mfThincknessavg&#x200B;(px)&#xD7;UL(um/px)&#x200B; mfmfmf: &#x662F;&#x76F8;&#x673A;&#x7684;&#x653E;&#x5927;&#x500D;&#x7387; ULULUL: &#x662F;&#x5355;&#x4F4D;&#x957F;&#x5EA6;, &#x8868;&#x793A;&#x4E00;&#x4E2A;&#x50CF;&#x7D20;&#x7684;&#x5FAE;&#x7C73;&#x957F;&#x5EA6; &#x5B9E;&#x9A8C;&#x7ED3;&#x679C; &#x4E3A;&#x4E86;&#x8BC4;&#x4F30;&#x6211;&#x4EEC;&#x7684;&#x5934;&#x53D1;&#x539A;&#x5EA6;&#x8BC4;&#x4F30;&#x65B9;&#x6CD5;&#x7684;&#x51C6;&#x786E;&#x6027;, &#x6211;&#x4EEC;&#x4F7F;&#x7528;&#x7535;&#x5B50;&#x663E;&#x5FAE;&#x955C;&#x6D4B;&#x91CF;&#x4E86;&#x5B9E;&#x9645;&#x7684;&#x5934;&#x53D1;&#x539A;&#x5EA6;&#x3002;&#x5934;&#x53D1;&#x539A;&#x5EA6;&#x6D4B;&#x91CF;&#x7684;&#x51C6;&#x786E;&#x6027;&#x5982;&#x8868;1&#x6240;&#x793A;&#x3002; table_1_AVERAGE_HAIR_THICKNESS_AND_ERROR_RATE &#x636E;&#x62A5;&#x9053;, &#x97E9;&#x56FD;&#x4EBA;&#x7684;&#x5E73;&#x5747;&#x5934;&#x53D1;&#x539A;&#x5EA6;&#x4E3A;84.9&#x3BC;m&#x3002;&#x4E0E;&#x6B64;&#x76F8;&#x6BD4;, &#x6211;&#x4EEC;&#x7684;90.29&#x3BC;m&#x7684;&#x7ED3;&#x679C;&#x76F8;&#x5F53;&#x4E0D;&#x9519;&#x3002;&#x5B9E;&#x9645;&#x503C;&#xFF08;&#x901A;&#x8FC7;&#x7535;&#x5B50;&#x663E;&#x5FAE;&#x955C;&#x8BA1;&#x7B97;&#xFF09;&#x4E0E;&#x4F30;&#x8BA1;&#x503C;&#x4E4B;&#x95F4;&#x7684;&#x5DEE;&#x5F02;&#x5F88;&#x5C0F;&#x3002; &#x53EF;&#x80FD;&#x7684;&#x539F;&#x56E0;&#x4E4B;&#x4E00;&#x662F;&#x9634;&#x5F71;&#x6548;&#x679C;&#x3002;&#x53E6;&#x4E00;&#x4E2A;&#x53EF;&#x80FD;&#x7684;&#x539F;&#x56E0;&#x662F;&#x76F8;&#x673A;&#x955C;&#x5934;&#x53D8;&#x5F62;&#x3002; &#x56FE;&#x50CF;&#x5C3A;&#x5BF8;&#x4E3A;640x480&#x3002;&#x4F46;&#x662F;, &#x76F8;&#x673A;&#x6240;&#x8986;&#x76D6;&#x533A;&#x57DF;&#x7684;&#x771F;&#x5B9E;&#x5F62;&#x72B6;&#x51E0;&#x4E4E;&#x662F;&#x692D;&#x5706;&#x5F62;&#x3002;&#x56E0;&#x6B64;, &#x76F8;&#x673A;&#x653E;&#x5927;&#x7387;&#x5728;&#x884C;&#x548C;&#x5217;&#x4E4B;&#x95F4;&#x5177;&#x6709;&#x5DEE;&#x5F02;&#x3002;&#x6839;&#x636E;&#x62CD;&#x6444;&#x89D2;&#x5EA6;, &#x653E;&#x5927;&#x500D;&#x7387;&#x53EF;&#x80FD;&#x4F1A;&#x6709;&#x6240;&#x4E0D;&#x540C;&#x3002; &#x603B;&#x7ED3; &#x9488;&#x5BF9;&#x5934;&#x53D1;&#x7C97;&#x7EC6;&#xFF08;&#x539A;&#x5EA6;&#xFF09;&#x8BA1;&#x7B97;&#x95EE;&#x9898;, &#x4E0A;&#x8FF0;&#x8BBA;&#x6587;&#x63D0;&#x51FA;&#x4E86;&#x57FA;&#x4E8E;&#x5934;&#x53D1;&#x8F6E;&#x5ED3;&#x548C;&#x9AA8;&#x9ABC;&#x56FE;, &#x901A;&#x8FC7;&#x8BA1;&#x7B97;&#x6BCF;&#x4E2A;&#x50CF;&#x7D20;&#x70B9;&#x7684;&#x65B9;&#x5411;&#x548C;&#x5782;&#x7EBF;, &#x8FDB;&#x4E00;&#x6B65;&#x4F7F;&#x7528;&#x6B27;&#x5F0F;&#x8DDD;&#x79BB;&#x516C;&#x5F0F;&#x6765;&#x8BA1;&#x7B97;&#x5934;&#x53D1;&#x7684;&#x5782;&#x76F4;&#x76F4;&#x5F84;, &#x4F46;&#x5BF9;&#x76F8;&#x5173;&#x6280;&#x672F;&#x7684;&#x5E94;&#x7528;&#x7EC6;&#x8282;&#x63CF;&#x8FF0;&#x4E0D;&#x591A;&#x3002; &#x53C2;&#x8003;&#x6587;&#x732E; Evalution of hair and scalp condition based on microscopy image analysis An Unsupervised Hair Segmentation and Counting System in Microscopy Images Euclidean distance Principal component analysis","categories":[{"name":"Technology","slug":"Technology","permalink":"https://littlemeemoon.cn/categories/Technology/"},{"name":"Paper Smash","slug":"Technology/Paper-Smash","permalink":"https://littlemeemoon.cn/categories/Technology/Paper-Smash/"}],"tags":[{"name":"Digital Image Processing","slug":"Digital-Image-Processing","permalink":"https://littlemeemoon.cn/tags/Digital-Image-Processing/"},{"name":"Line Detection","slug":"Line-Detection","permalink":"https://littlemeemoon.cn/tags/Line-Detection/"},{"name":"Paper","slug":"Paper","permalink":"https://littlemeemoon.cn/tags/Paper/"},{"name":"Hair Thickness","slug":"Hair-Thickness","permalink":"https://littlemeemoon.cn/tags/Hair-Thickness/"}],"keywords":[{"name":"Technology","slug":"Technology","permalink":"https://littlemeemoon.cn/categories/Technology/"},{"name":"Paper Smash","slug":"Technology/Paper-Smash","permalink":"https://littlemeemoon.cn/categories/Technology/Paper-Smash/"}]},{"title":"Hair Counting | part 2 | An Unsupervised Hair Segmentation and Counting System in Microscopy Images","slug":"Technology/Paper-Smash/An Unsupervised Hair Segmentation and Counting System in Microscopy Images | Hair Counting - 2","date":"2019-12-28T15:51:27.000Z","updated":"2020-06-04T04:19:52.267Z","comments":true,"path":"2019/12/28/Technology/Paper-Smash/An Unsupervised Hair Segmentation and Counting System in Microscopy Images | Hair Counting - 2/","link":"","permalink":"https://littlemeemoon.cn/2019/12/28/Technology/Paper-Smash/An%20Unsupervised%20Hair%20Segmentation%20and%20Counting%20System%20in%20Microscopy%20Images%20|%20Hair%20Counting%20-%202/","excerpt":"","text":"Paper: An Unsupervised Hair Segmentation and Counting System in Microscopy Images &#x6458;&#x8981;&#x7FFB;&#x8BD1;&#xFF1A;&#x672C;&#x6587;&#x91CD;&#x70B9;&#x4ECB;&#x7ECD;&#x4F7F;&#x7528;&#x9AD8;&#x7EA7;&#x56FE;&#x50CF;&#x5904;&#x7406;&#x7B97;&#x6CD5;&#x5F00;&#x53D1;&#x7528;&#x4E8E;&#x4E34;&#x5E8A;&#x7684;&#x533B;&#x5B66;&#x8F6F;&#x4EF6;&#x3002;&#x672C;&#x6587;&#x8BA8;&#x8BBA;&#x4E86;&#x5934;&#x53D1;&#x5206;&#x5272;&#x548C;&#x8BA1;&#x6570;&#x7684;&#x4E09;&#x4E2A;&#x5173;&#x952E;&#x95EE;&#x9898;: - &#x9996;&#x5148;, &#x53BB;&#x9664;&#x7531;&#x4E8E;&#x6CB9;&#x8102;&#x6216;&#x6C34;&#x5206;&#x5F15;&#x8D77;&#x7684;&#x4EFB;&#x4F55;&#x4EAE;&#x70B9;, &#x8FD9;&#x4E9B;&#x4EAE;&#x70B9;&#x5728;&#x5934;&#x53D1;&#x7684;&#x4E2D;&#x90E8;&#x5F62;&#x6210;&#x5706;&#x5F62;&#x56FE;&#x6848;, &#x5E76;&#x663E;&#x7740;&#x5F71;&#x54CD;&#x786E;&#x5B9A;&#x7EBF;&#x6761;&#x7684;&#x51C6;&#x786E;&#x6027;&#x3002; - &#x7B2C;&#x4E8C;, &#x8BC6;&#x522B;&#x51FA;&#x4E24;&#x4E2A;&#x63A5;&#x89E6;&#x6216;&#x91CD;&#x53E0;&#x7684;&#x5934;&#x53D1;, &#x5E76;&#x5C06;&#x5176;&#x89C6;&#x4E3A;&#x5355;&#x4E2A;&#x5934;&#x53D1;&#x3002;&#x4E3A;&#x4E86;&#x89E3;&#x51B3;&#x8FD9;&#x4E2A;&#x95EE;&#x9898;, &#x6211;&#x4EEC;&#x63D0;&#x51FA;&#x4E86;&#x4E00;&#x79CD;&#x5934;&#x53D1;&#x6346;&#x7ED1;&#x7B97;&#x6CD5;(hair-bundling algorithm)&#x6765;&#x8BA1;&#x7B97;&#x4EFB;&#x4F55;&#x9690;&#x85CF;&#x7684;&#x5934;&#x53D1;&#x3002; - &#x6700;&#x540E;, &#x5934;&#x53D1;&#x53EF;&#x80FD;&#x5448;&#x6CE2;&#x6D6A;&#x72B6;&#x6216;&#x5377;&#x66F2;&#x72B6;, &#x8FD9;&#x4F7F;&#x4F20;&#x7EDF;&#x7684;&#x57FA;&#x4E8E;Hough&#x7684;&#x7EBF;&#x68C0;&#x6D4B;&#x7B97;&#x6CD5;&#x4E0D;&#x5408;&#x9002;, &#x56E0;&#x4E3A;&#x5B83;&#x4F1A;&#x53D7;&#x5230;&#x53C2;&#x6570;&#x9009;&#x62E9;&#x7684;&#x5F71;&#x54CD;, &#x4F8B;&#x5982;&#x7EBF;&#x6BB5;&#x7684;&#x6700;&#x5C0F;&#x957F;&#x5EA6;&#x4EE5;&#x53CA;&#x7EBF;&#x6BB5;&#x4E4B;&#x95F4;&#x7684;&#x8DDD;&#x79BB;&#x3002;&#x6211;&#x4EEC;&#x63D0;&#x51FA;&#x7684;&#x6BDB;&#x53D1;&#x8BA1;&#x6570;&#x7B97;&#x6CD5;&#x6BD4;&#x57FA;&#x4E8E;Hough&#x7684;&#x6BDB;&#x53D1;&#x8BA1;&#x6570;&#x7B97;&#x6CD5;&#x8981;&#x51C6;&#x786E;&#x5F97;&#x591A;, &#x5E76;&#x4E14;&#x5728;&#x5404;&#x79CD;&#x767D;&#x5E73;&#x8861;&#x4E0B;&#x5BF9;&#x5377;&#x53D1;, &#x6CB9;&#x6027;&#x5934;&#x76AE;, &#x566A;&#x58F0;&#x8150;&#x8680;&#x548C;&#x91CD;&#x53E0;&#x7684;&#x5934;&#x53D1;&#x90FD;&#x5177;&#x6709;&#x9002;&#x7528;&#x6027;&#x3002; - &#x5173;&#x952E;&#x8BCD;&#xFF1A;&#x6BDB;&#x53D1;&#x8BA1;&#x6570;, &#x5934;&#x76AE;&#x8BCA;&#x65AD;, &#x62A4;&#x53D1;&#x8BCA;&#x65AD;, &#x6BDB;&#x56CA;&#x8BCA;&#x65AD;, &#x7EBF;&#x6BB5;&#x68C0;&#x6D4B;&#x3002; System flowchart figure 1 System flowchart &#x9884;&#x5904;&#x7406;&#x9636;&#x6BB5; (Preprocessing Stage) &#x4F7F;&#x7528;&#x5BF9;&#x6BD4;&#x5EA6;&#x62C9;&#x4F38;&#x65B9;&#x6CD5;(the contrast-stretching method)&#x6765;&#x589E;&#x52A0;&#x5934;&#x76AE;&#x548C;&#x5934;&#x53D1;&#x50CF;&#x7D20;&#x4E4B;&#x95F4;&#x7684;&#x5BF9;&#x6BD4;&#x5EA6;; &#x4E3A;&#x4E86;&#x51CF;&#x5C11;&#x4EAE;&#x70B9;&#x7684;&#x5F71;&#x54CD;, &#x63D0;&#x51FA;&#x4E86;&#x4E00;&#x79CD;&#x5065;&#x58EE;&#x7684;&#x989C;&#x8272;&#x5F62;&#x6001;&#x7B97;&#x6CD5;(morphological algorithm), &#x4EE5;&#x4F7F;&#x989C;&#x8272;&#x5E73;&#x6ED1;&#x5E76;&#x4FDD;&#x6301;&#x5934;&#x53D1;&#x7684;&#x4FDD;&#x771F;&#x5EA6;; &#x4E3A;&#x6BCF;&#x4E2A;&#x989C;&#x8272;&#x5206;&#x91CF;&#x5E94;&#x7528;&#x4E86;Karhunen-Lo&#xE8;ve&#x53D8;&#x6362;(KLT), &#x5E76;&#x4FDD;&#x7559;&#x4E86;&#x5177;&#x6709;&#x6700;&#x9AD8;&#x80FD;&#x91CF;&#x7684;&#x5206;&#x91CF;, &#x5E76;&#x4F7F;&#x7528;Otsu&#x9608;&#x503C;&#x83B7;&#x5F97;&#x4E86;&#x53EF;&#x9760;&#x7684;&#x4E8C;&#x8FDB;&#x5236;&#x56FE;&#x50CF;&#x3002; &#x6570;&#x636E;&#x91C7;&#x96C6;&#x89C4;&#x5B9A; &#x8FD9;&#x9879;&#x7814;&#x7A76;&#x7684;&#x552F;&#x4E00;&#x5047;&#x8BBE;: &#x5934;&#x53D1;&#x7684;&#x989C;&#x8272;&#x6BD4;&#x76AE;&#x80A4;&#x7684;&#x989C;&#x8272;&#x6DF1;&#x3002; &#x5934;&#x53D1;&#x56FE;&#x50CF;&#x662F;&#x4ECE;&#x6570;&#x7801;&#x663E;&#x5FAE;&#x955C;&#x76F8;&#x673A;(DMC)&#x6355;&#x83B7;, &#x5185;&#x7F6E;LED&#x589E;&#x5F3A;, &#x53EF;&#x81EA;&#x52A8;&#x4FDD;&#x6301;&#x4EAE;&#x5EA6;&#x7A33;&#x5B9A;&#x3002;&#x5E94;&#x7528;85&#x500D;&#x7684;&#x53D8;&#x7126;&#x500D;&#x7387;&#x6355;&#x83B7;&#x56FE;&#x50CF;&#x3002;&#x901A;&#x5E38;, &#x4F7F;&#x7528;&#x5206;&#x8FA8;&#x7387;&#x4E3A;1024&#xD7;768, &#x76F8;&#x5F53;&#x4E8E;&#x5934;&#x76AE;&#x9762;&#x79EF;&#x662F;0.25&#xD7;0.19&#x82F1;&#x5BF8;&#x3002;&#x6B64;&#x5916;, &#x57FA;&#x4E8E;DMC&#x7684;&#x767D;&#x5E73;&#x8861;&#x5C06;&#x6355;&#x83B7;&#x7684;&#x56FE;&#x50CF;&#x5206;&#x4E3A;&#x4E24;&#x7EC4;&#xFF1A; &#x5177;&#x6709;&#x65E5;&#x5149;&#x7684;&#x56FE;&#x50CF;&#x88AB;&#x5206;&#x7C7B;&#x4E3A;&#x6570;&#x636E;&#x96C6;&#xFF03;1, &#x5177;&#x6709;&#x8367;&#x5149;&#x7684;&#x56FE;&#x50CF;&#x88AB;&#x5206;&#x7C7B;&#x4E3A;&#x6570;&#x636E;&#x96C6;&#xFF03;2&#x3002; &#x4F7F;&#x7528;&#x5BF9;&#x6BD4;&#x5EA6;&#x62C9;&#x4F38;(Contrast Stretching)&#x8FDB;&#x884C;&#x56FE;&#x50CF;&#x589E;&#x5F3A; &#x76EE;&#x7684; &#x589E;&#x52A0;&#x5934;&#x53D1;&#x548C;&#x5934;&#x76AE;&#x4E4B;&#x95F4;&#x7684;&#x5BF9;&#x6BD4;&#x5EA6;; &#x589E;&#x52A0;&#x5934;&#x53D1;&#x548C;&#x5934;&#x76AE;&#x50CF;&#x7D20;&#x4E4B;&#x95F4;&#x7684;&#x8272;&#x5DEE;&#x3002; &#x6280;&#x672F; &#x901A;&#x8FC7;&#x5206;&#x6BB5;&#x7EBF;&#x6027;&#x5BF9;&#x6BD4;&#x5EA6;&#x62C9;&#x4F38;(color transformation by means of piecewise linear contrast stretching)&#x8FDB;&#x884C;&#x989C;&#x8272;&#x53D8;&#x6362;&#x6765;&#x589E;&#x5F3A;&#x56FE;&#x50CF;, &#x63D0;&#x9AD8;&#x5BF9;&#x6BD4;&#x5EA6;&#xFF1B; stretched the middle-intensity level, and kept the levels of the low-intensity and high-intensity so as to prevent creating false colors. &#x7ED3;&#x679C; figure_2_image_enhancement_for_the_datasets &#x8FDB;&#x884C;&#x5BF9;&#x6BD4;&#x5EA6;&#x62C9;&#x4F38;&#x65F6;, &#x4E0D;&#x4F1A;&#x66F4;&#x6539;&#x539F;&#x59CB;&#x5934;&#x53D1;&#x50CF;&#x7D20;, &#x4E5F;&#x4E0D;&#x4F1A;&#x5938;&#x5927;&#x6CB9;&#x4EAE;&#x50CF;&#x7D20;&#xFF1A; &#x964D;&#x4F4E;&#x4E86;&#x5934;&#x76AE;&#x50CF;&#x7D20;&#x7684;&#x5F3A;&#x5EA6;; &#x589E;&#x52A0;&#x4E86;&#x5934;&#x76AE;&#x548C;&#x5934;&#x53D1;&#x4E4B;&#x95F4;&#x7684;&#x8272;&#x5DEE;; &#x4EAE;&#x70B9;&#x7684;&#x50CF;&#x7D20;&#x4FDD;&#x6301;&#x4E0D;&#x53D8;&#x3002; Bright Spot Removal (BSR) &#x76EE;&#x7684; &#x9664;&#x566A;: &#x53BB;&#x9664;&#x6CB9;&#x6027;&#x548C;&#x6E7F;&#x6DA6;&#x7684;&#x5934;&#x53D1;&#x5728;&#x5934;&#x53D1;&#x7684;&#x4E2D;&#x90E8;&#x4EA7;&#x751F;&#x7684;&#x4EAE;&#x70B9;: &#x6280;&#x672F; color morphological processing approach &#x975E;&#x7EBF;&#x6027;&#x4E2D;&#x503C;&#x6EE4;&#x6CE2;&#x5668;(nonlinear median filter)&#x6D88;&#x9664;&#x767D;&#x70B9;; &#x7A7A;&#x95F4;&#x5E73;&#x6ED1;&#x6EE4;&#x6CE2;&#x5668;(spatial smooth filter)&#x964D;&#x4F4E;&#x767D;&#x70B9;&#x7684;&#x5F3A;&#x5EA6;, &#x7F3A;&#x70B9;&#x662F;&#x6D4B;&#x8BD5;&#x56FE;&#x50CF;&#x7684;&#x975E;&#x6BDB;&#x53D1;&#x533A;&#x57DF;&#x4E5F;&#x5C06;&#x53D8;&#x5F97;&#x6A21;&#x7CCA;; color-based mathematical morphology (MM) method, used it as an ordering process. adopted the MM opening operator to depress the bright spot in the middle of the hairs. &#x4FB5;&#x8680;&#x56FE;&#x50CF; &#x653E;&#x5927;&#x56FE;&#x50CF; opening operation of image f : &#x3B3;M,nB(f) = &#x3C4;M,nB(&#x3B5;M,nB(f)), &#x5176;&#x4E2D;&#x3B5;M,nB&#x548C;&#x3C4;M,nB&#x5206;&#x522B;&#x8868;&#x793A;&#x7ED3;&#x6784;&#x5143;&#x7D20;B&#x5BF9;&#x5927;&#x5C0F;&#x4E3A;n&#x7684;&#x56FE;&#x50CF;f&#x7684;&#x5F62;&#x6001;&#x4FB5;&#x8680;&#x548C;&#x653E;&#x5927;, &#x5BF9;&#x4E8E;&#x50CF;&#x7D20;x: &#x3B5;M,nB(f)(x) = {f(y) : f(y) = &#x2227;M[f(z)],z &#x2208; n(Bx)} &#x3C4;M,nB(f)(x) = {f(y) : f(y) = &#x2228;M[f(z)],z &#x2208; n(Bx)} &#x2227;M&#x548C;&#x2228;M&#x5206;&#x522B;&#x8868;&#x793A;M-ordering&#x7684;&#x6700;&#x9AD8;&#x548C;&#x6700;&#x5C0F;&#x5CF0; &#x4F7F;&#x7528;KLT&#x5C06;&#x5F69;&#x8272;&#x56FE;&#x50CF;&#x8F6C;&#x6362;&#x4E3A;&#x7070;&#x5EA6;&#x56FE;&#x50CF;&#xFF1B; &#x56FE;&#x50CF;&#x4E8C;&#x503C;&#x5316;&#x6B65;&#x9AA4;&#x4E2D;, &#x4F7F;&#x7528;&#x4E86;Otsu&#x9608;&#x503C;(&#x6307;&#x4EAE;&#x5EA6;&#x7684;&#x80FD;&#x91CF;)&#x4EE5;&#x83B7;&#x5F97;&#x53EF;&#x9760;&#x7684;&#x4E8C;&#x503C;&#x56FE;&#x50CF;&#xFF1B; &#x7ED3;&#x679C; &#x56FE;3&#x793A;&#x51FA;&#x4E86;&#x53BB;&#x9664;&#x6CB9;&#x6027;&#x4EAE;&#x70B9;&#x7684;&#x7ED3;&#x679C;&#xFF1A; &#x56FE;4&#x6BD4;&#x8F83;&#x4E86;&#x4F7F;&#x7528;BSR&#x64CD;&#x4F5C;&#x65F6;&#x7684;&#x7EBF;&#x8DEF;&#x68C0;&#x6D4B;, &#x5E76;&#x663E;&#x793A;&#x4E86;&#x5BF9;&#x4E8C;&#x503C;&#x5316;&#x548C;&#x7EC6;&#x5316;&#x64CD;&#x4F5C;&#x7684;&#x660E;&#x663E;&#x5F71;&#x54CD;&#x3002;&#x5E26;&#x6709;BSR&#x7684;&#x4E8C;&#x503C;&#x5316;&#x56FE;&#x50CF;&#x5177;&#x6709;&#x51CF;&#x5C11;&#x7684;&#x4EAE;&#x70B9;&#x53CD;&#x5C04;, &#x5E76;&#x4E14;&#x5728;&#x7EC6;&#x5316;&#x56FE;&#x50CF;&#x4E2D;, &#x4EAE;&#x70B9;&#x88AB;&#x8F6C;&#x6362;&#x4E3A;&#x5C0F;&#x5706;&#x5708;&#x3002;&#x56FE;4(f)&#x663E;&#x793A;, &#x5728;&#x7EBF;&#x68C0;&#x6D4B;&#x9636;&#x6BB5;, &#x4F7F;&#x7528;BSR&#x751F;&#x6210;&#x7684;&#x56FE;&#x50CF;&#x5177;&#x6709;&#x8F83;&#x5C11;&#x7684;&#x4E0D;&#x5FC5;&#x8981;&#x7684;&#x7EBF;&#x6BB5;&#xFF1A; figure_4_comparisons_of_the_hair_thining_and_line_detection Multi-scale Line Detection Stage (MSLD) &#x91C7;&#x7528;&#x6539;&#x8FDB;&#x7684;&#x970D;&#x592B;&#x53D8;&#x6362;(the Hough transform)&#x7B97;&#x6CD5;&#x6765;&#x68C0;&#x6D4B;&#x4E0D;&#x540C;&#x7684;&#x5934;&#x53D1;&#x957F;&#x5EA6;, &#x5E76;&#x51CF;&#x5C11;&#x7531;&#x4E8E;&#x566A;&#x58F0;&#x5F15;&#x8D77;&#x7684;&#x4EFB;&#x4F55;&#x9519;&#x8BEF;&#x68C0;&#x6D4B;; &#x5C06;&#x5F2F;&#x66F2;&#x7684;&#x5934;&#x53D1;&#x89C6;&#x4E3A;&#x591A;&#x6761;&#x76F4;&#x7EBF;; &#x4E3A;&#x4E86;&#x907F;&#x514D;&#x5728;&#x5E94;&#x7528;&#x7A00;&#x758F;&#x8FC7;&#x7A0B;&#x65F6;&#x4E22;&#x5931;&#x5934;&#x53D1;, &#x6211;&#x4EEC;&#x4F7F;&#x7528;&#x8FB9;&#x7F18;&#x4FE1;&#x606F;(edge information)&#x6765;&#x53D1;&#x73B0;&#x4EFB;&#x4F55;&#x9690;&#x85CF;&#x6216;&#x91CD;&#x53E0;&#x7684;&#x5934;&#x53D1;&#x3002; &#x603B;&#x4F53;&#x7ED3;&#x6784;&#x5206;&#x6790; &#x76EE;&#x7684; &#x63D0;&#x51FA;&#x591A;&#x5C3A;&#x5EA6;&#x6846;&#x67B6;&#x6765;&#x662F;&#x4E3A;&#x4E86;&#x63D0;&#x9AD8;&#x5934;&#x53D1;&#x68C0;&#x6D4B;&#x7684;&#x51C6;&#x786E;&#x6027;&#xFF1B; &#x5E94;&#x7528;&#x5E73;&#x884C;&#x7EBF;&#x6346;&#x7ED1;(PLB)&#x7B97;&#x6CD5;(parallel line bundling algorithm)&#x6765;&#x8FD8;&#x539F;&#x4EFB;&#x4F55;&#x9690;&#x85CF;&#x6216;&#x91CD;&#x53E0;&#x7684;&#x5934;&#x53D1;&#x3002; &#x6700;&#x540E;, &#x5C06;&#x77E2;&#x91CF;&#x5316;&#x7684;&#x7EBF;&#x6BB5;&#x7528;&#x4F5C;&#x6BDB;&#x53D1;&#x6807;&#x8BB0;&#x548C;&#x8BA1;&#x6570;&#x6A21;&#x5757;&#x7684;&#x8F93;&#x5165;&#x6570;&#x636E;&#x3002; &#x6280;&#x672F; &#x5BF9;HT&#x5E94;&#x7528;&#x4E86;&#x4E09;&#x4E2A;&#x6BD4;&#x4F8B;&#x7684;&#x56FE;&#x50CF;&#xFF1A;1024&#xD7;768(&#x539F;&#x59CB;&#x6BD4;&#x4F8B;), 512&#xD7;384&#x548C;256&#xD7;192&#x3002;&#x5BF9;&#x7F29;&#x653E;&#x6BD4;&#x4F8B;&#x56FE;&#x50CF;&#x5E94;&#x7528;&#x4E86;&#x4E24;&#x79CD;&#x5904;&#x7406;&#x65B9;&#x6CD5;&#xFF1A;&#x8FB9;&#x7F18;&#x68C0;&#x6D4B;&#x548C;&#x7EC6;&#x5316;&#x5904;&#x7406;&#x3002; PLB&#x7B97;&#x6CD5;&#x5E94;&#x7528;&#x4E8E;&#x8FB9;&#x7F18;&#x56FE;&#x50CF;&#x4EE5;&#x53D1;&#x73B0;&#x7F3A;&#x5931;&#x7684;&#x7EBF;&#x6BB5; HT&#x88AB;&#x5E94;&#x7528;&#x4E8E;&#x7EC6;&#x5316;&#x56FE;&#x50CF;&#x4EE5;&#x63D0;&#x53D6;&#x7EBF;&#x6BB5;&#x3002;&#x901A;&#x8FC7;&#x5229;&#x7528;PLB&#x7B97;&#x6CD5;, &#x53EF;&#x4EE5;&#x6062;&#x590D;&#x9690;&#x85CF;&#x548C;&#x91CD;&#x53E0;&#x7684;&#x5934;&#x53D1;&#x3002; &#x6700;&#x540E;, &#x5C06;&#x77E2;&#x91CF;&#x5316;&#x7684;&#x7EBF;&#x6BB5;&#x91CD;&#x65B0;&#x7F29;&#x653E;&#x4E3A;&#x539F;&#x59CB;&#x5C3A;&#x5BF8;1024&#xD7;768, &#x5E76;&#x7531;&#x903B;&#x8F91;&#x6216;&#x8FD0;&#x7B97;&#x7B26;&#x8FDB;&#x884C;&#x6574;&#x5408;&#x3002; &#x7ED3;&#x679C; &#x5982;&#x56FE;5&#x6240;&#x793A;, &#x7531;&#x4E8E;&#x5934;&#x53D1;&#x7684;&#x957F;&#x5EA6;&#x548C;&#x5377;&#x66F2;&#x5EA6;&#x7684;&#x53D8;&#x5316;, &#x4F7F;&#x7528;&#x5355;&#x5C3A;&#x5EA6;HT&#x4E0D;&#x80FD;&#x68C0;&#x6D4B;&#x6240;&#x6709;&#x7684;&#x5934;&#x53D1;&#xFF1A; figure_5_comparison_of_the_single_scale_and_muti-scale_line_detection &#x56FE;5(a)&#x663E;&#x793A;, &#x5F53;&#x4E00;&#x6839;&#x5934;&#x53D1;&#x51E0;&#x4E4E;&#x5E73;&#x884C;&#x51FA;&#x73B0;, &#x4E0E;&#x5176;&#x4ED6;&#x5934;&#x53D1;&#x91CD;&#x53E0;&#x65F6;, &#x6216;&#x8005;&#x5982;&#x679C;&#x5934;&#x53D1;&#x7684;&#x66F2;&#x7387;&#x8D85;&#x8FC7;HT&#x7684;&#x5BB9;&#x9650;, &#x90A3;&#x4E48;&#x6700;&#x7EC8;&#x4F1A;&#x9057;&#x6F0F;&#x5927;&#x91CF;&#x7684;&#x5934;&#x53D1;, &#x8BB8;&#x591A;&#x7EBF;&#x6BB5;&#x6807;&#x7B7E;&#x9519;&#x8BEF;&#x3002; &#x56FE;5(b)&#x793A;&#x51FA;&#x4E86;&#x4F7F;&#x7528;&#x6765;&#x81EA;&#x6240;&#x6709;&#x7F29;&#x653E;&#x56FE;&#x7684;&#x7EBF;&#x6BB5;&#x7684;&#x7ED3;&#x679C;, &#x4ECE;&#x800C;&#x6539;&#x5584;&#x4E86;&#x5355;&#x4E2A;&#x523B;&#x5EA6;&#x7684;&#x4E0D;&#x8DB3;&#x3002; Parallel Line Bundling (PLB) &#x539F;&#x7406; &#x5E94;&#x7528;Canny&#x8FB9;&#x7F18;&#x68C0;&#x6D4B;&#x5668;&#x83B7;&#x5F97;&#x8FB9;&#x7F18;&#x56FE;&#x3002;&#x5728;&#x56FE;6&#x4E2D;, &#x5047;&#x8BBE;&#x68C0;&#x6D4B;&#x5230;&#x4E24;&#x6761;&#x5E73;&#x884C;&#x7EBF;A&#x548C;B, &#x7528; ax+by+ca=0ax + by + c_a = 0ax+by+ca&#x200B;=0&#x548C;ax+by+cb=0ax + by + c_b = 0ax+by+cb&#x200B;=0&#x8868;&#x793A;, d=&#x2223;ca&#x2212;cb&#x2223;a2+b2d=\\frac{|c_a - c_b|} {\\sqrt{a^2 + b^2}}d=a2+b2&#x200B;&#x2223;ca&#x200B;&#x2212;cb&#x200B;&#x2223;&#x200B;&#x8868;&#x793A;&#x7EBF;&#x6BB5;A,B&#x4E4B;&#x95F4;&#x7684;&#x8DDD;&#x79BB;; figure_6_Thining_line_sandwiched_by_two_parallel_lines_with_the_distances_d &#x8BA1;&#x7B97;&#x51FA;&#x5939;&#x6709;&#x7EC6;&#x7EBF;&#x7684;&#x5E73;&#x884C;&#x7EBF;&#x4E4B;&#x95F4;&#x7684;&#x5E73;&#x5747;&#x8DDD;&#x79BB;davgd_{avg}davg&#x200B;&#x3002; &#x5982;&#x679C;d&gt;davgd &gt; d_{avg}d&gt;davg&#x200B;, &#x5219;&#x5F53;(ddavg)&gt;wth(dd_{avg})&gt;w_{th}(ddavg&#x200B;)&gt;wth&#x200B;&#x65F6;, &#x5C06;&#x53D1;&#x73B0;&#x9690;&#x85CF;&#x7684;&#x5934;&#x53D1;, &#x5176;&#x4E2D;wthw_{th}wth&#x200B;&#x8868;&#x793A;&#x8FB9;&#x754C;&#x56E0;&#x5B50;, &#x5C06;&#x901A;&#x8FC7;&#x5934;&#x76AE;&#x56FE;&#x50CF;&#x7684;&#x5206;&#x8FA8;&#x7387;&#x6839;&#x636E;&#x7ECF;&#x9A8C;&#x8FDB;&#x884C;&#x4FEE;&#x6539;&#x3002; &#x7ED3;&#x679C; &#x5728;&#x56FE;7(a)&#x4E2D;, &#x5706;&#x5708;&#x8868;&#x793A;&#x9690;&#x85CF;&#x7684;&#x5934;&#x53D1;, &#x5982;&#x56FE;7(b)&#x6240;&#x793A;&#xFF1A; Hair Labling and Counting &#x4F7F;&#x7528;MSLD&#x6A21;&#x5757;, &#x5F97;&#x51FA;&#x4E86;&#x4E00;&#x7EC4;&#x7EBF;&#x6BB5;&#x3002;&#x6839;&#x636E;&#x5934;&#x53D1;&#x7684;&#x66F2;&#x7387;&#x548C;&#x65B9;&#x5411;, &#x5C06;&#x5934;&#x53D1;&#x5B9E;&#x73B0;&#x4E3A;&#x5177;&#x6709;&#x4E0D;&#x540C;&#x957F;&#x5EA6;&#x7684;&#x5206;&#x6BB5;&#x7EBF;&#x5411;&#x91CF;&#x7C07;&#x3002;&#x8FD9;&#x9879;&#x7814;&#x7A76;&#x7684;&#x76EE;&#x7684;&#x662F;&#x51C6;&#x786E;&#x8BA1;&#x7B97;&#x5934;&#x76AE;&#x4E0A;&#x7684;&#x6BDB;&#x53D1;&#x6570;&#x91CF;&#x3002;&#x8FD9;&#x53EF;&#x4EE5;&#x770B;&#x4F5C;&#x662F;&#x805A;&#x7C7B;&#x548C;&#x6807;&#x8BB0;&#x95EE;&#x9898;&#x3002;&#x76EE;&#x6807;&#x662F;&#x5C06;&#x4E00;&#x7EC4;&#x7EBF;&#x6BB5;&#x7EC4;&#x5408;&#x6210;&#x8BED;&#x4E49;&#x201C;&#x5934;&#x53D1;&#x201D;&#x5E76;&#x5206;&#x914D;&#x552F;&#x4E00;&#x7684;&#x6807;&#x7B7E;&#x3002;&#x7531;&#x4E8E;&#x6BCF;&#x6839;&#x5934;&#x53D1;&#x90FD;&#x7531;&#x76F8;&#x4E92;&#x5173;&#x8054;&#x7684;&#x7EBF;&#x6BB5;&#x7EC4;&#x6210;, &#x56E0;&#x6B64;&#x6211;&#x4EEC;&#x4E3A;&#x6BCF;&#x4E2A;&#x7C07;&#x5206;&#x914D;&#x4E86;&#x552F;&#x4E00;&#x7684;&#x6807;&#x7B7E;&#x3002; &#x6211;&#x4EEC;&#x91C7;&#x7528;&#x4E86;&#x677E;&#x5F1B;&#x6807;&#x8BB0;&#x7B97;&#x6CD5;(Relaxation labeling algorithm)&#x6765;&#x8BC6;&#x522B;&#x6BCF;&#x4E2A;&#x5355;&#x72EC;&#x7684;&#x7EBF;&#x6BB5;, &#x4EE5;&#x786E;&#x5B9A;&#x4E0E;&#x54EA;&#x4E2A;&#x7EBF;&#x6BB5;&#x76F8;&#x5173;&#x8054;&#x3002; &#x56FE;8(a)&#x663E;&#x793A;&#x4E86;10&#x4E2A;&#x5355;&#x72EC;&#x7684;&#x7EBF;&#x6BB5;&#x7684;&#x793A;&#x4F8B;, &#x8FD9;&#x4E9B;&#x7EBF;&#x6BB5;&#x88AB;&#x6807;&#x8BB0;&#x4E3A;&#x6765;&#x81EA;&#x540C;&#x4E00;&#x6839;&#x5934;&#x53D1;, &#x7136;&#x540E;&#x7ED8;&#x5236;&#x5230;(&#x3C1;,&#x3B8;)(&#x3C1;, &#x3B8;)(&#x3C1;,&#x3B8;)&#x5750;&#x6807;&#x7CFB;&#x4E0A;, &#x5982;&#x56FE;8(b)&#x6240;&#x793A;&#x3002; &#x4EA4;&#x53C9;&#x70B9;&#x5904;&#x7D2F;&#x79EF;&#x56FE;&#x7684;&#x7ED3;&#x679C;&#x5CF0;&#x503C;&#x4E3A;10&#x3002; figure_8_Example_of_line_segment_labeling Relaxation Labeling (RL) &#x677E;&#x5F1B;&#x6807;&#x6CE8;(RL)&#x662F;&#x4E00;&#x79CD;&#x76F8;&#x4E92;&#x5173;&#x8054;&#x7684;&#x56DE;&#x5F52;&#x65B9;&#x6CD5;, &#x5B83;&#x4F7F;&#x7528;&#x7B26;&#x53F7;&#x6765;&#x63CF;&#x8FF0;&#x6A21;&#x578B;&#x7684;&#x5F62;&#x72B6;&#x3002; &#x5B83;&#x65E8;&#x5728;&#x5C06;&#x76EE;&#x6807;&#x5BF9;&#x8C61;(&#x5373;&#x672C;&#x6587;&#x4E2D;&#x7684;&#x7EBF;&#x6BB5;)&#x4E0E;&#x7B26;&#x53F7;&#x6216;&#x6240;&#x8C13;&#x7684;&#x6807;&#x8BB0;(&#x5373;&#x5934;&#x53D1;&#x6807;&#x7B7E;)&#x8FDB;&#x884C;&#x5339;&#x914D;&#x3002;RL&#x7B97;&#x6CD5;&#x9996;&#x5148;&#x5206;&#x914D;&#x4E00;&#x7EC4;&#x968F;&#x673A;&#x6807;&#x8BB0;&#x3002;&#x7136;&#x540E;, &#x901A;&#x8FC7;&#x8FED;&#x4EE3;&#x8BA1;&#x7B97;, &#x53EF;&#x4EE5;&#x83B7;&#x5F97;&#x66F4;&#x51C6;&#x786E;, &#x66F4;&#x7CBE;&#x786E;&#x7684;&#x6807;&#x8BB0;&#x96C6;&#x3002;&#x5728;&#x672C;&#x7814;&#x7A76;&#x4E2D;, RL&#x7B97;&#x6CD5;&#x88AB;&#x89C6;&#x4E3A;&#x7528;&#x4E8E;&#x6807;&#x8BB0;&#x6BCF;&#x4E2A;&#x7EBF;&#x6BB5;&#x7684;&#x805A;&#x7C7B;&#x65B9;&#x6CD5;&#x3002; &#x539F;&#x7406; figure_9_Conceptual_schematics_of_the_labeling_algorithm &#x4EE4;C(i,&#x3BB;,j,&#x3BB;&#x2032;)C(i, &#x3BB;, j, &#x3BB;&apos;)C(i,&#x3BB;,j,&#x3BB;&#x2032;)&#x8868;&#x793A;&#x7EA6;&#x675F;&#x4E3A;&#x3BB;&#x7684;&#x7EBF;&#x6BB5;&#x4E0E;&#x7EA6;&#x675F;&#x4E3A;&#x3BB;&apos;&#x7684;&#x7EBF;&#x6BB5;j&#x7684;&#x517C;&#x5BB9;&#x6027;, &#x5176;&#x7EA6;&#x675F;&#x4E3A;: &#x2211;&#x3BB;C(i,&#x3BB;,j,&#x3BB;&#x2032;)=1\\displaystyle\\sum_{&#x3BB;}C(i, &#x3BB;, j, &#x3BB;&apos;) = 1&#x3BB;&#x2211;&#x200B;C(i,&#x3BB;,j,&#x3BB;&#x2032;)=1 for &#x2200;i,j,&#x3BB;,&#x3BB;&apos;&#x3002; &#x517C;&#x5BB9;&#x6027;C&#x8868;&#x793A;&#x6807;&#x8BB0;&#x4E3A;&#x3BB;&apos;&#x7684;&#x7EBF;&#x6BB5;j&#x548C;&#x6807;&#x8BB0;&#x4E3A;&#x3BB;&#x7684;&#x7EBF;&#x6BB5;i&#x4E4B;&#x95F4;&#x7684;&#x76F8;&#x4E92;&#x4F9D;&#x8D56;&#x6027;&#x3002; &#x5982;&#x679C;&#x517C;&#x5BB9;&#x6027;&#x4EC5;&#x7531;&#x5230;&#x539F;&#x70B9;&#x7684;&#x8DDD;&#x79BB;&#x51B3;&#x5B9A;, &#x5219;&#x53EF;&#x80FD;&#x4F1A;&#x51FA;&#x73B0;&#x9519;&#x8BEF;&#x7684;&#x89E3;&#x91CA;&#x3002; &#x56E0;&#x6B64;&#x5C06;&#x517C;&#x5BB9;&#x6027;&#x5B9A;&#x4E49;&#x5982;&#x4E0B;&#xFF1A; C(i,&#x3BB;,j,&#x3BB;&#x2032;)={&#x2212;1if&#xA0;i&#x2209;Sj&#x3B5;&#x2223;cos&#x2061;[&#x3B8;i(&#x3BB;)&#x2212;&#x3B8;j(&#x3BB;&#x2032;)]&#x2223;+(1&#x2212;&#x3B5;)&#x3C1;i(&#x3BB;)&#x3C1;j(&#x3BB;&#x2032;)if&#xA0;i&#x2208;Sj&#x2229;&#x3BB;=/&#x2009;&#x3BB;&#x2032;0otherwise&#xA0; C(i, &#x3BB;, j, &#x3BB;&apos;) = \\begin{cases} -1 &amp;\\text{if } i \\notin S_j \\\\ \\varepsilon |\\cos[\\theta_i(\\lambda) - \\theta_j(&#x3BB;&apos;)]| + (1-\\varepsilon) \\frac{\\rho_i(\\lambda)}{\\rho_j(&#x3BB;&apos;)} &amp;\\text{if } i&#x2208;S_j&#x2229;&#x3BB;{=}\\mathllap{/\\,}&#x3BB;&apos; \\\\ 0 &amp;\\text{otherwise } \\end{cases} C(i,&#x3BB;,j,&#x3BB;&#x2032;)=&#x23A9;&#x23AA;&#x23A8;&#x23AA;&#x23A7;&#x200B;&#x2212;1&#x3B5;&#x2223;cos[&#x3B8;i&#x200B;(&#x3BB;)&#x2212;&#x3B8;j&#x200B;(&#x3BB;&#x2032;)]&#x2223;+(1&#x2212;&#x3B5;)&#x3C1;j&#x200B;(&#x3BB;&#x2032;)&#x3C1;i&#x200B;(&#x3BB;)&#x200B;0&#x200B;if&#xA0;i&#x2208;/&#x200B;Sj&#x200B;if&#xA0;i&#x2208;Sj&#x200B;&#x2229;&#x3BB;=/&#x200B;&#x3BB;&#x2032;otherwise&#xA0;&#x200B; &#x4E0A;&#x5F0F;&#x4E2D;&#xFF1A; &#x3B5;&#x8868;&#x793A;&#x8DDD;&#x79BB;&#x548C;&#x65B9;&#x5411;&#x7F6E;&#x4FE1;&#x5EA6;&#x4E4B;&#x95F4;&#x7684;&#x52A0;&#x6743;&#x56E0;&#x5B50; SjS_jSj&#x200B;&#x8868;&#x793A;&#x7EBF;&#x6BB5;j&#x7684;&#x76F8;&#x90BB;&#x5047;&#x8BBE; &#x3B8;i(&#x3BB;)&#x3B8;_i(&#x3BB;)&#x3B8;i&#x200B;(&#x3BB;)&#x8868;&#x793A;&#x4ECE;&#x7EBF;&#x6BB5;i&#x5230;&#x6807;&#x8BB0;&#x4E3A;&#x3BB;&#x7684;&#x7EBF;&#x6BB5;j&#x7684;&#x65B9;&#x5411; &#x3C1;i(&#x3BB;)&#x3C1;_i(&#x3BB;)&#x3C1;i&#x200B;(&#x3BB;)&#x8868;&#x793A;&#x539F;&#x70B9;&#x5230;&#x7EBF;&#x6BB5;i&#x548C;&#x6807;&#x8BB0;&#x4E3A;&#x3BB;&#x7684;&#x7EBF;&#x6BB5;j&#x4E4B;&#x95F4;&#x7684;&#x8DDD;&#x79BB; &#x5982;&#x679C;&#x3C1;j(&#x3BB;)&#x3C1;_j(&#x3BB;)&#x3C1;j&#x200B;(&#x3BB;)&#x9AD8;, &#x4E14;C(i,&#x3BB;,j,&#x3BB;&#x2032;)C(i, &#x3BB;, j, &#x3BB;&apos;)C(i,&#x3BB;,j,&#x3BB;&#x2032;)&#x4E3A;&#x6B63;, &#x5219;&#x3C1;i(&#x3BB;)&#x3C1;_i(&#x3BB;)&#x3C1;i&#x200B;(&#x3BB;)&#x589E;&#x52A0;&#x3002; &#x6B64;&#x6807;&#x8BB0;&#x7B97;&#x6CD5;&#x662F;&#x4E00;&#x4E2A;&#x8FED;&#x4EE3;&#x5E76;&#x884C;&#x8FC7;&#x7A0B;, &#x7C7B;&#x4F3C;&#x4E8E;&#x6982;&#x7387;&#x677E;&#x5F1B;&#x4E2D;&#x4F7F;&#x7528;&#x7684;&#x6807;&#x8BB0;&#x4E22;&#x5F03;&#x89C4;&#x5219;, &#x64CD;&#x4F5C;&#x5458;&#x6839;&#x636E;&#x5176;&#x4ED6;&#x91CD;&#x91CF;&#x548C;&#x517C;&#x5BB9;&#x6027;&#x53CD;&#x590D;&#x8C03;&#x6574;&#x6807;&#x7B7E;&#x91CD;&#x91CF;&#x3002; &#x5BF9;&#x4E8E;&#x6BCF;&#x4E2A;&#x7EBF;&#x6BB5;&#x548C;&#x6BCF;&#x4E2A;&#x6807;&#x7B7E;, &#x65B0;&#x6743;&#x91CD;qi(r)(&#x3BB;)q_i^{(r)}(\\lambda)qi(r)&#x200B;(&#x3BB;)&#x7684;&#x8BA1;&#x7B97;&#x5982;&#x4E0B;&#xFF1A; qi(r)(&#x3BB;)=&#x2211;j,j=/&#x2009;i&#x2211;&#x3BB;&#x2032;C(i,&#x3BB;,j,&#x3BB;&#x2032;)pj(r)(&#x3BB;&#x2032;) q_i^{(r)}(\\lambda) = \\sum_{\\mathclap{j, j{=}\\mathllap{/\\,}i}} \\sum_{\\mathclap{&#x3BB;&apos;}}C(i, &#x3BB;, j, &#x3BB;&apos;)p_j^{(r)}(&#x3BB;&apos;) qi(r)&#x200B;(&#x3BB;)=j,j=/&#x200B;i&#x200B;&#x2211;&#x200B;&#x3BB;&#x2032;&#x2211;&#x200B;C(i,&#x3BB;,j,&#x3BB;&#x2032;)pj(r)&#x200B;(&#x3BB;&#x2032;) &#x5176;&#x4E2D;: r&#x8868;&#x793A;&#x7B2C;r&#x6B21;&#x8FED;&#x4EE3; &#x5728;&#x7B49;&#x5F0F;&#x4E2D;, &#x4E58;&#x79EF;&#x548C;&#x662F;&#x88AB;&#x6807;&#x8BB0;&#x4E3A;&#x3BB;&#x7684;&#x7ED9;&#x5B9A;&#x7EBF;&#x6BB5;i&#x7684;&#x671F;&#x671B; qi(r)(&#x3BB;)q_i^{(r)}(\\lambda)qi(r)&#x200B;(&#x3BB;)&#x662F;&#x5F53;&#x524D;&#x8D4B;&#x503C;pj(r)(&#x3BB;&#x2032;)p_j^{(r)}(&#x3BB;&apos;)pj(r)&#x200B;(&#x3BB;&#x2032;)&#x7684;&#x52A0;&#x6743;&#x548C;&#x3002; &#x65B0;&#x4EFB;&#x52A1;&#x53EF;&#x4EE5;&#x7528;&#x5DF2;&#x4E0B;&#x516C;&#x5F0F;&#x66F4;&#x65B0;&#xFF1A; pi(r+1)(&#x3BB;)=pi(r)(&#x3BB;)[1+qi(r)(&#x3BB;)]&#x2211;j=1mpi(r)(&#x3BB;&#x2032;)[1+qi(r)(&#x3BB;&#x2032;)] p_i^{(r+1)}(\\lambda) = \\frac{p_i^{(r)}(&#x3BB;)[1+q_i^{(r)}(&#x3BB;)]}{\\displaystyle\\sum_{j=1}^mp_i^{(r)}(&#x3BB;&apos;)[1+q_i^{(r)}(&#x3BB;&apos;)]} pi(r+1)&#x200B;(&#x3BB;)=j=1&#x2211;m&#x200B;pi(r)&#x200B;(&#x3BB;&#x2032;)[1+qi(r)&#x200B;(&#x3BB;&#x2032;)]pi(r)&#x200B;(&#x3BB;)[1+qi(r)&#x200B;(&#x3BB;)]&#x200B; &#x5728;&#x8FD9;&#x91CC;, &#x53EA;&#x9009;&#x62E9;pi(r)(&#x3BB;)p_i^{(r)}(\\lambda)pi(r)&#x200B;(&#x3BB;)&#x548C;C(i,&#x3BB;,j,&#x3BB;&#x2032;)C(i, &#x3BB;, j, &#x3BB;&apos;)C(i,&#x3BB;,j,&#x3BB;&#x2032;)&#x5E76;&#x5E94;&#x7528;&#x8BE5;&#x7B49;&#x5F0F;&#x9012;&#x5F52;&#x66F4;&#x65B0;pi(r)(&#x3BB;)p_i^{(r)}(\\lambda)pi(r)&#x200B;(&#x3BB;), &#x76F4;&#x5230;&#x5B83;&#x4EEC;&#x505C;&#x6B62;&#x53D8;&#x5316;&#x6216;&#x6536;&#x655B;&#x5230;1&#x3002;&#x5BF9;&#x6BCF;&#x4E2A;&#x7EBF;&#x6BB5;&#x8FDB;&#x884C;&#x8FED;&#x4EE3;&#x9A8C;&#x8BC1;, &#x76F4;&#x5230;&#x5C06;&#x5176;&#x5206;&#x914D;&#x7ED9;&#x6B63;&#x786E;&#x7684;&#x8BED;&#x4E49;&#x6807;&#x7B7E;&#x201C; hair&#x201D;&#x4E3A;&#x6B62;&#x3002; &#x5B9E;&#x9A8C;&#x7ED3;&#x679C; &#x4E3A;&#x4E86;&#x8BC4;&#x4F30;&#x8BE5;&#x7CFB;&#x7EDF;, &#x6211;&#x4EEC;&#x4ECE;UPMOST(UPG622)DMC&#x6355;&#x83B7;&#x4E86;40&#x4E2A;&#x5206;&#x8FA8;&#x7387;&#x4E3A;1024&#xD7;768&#x7684;&#x6BD4;&#x4F8B;&#x5C3A;&#x56FE;&#x50CF;&#x4F5C;&#x4E3A;&#x6D4B;&#x8BD5;&#x6570;&#x636E;&#x96C6;&#x3002;&#x6839;&#x636E;DMC&#x7684;&#x767D;&#x5E73;&#x8861;, &#x6211;&#x4EEC;&#x5C06;&#x6D4B;&#x8BD5;&#x56FE;&#x50CF;&#x5206;&#x4E3A;&#x4E24;&#x7EC4;, &#x5206;&#x522B;&#x662F;&#x6570;&#x636E;&#x96C6;1&#x548C;&#x6570;&#x636E;&#x96C6;2&#x3002; Experiment 1: Cross-Validation of the Line Detection figure_10_result_images_for_line_detection &#x56FE;10(b)-(d)&#x663E;&#x793A;&#x4E86;&#x9884;&#x5904;&#x7406;&#x6A21;&#x5757;&#x7684;&#x7ED3;&#x679C;, &#x5305;&#x62EC;&#x4EAE;&#x70B9;&#x53BB;&#x9664;(BSR), &#x4E8C;&#x503C;&#x5316;&#x548C;&#x7A00;&#x5316;&#x8FC7;&#x7A0B;&#x3002; &#x4E3A;&#x4E86;&#x8BC4;&#x4F30;&#x591A;&#x5C3A;&#x5EA6;&#x7EBF;&#x68C0;&#x6D4B;&#x7B97;&#x6CD5;&#x7684;&#x6027;&#x80FD;, &#x6D4B;&#x8BD5;&#x56FE;&#x50CF;&#x6211;&#x4EEC;&#x5C06;HT&#x5E94;&#x7528;&#x4E8E;&#x4E09;&#x79CD;&#x4E0D;&#x540C;&#x5C3A;&#x5EA6;, &#x4EE5;&#x63D0;&#x53D6;&#x7EBF;&#x6BB5;&#x3002; &#x7136;&#x540E;&#x4F7F;&#x7528;&#x5934;&#x53D1;&#x6807;&#x7B7E;&#x673A;&#x5236;&#x786E;&#x5B9A;&#x5934;&#x53D1;&#x7684;&#x6570;&#x91CF;&#x3002; &#x5982;&#x56FE;10(e)-(f)&#x6240;&#x793A;, &#x5F69;&#x8272;&#x7EBF;&#x4EE3;&#x8868;&#x5934;&#x53D1;&#x7684;&#x6807;&#x7B7E;&#x3002; &#x6362;&#x53E5;&#x8BDD;&#x8BF4;, &#x5373;&#x4F7F;&#x5934;&#x53D1;&#x4EA4;&#x53C9;&#x6216;&#x91CD;&#x53E0;, &#x4E5F;&#x53EF;&#x4EE5;&#x51C6;&#x786E;&#x5730;&#x6807;&#x8BB0;&#x5934;&#x53D1;&#x3002; &#x4EE5;&#x4E0B;&#x90E8;&#x5206;&#x6F14;&#x793A;&#x4E86;&#x6709;&#x5173;&#x7CBE;&#x786E;&#x5EA6;&#x548C;&#x53EC;&#x56DE;&#x7387;&#x7684;&#x6BDB;&#x53D1;&#x8BA1;&#x6570;&#x7684;&#x5BA2;&#x89C2;&#x6D4B;&#x91CF;&#x3002; &#x6211;&#x4EEC;&#x6BD4;&#x8F83;&#x4E86;&#x4F7F;&#x7528;BSR&#x548C;MSLD&#x6A21;&#x5757;&#x7EC4;&#x5408;&#x7684;&#x56DB;&#x79CD;&#x60C5;&#x51B5;, &#x5305;&#x62EC;BSR + MSLD, &#x800C;&#x6CA1;&#x6709;&#x540C;&#x65F6;&#x4F7F;&#x7528;BSR&#x548C;MSLD, &#x4EC5;BSR&#x548C;&#x4EC5;MSLD&#x3002; table_1_comarison_of_the_system_sensitivity_forthe_module_usages_in_the_line_detection &#x8868;I&#x6BD4;&#x8F83;&#x4E86;&#x57FA;&#x4E8E;&#x6A21;&#x5757;&#x4F7F;&#x7528;&#x60C5;&#x51B5;&#x7684;&#x7CFB;&#x7EDF;&#x654F;&#x611F;&#x6027;&#x3002;&#x57FA;&#x4E8E;&#x5F62;&#x6001;&#x5B66;&#x7684;BSR&#x548C;MSLD&#x673A;&#x5236;, &#x4EE5;&#x63D0;&#x9AD8;&#x5934;&#x53D1;&#x68C0;&#x6D4B;&#x7684;&#x6027;&#x80FD;, &#x5176;&#x51C6;&#x786E;&#x7387;&#x5206;&#x522B;&#x4E3A;94.98&#xFF05;&#x548C;98.05&#xFF05;&#x3002;&#x4E0E;&#x4F20;&#x7EDF;&#x7684;HT&#x7EBF;&#x68C0;&#x6D4B;&#x65B9;&#x6CD5;&#x76F8;&#x6BD4;, &#x6570;&#x636E;&#x96C6;1&#x548C;&#x6570;&#x636E;&#x96C6;2&#x5206;&#x522B;&#x63D0;&#x9AD8;&#x4E86;2&#xFF05;&#x548C;1.5&#xFF05;&#x3002;&#x4ECE;&#x53EC;&#x56DE;&#x7387;&#x7684;&#x89D2;&#x5EA6;&#x6765;&#x770B;, &#x5B83;&#x4E5F;&#x9AD8;&#x4E8E;&#x5176;&#x4ED6;&#x6A21;&#x5757;&#x7EC4;&#x5408;&#x3002; &#x5E73;&#x5747;&#x800C;&#x8A00;, &#x6211;&#x4EEC;&#x7684;&#x53EC;&#x56DE;&#x7387;&#x5206;&#x522B;&#x4E3A;9&#xFF05;&#x548C;10&#xFF05;&#x3002;&#x6839;&#x636E;&#x6211;&#x4EEC;&#x7684;&#x89C2;&#x5BDF;, &#x5E94;&#x7528;BSR&#x540E;, &#x51C6;&#x786E;&#x7387;&#x5F97;&#x5230;&#x4E86;&#x63D0;&#x9AD8;&#x3002; &#x4F46;&#x662F;, &#x5C06;MSLD&#x5E94;&#x7528;&#x4E8E;&#x6570;&#x636E;&#x96C6;&#xFF03;2&#x65F6;, &#x51C6;&#x786E;&#x7387;&#x4E0B;&#x964D;, &#x56E0;&#x4E3A;&#x5B83;&#x5728;&#x6CB9;&#x6027;&#x5934;&#x76AE;&#x533A;&#x57DF;&#x4E2D;&#x4EA7;&#x751F;&#x4E86;&#x5927;&#x91CF;&#x7684;&#x5149;&#x53CD;&#x5C04;&#x3002;&#x540C;&#x6837;, &#x5934;&#x53D1;&#x4E2D;&#x90E8;&#x7684;&#x4EAE;&#x70B9;&#x4E5F;&#x88AB;&#x5927;&#x5927;&#x589E;&#x5F3A;, &#x5BFC;&#x81F4;&#x7CBE;&#x786E;&#x5EA6;&#x964D;&#x4F4E;&#x3002; Experiment 2: System Refinement Using the PLB Algorithm table_2_system_performance_for_with_or_without_PLB &#x8868;II&#x663E;&#x793A;&#x4E86;PLB&#x7B97;&#x6CD5;&#x7684;&#x6548;&#x7387;&#x3002;PLB&#x65B9;&#x6CD5;&#x4F7F;&#x7CFB;&#x7EDF;&#x80FD;&#x591F;&#x63D0;&#x53D6;&#x7F3A;&#x5931;&#x7684;&#x6BDB;&#x53D1;, &#x7CBE;&#x786E;&#x7387;&#x63D0;&#x9AD8;&#x4E86;0.5&#xFF05;, &#x53EC;&#x56DE;&#x7387;&#x63D0;&#x9AD8;&#x4E86;5&#xFF05;&#x3002; PLB&#x7B97;&#x6CD5;&#x53EF;&#x4EE5;&#x7528;&#x4F5C;&#x7CFB;&#x7EDF;&#x5FAE;&#x8C03;&#x8FC7;&#x7A0B;, &#x5C06;&#x7CFB;&#x7EDF;&#x6027;&#x80FD;&#x5E73;&#x5747;&#x63D0;&#x9AD8;&#x5230;96.89&#xFF05;&#x3002;&#x8FD9;&#x662F;&#x5408;&#x7406;&#x7684;, &#x56E0;&#x4E3A;&#x9690;&#x85CF;&#x7684;&#x5934;&#x53D1;&#x4E0D;&#x7ECF;&#x5E38;&#x51FA;&#x73B0;&#x3002; &#x6B64;&#x5916;, &#x6211;&#x4EEC;&#x53EF;&#x4EE5;&#x901A;&#x8FC7;&#x663E;&#x5FAE;&#x955C;&#x63A7;&#x5236;&#x5934;&#x53D1;&#x56FE;&#x50CF;&#x7684;&#x5206;&#x8FA8;&#x7387;&#x548C;&#x89D2;&#x5EA6;, &#x4EE5;&#x907F;&#x514D;&#x8FD9;&#x79CD;&#x60C5;&#x51B5;&#x3002; Experiment 3: Complexity Analysis table_3_time_occupancy_of_each_module_compared_with_total_execution &#x5F53;&#x6D89;&#x53CA;&#x5230;&#x7CFB;&#x7EDF;&#x590D;&#x6742;&#x6027;&#x5206;&#x6790;&#x65F6;, &#x6211;&#x4EEC;&#x77E5;&#x9053;&#x62DF;&#x8BAE;&#x7684;&#x5934;&#x53D1;&#x8BA1;&#x6570;&#x7CFB;&#x7EDF;&#x4F1A;&#x82B1;&#x8D39;&#x66F4;&#x591A;&#x65F6;&#x95F4;&#x3002;&#x5E73;&#x5747;&#x800C;&#x8A00;, &#x9AD8;&#x5206;&#x8FA8;&#x7387;&#x6D4B;&#x8BD5;&#x56FE;&#x50CF;&#x9700;&#x8981;&#x4E0D;&#x5230;4&#x79D2;&#x7684;&#x65F6;&#x95F4;&#x5373;&#x53EF;&#x5F97;&#x51FA;&#x6BDB;&#x53D1;&#x8BA1;&#x6570;&#x4FE1;&#x606F;&#x3002; &#x8868;III&#x5217;&#x51FA;&#x4E86;&#x6BCF;&#x4E2A;&#x6A21;&#x5757;&#x6240;&#x9700;&#x7684;&#x65F6;&#x95F4;&#x4E0E;&#x603B;&#x6267;&#x884C;&#x65F6;&#x95F4;&#x7684;&#x6BD4;&#x8F83;&#x3002; MSLD&#x4F7F;&#x7528;&#x4E09;&#x4E2A;&#x6BD4;&#x4F8B;&#x5C3A;&#x6765;&#x83B7;&#x53D6;&#x4E00;&#x7EC4;&#x7EBF;&#x6BB5;, &#x8FD9;&#x9700;&#x8981;&#x5927;&#x90E8;&#x5206;&#x6267;&#x884C;&#x65F6;&#x95F4;&#x3002; HT&#x5C06;&#x8FB9;&#x7F18;&#x6295;&#x5F71;&#x5230;(&#x3C1;, &#x3B8;)&#x7A7A;&#x95F4;&#x4EE5;&#x63D0;&#x53D6;&#x5C40;&#x90E8;&#x6700;&#x5927;&#x503C;&#x7684;&#x8FC7;&#x7A0B;&#x975E;&#x5E38;&#x8017;&#x65F6;&#x3002; &#x4E3A;&#x4E86;&#x514B;&#x670D;&#x8FD9;&#x4E2A;&#x95EE;&#x9898;, &#x6211;&#x4EEC;&#x5728;MSLD&#x4E2D;&#x4EC5;&#x4F7F;&#x7528;&#x4E86;&#x4E24;&#x4E2A;&#x6807;&#x5EA6;&#x3002;&#x4F46;&#x662F;, &#x6B64;&#x5C1D;&#x8BD5;&#x5BFC;&#x81F4;&#x6027;&#x80FD;&#x4E0B;&#x964D;&#x3002; &#x6B64;&#x5916;, &#x7EC6;&#x5316;&#x8FC7;&#x7A0B;&#x5360;&#x7528;&#x4E86;&#x603B;&#x5904;&#x7406;&#x65F6;&#x95F4;&#x7684;&#x56DB;&#x5206;&#x4E4B;&#x4E00;&#x4EE5;&#x4E0A;&#x3002;&#x8FD9;&#x662F;&#x6267;&#x884C;&#x65F6;&#x95F4;&#x548C;&#x7CFB;&#x7EDF;&#x7CBE;&#x5EA6;&#x4E4B;&#x95F4;&#x7684;&#x6743;&#x8861;&#x3002; &#x603B;&#x7ED3; &#x8FD9;&#x9879;&#x7814;&#x7A76;&#x63D0;&#x51FA;&#x4E86;&#x4E00;&#x79CD;&#x81EA;&#x52A8;&#x7684;&#x5934;&#x53D1;&#x5206;&#x5272;&#x548C;&#x8BA1;&#x6570;&#x7CFB;&#x7EDF;, &#x4EE5;&#x51CF;&#x5C11;&#x4EBA;&#x5DE5;&#x8BC4;&#x4F30;&#x8005;&#x8FDB;&#x884C;&#x8BE6;&#x7EC6;&#x5934;&#x76AE;&#x8BC4;&#x4F30;&#x6240;&#x9700;&#x7684;&#x65F6;&#x95F4;&#x3002; 1. &#x9996;&#x5148;, &#x6CB9;&#x6027;&#x548C;&#x6E7F;&#x6DA6;&#x7684;&#x5934;&#x53D1;&#x4F1A;&#x5728;&#x5934;&#x53D1;&#x4E2D;&#x95F4;&#x4EA7;&#x751F;&#x4EAE;&#x70B9;&#x3002;&#x5728;&#x8BA1;&#x7B97;&#x5934;&#x53D1;&#x6570;&#x4E4B;&#x524D;, &#x6211;&#x4EEC;&#x9700;&#x8981;&#x6D88;&#x9664;&#x5934;&#x53D1;&#x4E0A;&#x7684;&#x4EAE;&#x70B9;, &#x4EE5;&#x907F;&#x514D;&#x91CD;&#x590D;&#x8BA1;&#x7B97;&#x4E00;&#x4E9B;&#x5934;&#x53D1;&#x7684;&#x95EE;&#x9898;&#x3002; 2. &#x7B2C;&#x4E8C;, &#x6CE2;&#x6D6A;&#x72B6;&#x548C;&#x5377;&#x53D1;&#x5BB9;&#x6613;&#x5BFC;&#x81F4;&#x7EBF;&#x68C0;&#x6D4B;&#x6545;&#x969C;&#x3002;&#x5F53;&#x5934;&#x53D1;&#x4E0D;&#x76F4;&#x65F6;, &#x5E38;&#x89C4;&#x7684;&#x7EBF;&#x68C0;&#x6D4B;&#x7B97;&#x6CD5;&#x65E0;&#x6548;&#x3002; 3. &#x7B2C;&#x4E09;, &#x5F53;&#x5934;&#x53D1;&#x76F8;&#x4E92;&#x4EA4;&#x53C9;&#x5E76;&#x4E92;&#x76F8;&#x54AC;&#x5408;&#x65F6;, &#x4F1A;&#x51FA;&#x73B0;&#x5BF9;&#x5934;&#x53D1;&#x6570;&#x91CF;&#x7684;&#x4F4E;&#x4F30;, &#x8FD9;&#x4F7F;&#x5F97;&#x7CBE;&#x786E;&#x5B9A;&#x4F4D;&#x6240;&#x6709;&#x5934;&#x53D1;&#x975E;&#x5E38;&#x56F0;&#x96BE;&#x3002; 4. &#x6700;&#x540E;, &#x7531;&#x4E8E;&#x5934;&#x76AE;&#x76F8;&#x5BF9;&#x672A;&#x66DD;&#x5149;, &#x56E0;&#x6B64;&#x5934;&#x76AE;&#x7684;&#x56FE;&#x50CF;&#x901A;&#x5E38;&#x6A21;&#x7CCA;&#x6216;&#x96BE;&#x4EE5;&#x770B;&#x89C1;&#x3002;&#x53E6;&#x5916;, &#x5934;&#x76AE;&#x901A;&#x5E38;&#x7167;&#x660E;&#x4E0D;&#x8DB3;&#x6216;&#x66DD;&#x5149;&#x8FC7;&#x5EA6;&#x3002; &#x8BA1;&#x6570;&#x601D;&#x8DEF; &#x901A;&#x8FC7;&#x5BF9;&#x4E0D;&#x540C;&#x7F29;&#x7565;&#x56FE;&#x4E2D;&#x7684;&#x5934;&#x53D1;&#x505A;HT&#x7EBF;&#x6BB5;&#x68C0;&#x6D4B;, &#x7136;&#x540E;&#x5C06;&#x6240;&#x6709;&#x68C0;&#x6D4B;&#x7ED3;&#x679C;&#x8FDB;&#x884C;&#x201C;&#x903B;&#x8F91;&#x6216;&#x201D;&#x6574;&#x5408;, &#x4EE5;&#x51CF;&#x5C11;&#x7F3A;&#x5931;&#x5934;&#x53D1;&#x7684;&#x8BA1;&#x6570;, &#x89E3;&#x51B3;&#x91CD;&#x53E0;&#x5934;&#x53D1;&#x7684;&#x6F0F;&#x8BA1;&#x6570;&#x7684;&#x95EE;&#x9898;&#x3002; &#x672C;&#x6587;&#x7684;&#x6846;&#x67B6;&#x53EF;&#x4EE5;&#x88AB;&#x89C6;&#x4E3A;&#x8FC8;&#x5411;&#x5316;&#x5986;&#x54C1;&#x548C;&#x5934;&#x76AE;&#x6CBB;&#x7597;&#x5E94;&#x7528;&#x7684;&#x667A;&#x80FD;&#x8BA1;&#x7B97;&#x673A;&#x8F85;&#x52A9;&#x533B;&#x5B66;&#x56FE;&#x50CF;&#x5904;&#x7406;&#x7684;&#x7B2C;&#x4E00;&#x6B65;&#x3002; &#x6280;&#x672F;&#x603B;&#x7ED3; &#x9884;&#x5904;&#x7406;&#x9636;&#x6BB5; &#x5BF9;&#x8F93;&#x5165;&#x6570;&#x636E;(&#x5934;&#x76AE;&#x56FE;&#x7247;)&#x8FDB;&#x884C;&#x9884;&#x5904;&#x7406;, &#x4E3A;&#x4E0B;&#x4E00;&#x9636;&#x6BB5;&#x5BF9;&#x56FE;&#x7247;&#x4E2D;&#x5934;&#x53D1;&#x8FDB;&#x884C;&#x7CBE;&#x51C6;&#x8BA1;&#x6570;&#x7B49;&#x529F;&#x80FD;&#x6027;&#x64CD;&#x4F5C;&#x505A;&#x597D;&#x94FA;&#x57AB;&#x3002;&#x4E3B;&#x8981;&#x7528;&#x5230;&#x4EE5;&#x4E0B;&#x6280;&#x672F;&#xFF1A; Contrast Stretching (Normalization): &#x5BF9;&#x6BD4;&#x5EA6;&#x62C9;&#x4F38;(&#x901A;&#x5E38;&#x79F0;&#x4E3A;&#x5F52;&#x4E00;&#x5316;)&#x662F;&#x4E00;&#x79CD;&#x7B80;&#x5355;&#x7684;&#x56FE;&#x50CF;&#x589E;&#x5F3A;&#x6280;&#x672F;,&#x65E8;&#x5728;&#x901A;&#x8FC7;&#x201C;&#x62C9;&#x4F38;&#x201D;&#x56FE;&#x50CF;&#x6240;&#x5305;&#x542B;&#x7684;&#x5F3A;&#x5EA6;&#x503C;&#x8303;&#x56F4;&#x4EE5;&#x8986;&#x76D6;&#x6240;&#x9700;&#x7684;&#x503C;&#x8303;&#x56F4;&#x6765;&#x6539;&#x5584;&#x56FE;&#x50CF;&#x7684;&#x5BF9;&#x6BD4;&#x5EA6;&#x3002; &#x6280;&#x672F;&#x5E94;&#x7528;&#xFF1A;&#x589E;&#x52A0;&#x5934;&#x76AE;&#x4E0E;&#x5934;&#x53D1;&#x4E4B;&#x95F4;&#x7684;&#x5BF9;&#x6BD4;&#x5EA6;, &#x65B9;&#x4FBF;&#x4E0B;&#x9636;&#x6BB5;&#x5BF9;&#x5934;&#x53D1;&#x8FDB;&#x884C;&#x8BED;&#x4E49;&#x5206;&#x5272;&#x3002; Color Morphology EXTENDING MATHEMATICAL MORPHOLOGY TO COLOR IMAGE PROCESSING &#x6280;&#x672F;&#x5E94;&#x7528;&#xFF1A; &#x9664;&#x566A;, &#x53BB;&#x9664;&#x6CB9;&#x6027;&#x548C;&#x6E7F;&#x6DA6;&#x7684;&#x5934;&#x53D1;&#x5728;&#x5934;&#x53D1;&#x7684;&#x4E2D;&#x90E8;&#x4EA7;&#x751F;&#x7684;&#x4EAE;&#x70B9; Karhunen-Loeve Transform (KLT) Karhunen-Loeve&#x53D8;&#x6362;(KLT)(&#x4E5F;&#x79F0;&#x4E3A;Hotelling&#x53D8;&#x6362;&#x548C;&#x7279;&#x5F81;&#x5411;&#x91CF;&#x53D8;&#x6362;), &#x5B83;&#x4E0E;&#x4E3B;&#x6210;&#x5206;&#x5206;&#x6790;(PCA)&#x5BC6;&#x5207;&#x76F8;&#x5173;, &#x5E76;&#x5E7F;&#x6CDB;&#x7528;&#x4E8E;&#x8BB8;&#x591A;&#x9886;&#x57DF;&#x7684;&#x6570;&#x636E;&#x5206;&#x6790;&#x4E2D;, KL&#x53D8;&#x6362;&#x57FA;&#x4E8E;&#x56FE;&#x50CF;&#x7684;&#x7EDF;&#x8BA1;&#x5C5E;&#x6027;, &#x5E76;&#x5177;&#x6709;&#x4E00;&#x4E9B;&#x91CD;&#x8981;&#x7684;&#x5C5E;&#x6027;, &#x4F7F;&#x5176;&#x53EF;&#x7528;&#x4E8E;&#x56FE;&#x50CF;&#x5904;&#x7406;, &#x7279;&#x522B;&#x662F;&#x56FE;&#x50CF;&#x538B;&#x7F29;&#x3002; &#x6280;&#x672F;&#x5E94;&#x7528;&#xFF1A; &#x5C06;&#x5F69;&#x8272;&#x56FE;&#x50CF;&#x8F6C;&#x6362;&#x4E3A;&#x7070;&#x5EA6;&#x56FE;&#x50CF;&#x3002; Otsu thresholding Otsu thresholding&#xFF1A;&#x7B80;&#x5355;&#x8BF4;&#x6765;&#x8BE5;&#x65B9;&#x6CD5;&#x53EF;&#x5C06;&#x7070;&#x5EA6;&#x56FE;&#x50CF;&#x8FD8;&#x539F;&#x4E3A;&#x4E8C;&#x8FDB;&#x5236;&#x56FE;&#x50CF;&#x3002;&#x5728;&#x56FE;&#x50CF;&#x5904;&#x7406;&#x548C;&#x5206;&#x6790;&#x4E2D;, &#x6709;&#x65F6;&#x9700;&#x8981;&#x4E00;&#x79CD;&#x65B9;&#x6CD5;&#x6765;&#x5206;&#x79BB;&#x4E24;&#x4E2A;&#x76F8;&#x5173;&#x6570;&#x636E;, &#x4F8B;&#x5982;&#x80CC;&#x666F;&#x548C;&#x524D;&#x666F;&#x3002;Otsu&#x9608;&#x503C;&#x662F;&#x4E00;&#x79CD;&#x6570;&#x636E;&#x9A71;&#x52A8;&#x7684;&#x65B9;&#x6CD5;, &#x8BE5;&#x65B9;&#x6CD5;&#x53EF;&#x4EE5;&#x81EA;&#x9002;&#x5E94;&#x5730;&#x627E;&#x5230;&#x6700;&#x4F73;&#x9608;&#x503C;&#x4EE5;&#x533A;&#x5206;&#x4E24;&#x7C7B;&#x6570;&#x636E;&#x3002; &#x6280;&#x672F;&#x5E94;&#x7528;&#xFF1A; &#x56FE;&#x50CF;&#x5206;&#x5272;&#x548C;&#x56FE;&#x50CF;&#x4E8C;&#x503C;&#x5316;&#x3002; &#x591A;&#x5C3A;&#x5EA6;&#x7EBF;&#x68C0;&#x6D4B;&#x9636;&#x6BB5;(MSLD) &#x8BE5;&#x9636;&#x6BB5;&#x4E3B;&#x8981;&#x662F;&#x901A;&#x8FC7;&#x5404;&#x79CD;&#x6280;&#x672F;, &#x514B;&#x670D;&#x91CD;&#x53E0;&#x5934;&#x53D1;&#x65E0;&#x6CD5;&#x8BA1;&#x6570;, &#x4EE5;&#x53CA;&#x76F8;&#x90BB;&#x5934;&#x53D1;&#x4E4B;&#x95F4;&#x7684;&#x5934;&#x76AE;&#x88AB;&#x8BC6;&#x522B;&#x4E3A;&#x5934;&#x53D1;&#x7B49;&#x5F71;&#x54CD;&#x5934;&#x53D1;&#x8BA1;&#x6570;&#x7684;&#x76F8;&#x5173;&#x95EE;&#x9898;&#x3002;&#x4E3A;&#x4E0B;&#x9636;&#x6BB5;&#x5BF9;&#x5934;&#x53D1;&#x8FDB;&#x884C;&#x7CBE;&#x51C6;&#x8BA1;&#x6570;&#x7684;&#x505A;&#x597D;&#x94FA;&#x57AB;&#x3002;&#x4E3B;&#x8981;&#x7528;&#x5230;&#x4EE5;&#x4E0B;&#x6280;&#x672F;&#xFF1A; &#x970D;&#x592B;&#x53D8;&#x6362;(HT) &#x970D;&#x592B;&#x53D8;&#x6362;(HT) &#x970D;&#x592B;&#x53D8;&#x6362;&#x662F;&#x4E00;&#x79CD;&#x53EF;&#x7528;&#x4E8E;&#x9694;&#x79BB;&#x56FE;&#x50CF;&#x4E2D;&#x7279;&#x5B9A;&#x5F62;&#x72B6;&#x7684;&#x7279;&#x5F81;&#x7684;&#x6280;&#x672F;&#x3002;&#x56E0;&#x4E3A;&#x5B83;&#x8981;&#x6C42;&#x4EE5;&#x67D0;&#x79CD;&#x53C2;&#x6570;&#x5F62;&#x5F0F;&#x6307;&#x5B9A;&#x6240;&#x9700;&#x7684;&#x7279;&#x5F81;, &#x6240;&#x4EE5;&#x7ECF;&#x5178;&#x7684;Hough&#x53D8;&#x6362;&#x6700;&#x5E38;&#x7528;&#x4E8E;&#x68C0;&#x6D4B;&#x89C4;&#x5219;&#x66F2;&#x7EBF;(&#x4F8B;&#x5982;&#x76F4;&#x7EBF;, &#x5706;, &#x692D;&#x5706;&#x7B49;)&#x3002; &#x6280;&#x672F;&#x5E94;&#x7528;&#xFF1A; HT&#x662F;&#x6700;&#x5E38;&#x7528;&#x7684;&#x7EBF;&#x68C0;&#x6D4B;&#x6846;&#x67B6;&#x4E4B;&#x4E00;&#x3002;&#x4F46;&#x662F;&#x5F53;&#x4F7F;&#x7528;&#x5E38;&#x89C4;&#x7684;&#x5355;&#x5C3A;&#x5EA6;HT&#x65F6;, &#x53EF;&#x80FD;&#x4F1A;&#x4E22;&#x5931;&#x5927;&#x91CF;&#x7684;&#x5934;&#x53D1;&#x6BB5;&#x3002;&#x6545;&#x63D0;&#x51FA;&#x5C06;HT&#x5E94;&#x7528;&#x4E8E;&#x4E09;&#x4E2A;&#x6BD4;&#x4F8B;&#x7684;&#x56FE;&#x50CF;, &#x5305;&#x62EC;1024&#xD7;768(&#x539F;&#x59CB;&#x6BD4;&#x4F8B;), 512&#xD7;384&#x548C;256&#xD7;192, &#x6700;&#x540E;&#x901A;&#x8FC7;&#x903B;&#x8F91;&#x6216;&#x5C06;&#x4E09;&#x4E2A;&#x6BD4;&#x4F8B;&#x56FE;&#x50CF;&#x4E2D;&#x7684;&#x88AB;&#x68C0;&#x6D4B;&#x51FA;&#x7684;&#x5934;&#x53D1;&#x8FDB;&#x884C;&#x6574;&#x5408;, &#x4EE5;&#x63D0;&#x9AD8;&#x5934;&#x53D1;&#x8BA1;&#x6570;&#x51C6;&#x786E;&#x5EA6;&#x3002; Canny Edge Detection Canny&#x8FB9;&#x7F18;&#x68C0;&#x6D4B;&#x662F;&#x4E00;&#x79CD;&#x591A;&#x6B65;&#x9AA4;&#x7B97;&#x6CD5;, &#x53EF;&#x4EE5;&#x540C;&#x65F6;&#x68C0;&#x6D4B;&#x5230;&#x566A;&#x58F0;&#x88AB;&#x6291;&#x5236;&#x7684;&#x8FB9;&#x7F18;&#x3002;&#x5728;&#x56FE;&#x50CF;&#x4E8C;&#x503C;&#x5316;&#x6B65;&#x9AA4;&#x4E2D;, &#x7531;&#x4E8E;&#x9519;&#x8BEF;&#x5730;&#x5047;&#x5B9A;&#x4E86;&#x4E24;&#x6839;&#x5355;&#x72EC;&#x7684;&#x5934;&#x53D1;&#x7684;&#x8FDE;&#x63A5;, &#x4F4D;&#x4E8E;&#x4E24;&#x6839;&#x5934;&#x53D1;&#x4E4B;&#x95F4;&#x7684;&#x5934;&#x76AE;&#x50CF;&#x7D20;&#x88AB;&#x6807;&#x8BB0;&#x4E3A;&#x5934;&#x53D1;&#x7684;&#x4E00;&#x90E8;&#x5206;&#x3002;&#x800C;&#x4E14;, &#x5F53;&#x4E24;&#x6839;&#x5934;&#x53D1;&#x592A;&#x9760;&#x8FD1;&#x6216;&#x5F7C;&#x6B64;&#x91CD;&#x53E0;&#x65F6;, &#x5982;&#x679C;&#x76F4;&#x63A5;&#x5E94;&#x7528;&#x7A00;&#x758F;&#x7B97;&#x6CD5;, &#x5219;&#x4F1A;&#x9519;&#x8FC7;&#x4E00;&#x6839;&#x6216;&#x4E24;&#x6839;&#x5934;&#x53D1;&#x3002; &#x6280;&#x672F;&#x5E94;&#x7528;&#xFF1A; &#x4F7F;&#x7528;&#x8FB9;&#x7F18;&#x4FE1;&#x606F;&#x6765;&#x627E;&#x51FA;&#x9690;&#x85CF;&#x6216;&#x91CD;&#x53E0;&#x7684;&#x5934;&#x53D1;&#x3002;&#x53EF;&#x4EE5;&#x4ECE;&#x9690;&#x85CF;&#x7684;&#x5934;&#x53D1;&#x6216;&#x91CD;&#x53E0;&#x7684;&#x591A;&#x6839;&#x5934;&#x53D1;&#x4E2D;&#x63D0;&#x53D6;&#x4E24;&#x4E2A;&#x5E73;&#x884C;&#x7684;&#x8FB9;&#x7F18;&#x3002; Thinning Parallel Line Bundling (PLB) &#x5934;&#x53D1;&#x6807;&#x8BB0;&#x548C;&#x8BA1;&#x6570;&#x9636;&#x6BB5;(Hair Labling and Counting) &#x8BE5;&#x9636;&#x6BB5;&#x7684;&#x76EE;&#x7684;&#x662F;&#x51C6;&#x786E;&#x8BA1;&#x7B97;&#x5934;&#x76AE;&#x4E0A;&#x7684;&#x6BDB;&#x53D1;&#x6570;&#x91CF;&#x3002;&#x8FD9;&#x53EF;&#x4EE5;&#x770B;&#x4F5C;&#x662F;&#x805A;&#x7C7B;&#x548C;&#x6807;&#x8BB0;&#x95EE;&#x9898;&#x3002;&#x76EE;&#x6807;&#x662F;&#x5C06;&#x4E00;&#x7EC4;&#x7EBF;&#x6BB5;&#x7EC4;&#x5408;&#x6210;&#x8BED;&#x4E49;&#x201C;&#x5934;&#x53D1;&#x201D;&#x5E76;&#x5206;&#x914D;&#x552F;&#x4E00;&#x7684;&#x6807;&#x7B7E;&#x3002; &#x4E3B;&#x8981;&#x7528;&#x5230;&#x4EE5;&#x4E0B;&#x6280;&#x672F;&#xFF1A; Relaxation Labeling &#x677E;&#x5F1B;&#x6807;&#x8BB0;&#x662F;&#x4E00;&#x79CD;&#x56FE;&#x50CF;&#x5904;&#x7406;&#x65B9;&#x6CD5;&#x3002;&#x5176;&#x76EE;&#x6807;&#x662F;&#x5C06;&#x6807;&#x7B7E;&#x4E0E;&#x7ED9;&#x5B9A;&#x56FE;&#x50CF;&#x7684;&#x50CF;&#x7D20;&#x6216;&#x7ED9;&#x5B9A;&#x56FE;&#x7684;&#x8282;&#x70B9;&#x76F8;&#x5173;&#x8054;&#x3002; &#x6280;&#x672F;&#x5E94;&#x7528;&#xFF1A; &#x5728;&#x672C;&#x7814;&#x7A76;&#x4E2D;, RL&#x7B97;&#x6CD5;&#x88AB;&#x89C6;&#x4E3A;&#x7528;&#x4E8E;&#x6807;&#x8BB0;&#x6BCF;&#x4E2A;&#x7EBF;&#x6BB5;&#x7684;&#x805A;&#x7C7B;&#x65B9;&#x6CD5;&#x3002; &#x53C2;&#x8003;&#x6587;&#x732E; An Unsupervised Hair Segmentation and Counting System in Microscopy Images Contrast Stretching (Normalization) Color Morphology EXTENDING MATHEMATICAL MORPHOLOGY TO COLOR IMAGE PROCESSING Karhunen-Loeve Transform (KLT) Otsu thresholding Hough Transform(HT) Canny Edge Detection Thinning Evaluation of a Bundling Technique for Parallel Coordinates Relaxation Labeling","categories":[{"name":"Technology","slug":"Technology","permalink":"https://littlemeemoon.cn/categories/Technology/"},{"name":"Paper Smash","slug":"Technology/Paper-Smash","permalink":"https://littlemeemoon.cn/categories/Technology/Paper-Smash/"}],"tags":[{"name":"Hair Counting","slug":"Hair-Counting","permalink":"https://littlemeemoon.cn/tags/Hair-Counting/"},{"name":"Digital Image Processing","slug":"Digital-Image-Processing","permalink":"https://littlemeemoon.cn/tags/Digital-Image-Processing/"},{"name":"Line Detection","slug":"Line-Detection","permalink":"https://littlemeemoon.cn/tags/Line-Detection/"},{"name":"Paper","slug":"Paper","permalink":"https://littlemeemoon.cn/tags/Paper/"}],"keywords":[{"name":"Technology","slug":"Technology","permalink":"https://littlemeemoon.cn/categories/Technology/"},{"name":"Paper Smash","slug":"Technology/Paper-Smash","permalink":"https://littlemeemoon.cn/categories/Technology/Paper-Smash/"}]},{"title":"Hair Counting | part 1 | Evalution of hair and scalp condition based on microscopy image analysis","slug":"Technology/Paper-Smash/Evalution of hair and scalp condition based on microscopy image analysis  | Hair Counting - 1","date":"2019-12-24T12:35:33.000Z","updated":"2020-06-04T04:19:58.982Z","comments":true,"path":"2019/12/24/Technology/Paper-Smash/Evalution of hair and scalp condition based on microscopy image analysis  | Hair Counting - 1/","link":"","permalink":"https://littlemeemoon.cn/2019/12/24/Technology/Paper-Smash/Evalution%20of%20hair%20and%20scalp%20condition%20based%20on%20microscopy%20image%20analysis%20%20|%20Hair%20Counting%20-%201/","excerpt":"","text":"Paper: Evalution of hair and scalp condition based on microscopy image analysis &#x8BA1;&#x6570;&#x65B9;&#x6CD5; &#x5178;&#x578B;&#x7684;&#x4FBF;&#x643A;&#x5F0F;&#x663E;&#x5FAE;&#x955C;&#x76F8;&#x673A;&#x901A;&#x5E38;&#x8986;&#x76D6;5mm x 5mm&#x7684;&#x77E9;&#x5F62;&#x3002;&#x56E0;&#x6B64;&#xFF0C;&#x5982;&#x679C;&#x4E00;&#x6839;&#x5934;&#x53D1;&#x957F;&#x4E8E;5&#x6BEB;&#x7C73;&#xFF0C;&#x5219;&#x5B83;&#x5FC5;&#x987B;&#x8D85;&#x51FA;&#x77E9;&#x5F62;&#x3002;&#x57FA;&#x4E8E;&#x6B64;&#x89C2;&#x5BDF;&#xFF0C;&#x6211;&#x4EEC;&#x5BF9;&#x6BDB;&#x53D1;&#x8BA1;&#x6570;&#x6709;&#x4E24;&#x4E2A;&#x5047;&#x8BBE;&#xFF1A; 1. &#x6BCF;&#x6839;&#x5934;&#x53D1;&#x7531;&#x4E00;&#x4E2A;&#x8D77;&#x70B9;&#x548C;&#x4E00;&#x4E2A;&#x7EC8;&#x70B9;&#x8868;&#x793A;; 2. &#x8D77;&#x70B9;&#x4F4D;&#x4E8E;&#x77E9;&#x5F62;&#x5185;&#x90E8;&#xFF0C;&#x7EC8;&#x70B9;&#x4F4D;&#x4E8E;&#x56FE;&#x50CF;&#x7684;&#x8FB9;&#x754C;&#x4E0A;&#x3002; &#x5934;&#x53D1;&#x8BA1;&#x6570;&#xFF1A;&#x4F7F;&#x7528;&#x9884;&#x5904;&#x7406;&#x9636;&#x6BB5;&#x83B7;&#x5F97;&#x7684;&#x9AA8;&#x67B6;&#x56FE;&#x50CF;&#xFF0C;&#x57FA;&#x4E8E;&#x4E0A;&#x8FF0;&#x4E24;&#x70B9;&#x5047;&#x8BBE;&#xFF0C;&#x5982;&#x679C;&#x5934;&#x53D1;&#x7684;&#x9AA8;&#x67B6;&#x7EBF;&#x7684;&#x4E00;&#x4E2A;&#x70B9;&#x5728;&#x77E9;&#x5F62;&#x5185;&#x800C;&#x53E6;&#x4E00;&#x70B9;&#x5728;&#x8FB9;&#x754C;&#x4E0A;&#xFF0C;&#x5219;&#x6211;&#x4EEC;&#x5BF9;&#x5934;&#x53D1;&#x8FDB;&#x884C;&#x8BA1;&#x6570;&#x3002; fig_3_Example_of_hair_counting &#x56FE;3&#x793A;&#x51FA;&#x4E86;&#x5934;&#x53D1;&#x8BA1;&#x6570;&#x7684;&#x793A;&#x4F8B;&#x3002;&#x5728;&#x56FE;&#x4E2D;&#xFF0C;&#x8BA1;&#x6570;&#x7684;&#x50CF;&#x7D20;&#x7528;&#x7EA2;&#x8272;&#x70B9;&#x6807;&#x8BB0;&#xFF0C;&#x5E76;&#x4E14;&#x8FD9;&#x4E9B;&#x70B9;&#x53E0;&#x52A0;&#x5728;&#x539F;&#x59CB;&#x56FE;&#x50CF;&#x4E0A;&#x3002;&#x7136;&#x540E;&#xFF0C;&#x53EF;&#x4EE5;&#x901A;&#x8FC7;&#x5C06;&#x8BA1;&#x6570;&#x7684;&#x50CF;&#x7D20;&#x6570;&#x9664;&#x4EE5;&#x56FE;&#x50CF;&#x5C3A;&#x5BF8;&#x6765;&#x8BA1;&#x7B97;&#x5934;&#x53D1;&#x5BC6;&#x5EA6;&#x3002; &#x5B9E;&#x9A8C;&#x7ED3;&#x679C; &#x4E3A;&#x4E86;&#x8BC4;&#x4F30;&#x5934;&#x53D1;&#x8BA1;&#x6570;&#x7B97;&#x6CD5;&#xFF0C;&#x6211;&#x4EEC;&#x5BF9;200&#x4E2A;&#x5934;&#x76AE;&#x56FE;&#x50CF;&#x7684;&#x6570;&#x636E;&#x96C6;&#x8FDB;&#x884C;&#x4E86;&#x5B9E;&#x9A8C;&#x3002; &#x8868;2&#x5217;&#x51FA;&#x4E86;&#x6839;&#x636E;&#x6211;&#x4EEC;&#x7684;&#x7B97;&#x6CD5;&#x8BA1;&#x7B97;&#x51FA;&#x7684;&#x5B9E;&#x9645;&#x6BDB;&#x53D1;&#x6570;&#x4E0E;&#x4F30;&#x8BA1;&#x6BDB;&#x53D1;&#x6570;&#x4E4B;&#x95F4;&#x7684;&#x7CBE;&#x786E;&#x5EA6;/&#x53EC;&#x56DE;&#x7387;&#x3002; &#x5E73;&#x5747;&#x51C6;&#x786E;&#x5EA6;&#x548C;&#x53EC;&#x56DE;&#x7387;&#x5206;&#x522B;&#x4E3A;91.35&#xFF05;&#x548C;92.01&#xFF05;&#x3002;&#x5373;&#x4F7F;&#x6027;&#x80FD;&#x76F8;&#x5F53;&#x597D;&#xFF0C;&#x7CBE;&#x5EA6;/&#x8C03;&#x7528;&#x7387;&#x4E5F;&#x53EF;&#x4EE5;&#x8FDB;&#x4E00;&#x6B65;&#x63D0;&#x9AD8;&#x3002;&#x9519;&#x8BEF;&#x7684;&#x4E00;&#x4E2A;&#x5173;&#x952E;&#x539F;&#x56E0;&#x662F;&#x9884;&#x5904;&#x7406;&#x548C;&#x539F;&#x59CB;&#x56FE;&#x50CF;&#x7684;&#x8D28;&#x91CF;&#x3002;&#x5728;&#x6211;&#x4EEC;&#x7684;&#x5B9E;&#x9A8C;&#x4E2D;&#xFF0C;&#x4E00;&#x65E6;&#x56FE;&#x50CF;&#x4E2D;&#x51FA;&#x73B0;&#x6A21;&#x7CCA;&#x70B9;&#xFF0C;&#x5C31;&#x4E0D;&#x53EF;&#x80FD;&#x5728;&#x9884;&#x5904;&#x7406;&#x6B65;&#x9AA4;&#x4E2D;&#x6D88;&#x9664;&#x6240;&#x6709;&#x566A;&#x97F3;&#x3002;&#x56E0;&#x6B64;&#xFF0C;&#x8003;&#x8651;&#x5230;&#x76F8;&#x673A;&#x566A;&#x58F0;&#xFF0C;&#x7CBE;&#x5EA6;&#x975E;&#x5E38;&#x597D;&#x3002; &#x540C;&#x6837;&#xFF0C;&#x6211;&#x4EEC;&#x6D4B;&#x8BD5;&#x4E86;&#x6BDB;&#x5B54;&#x8BA1;&#x6570;&#x7B97;&#x6CD5;&#xFF0C;&#x7ED3;&#x679C;&#x663E;&#x793A;&#x5E73;&#x5747;&#x51C6;&#x786E;&#x7387;&#x7EA6;&#x4E3A;90&#xFF05;&#x3002; &#x603B;&#x7ED3; &#x8BA1;&#x6570;&#x601D;&#x8DEF; &#x5C06;&#x56FE;&#x7247;&#x8FB9;&#x7F18;&#x770B;&#x4F5C;&#x4E00;&#x77E9;&#x5F62;&#xFF1B; &#x5BF9;&#x6EE1;&#x8DB3;&#x201C;&#x5934;&#x53D1;&#x7531;&#x4E00;&#x4E2A;&#x8D77;&#x70B9;&#x548C;&#x4E00;&#x4E2A;&#x7EC8;&#x70B9;&#x8868;&#x793A;&#xFF0C;&#x4E14;&#x8D77;&#x70B9;&#x4F4D;&#x4E8E;&#x77E9;&#x5F62;&#x5185;&#x90E8;&#xFF0C;&#x7EC8;&#x70B9;&#x4F4D;&#x4E8E;&#x56FE;&#x50CF;&#x7684;&#x8FB9;&#x754C;&#x4E0A;&#x201D;&#x6761;&#x4EF6;&#x7684;&#x5934;&#x53D1;&#x8FDB;&#x884C;&#x8BA1;&#x6570;&#xFF1B; &#x4F7F;&#x7528;&#x901A;&#x8FC7;&#x7EC6;&#x5316;&#x64CD;&#x4F5C;&#x83B7;&#x5F97;&#x7684;&#x5934;&#x53D1;&#x9AA8;&#x67B6;&#x56FE;&#x50CF;&#x5BF9;&#x6EE1;&#x8DB3;&#x6761;&#x4EF6;&#x7684;&#x5934;&#x53D1;&#x8FDB;&#x884C;&#x8BA1;&#x6570;&#xFF1B; &#x901A;&#x8FC7;&#x5C06;&#x8BA1;&#x6570;&#x7684;&#x50CF;&#x7D20;&#x6570;&#x9664;&#x4EE5;&#x56FE;&#x50CF;&#x5C3A;&#x5BF8;&#x6765;&#x8BA1;&#x7B97;&#x5934;&#x53D1;&#x5BC6;&#x5EA6;&#x3002; &#x53C2;&#x8003;&#x6587;&#x732E; Evalution of hair and scalp condition based on microscopy image analysis","categories":[{"name":"Technology","slug":"Technology","permalink":"https://littlemeemoon.cn/categories/Technology/"},{"name":"Paper Smash","slug":"Technology/Paper-Smash","permalink":"https://littlemeemoon.cn/categories/Technology/Paper-Smash/"}],"tags":[{"name":"Hair Counting","slug":"Hair-Counting","permalink":"https://littlemeemoon.cn/tags/Hair-Counting/"},{"name":"Digital Image Processing","slug":"Digital-Image-Processing","permalink":"https://littlemeemoon.cn/tags/Digital-Image-Processing/"},{"name":"Line Detection","slug":"Line-Detection","permalink":"https://littlemeemoon.cn/tags/Line-Detection/"},{"name":"Paper","slug":"Paper","permalink":"https://littlemeemoon.cn/tags/Paper/"}],"keywords":[{"name":"Technology","slug":"Technology","permalink":"https://littlemeemoon.cn/categories/Technology/"},{"name":"Paper Smash","slug":"Technology/Paper-Smash","permalink":"https://littlemeemoon.cn/categories/Technology/Paper-Smash/"}]}]}